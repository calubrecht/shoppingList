!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t,n){"use strict";e.exports=n(4)},function(e,t,n){e.exports=n(8)()},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var i=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(e){i[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,s=a(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))r.call(n,c)&&(s[c]=n[c]);if(i){l=i(n);for(var f=0;f<l.length;f++)o.call(n,l[f])&&(s[l[f]]=n[l[f]])}}return s}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(5)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var i=n(2),r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,l=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,f=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,p=r?Symbol.for("react.memo"):60115,m=r?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_={};function b(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||y}function w(){}function k(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||y}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=b.prototype;var E=k.prototype=new w;E.constructor=k,i(E,b.prototype),E.isPureReactComponent=!0;var T={current:null},S=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var i,r={},a=null,l=null;if(null!=t)for(i in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,i)&&!x.hasOwnProperty(i)&&(r[i]=t[i]);var s=arguments.length-2;if(1===s)r.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];r.children=u}if(e&&e.defaultProps)for(i in s=e.defaultProps)void 0===r[i]&&(r[i]=s[i]);return{$$typeof:o,type:e,key:a,ref:l,props:r,_owner:T.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var R=/\/+/g,D=[];function O(e,t,n,i){if(D.length){var r=D.pop();return r.result=e,r.keyPrefix=t,r.func=n,r.context=i,r.count=0,r}return{result:e,keyPrefix:t,func:n,context:i,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>D.length&&D.push(e)}function N(e,t,n){return null==e?0:function e(t,n,i,r){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var s=!1;if(null===t)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case o:case a:s=!0}}if(s)return i(r,t,""===n?"."+A(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=n+A(l=t[u],u);s+=e(l,c,i,r)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=g&&t[g]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),u=0;!(l=t.next()).done;)s+=e(l=l.value,c=n+A(l,u++),i,r);else if("object"===l)throw i=""+t,Error(v(31,"[object Object]"===i?"object with keys {"+Object.keys(t).join(", ")+"}":i,""));return s}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function z(e,t,n){var i=e.result,r=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,i,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,r+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n)),i.push(e))}function L(e,t,n,i,r){var o="";null!=n&&(o=(""+n).replace(R,"$&/")+"/"),N(e,z,t=O(t,o,i,r)),I(t)}var F={current:null};function j(){var e=F.current;if(null===e)throw Error(v(321));return e}var H={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:i};t.Children={map:function(e,t,n){if(null==e)return e;var i=[];return L(e,i,null,t,n),i},forEach:function(e,t,n){if(null==e)return e;N(e,M,t=O(null,null,t,n)),I(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(v(143));return e}},t.Component=b,t.Fragment=l,t.Profiler=u,t.PureComponent=k,t.StrictMode=s,t.Suspense=h,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=H,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var r=i({},e.props),a=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=T.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)S.call(t,c)&&!x.hasOwnProperty(c)&&(r[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)r.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];r.children=u}return{$$typeof:o,type:e.type,key:a,ref:l,props:r,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return j().useCallback(e,t)},t.useContext=function(e,t){return j().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return j().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return j().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return j().useLayoutEffect(e,t)},t.useMemo=function(e,t){return j().useMemo(e,t)},t.useReducer=function(e,t,n){return j().useReducer(e,t,n)},t.useRef=function(e){return j().useRef(e)},t.useState=function(e){return j().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var i=n(0),r=n(2),o=n(6);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!i)throw Error(a(227));function l(e,t,n,i,r,o,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var s=!1,u=null,c=!1,f=null,d={onError:function(e){s=!0,u=e}};function h(e,t,n,i,r,o,a,c,f){s=!1,u=null,l.apply(d,arguments)}var p=null,m=null,g=null;function v(e,t,n){var i=e.type||"unknown-event";e.currentTarget=g(n),function(e,t,n,i,r,o,l,d,p){if(h.apply(this,arguments),s){if(!s)throw Error(a(198));var m=u;s=!1,u=null,c||(c=!0,f=m)}}(i,t,void 0,e),e.currentTarget=null}var y=null,_={};function b(){if(y)for(var e in _){var t=_[e],n=y.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!k[n]){if(!t.extractEvents)throw Error(a(97,e));for(var i in k[n]=t,n=t.eventTypes){var r=void 0,o=n[i],l=t,s=i;if(E.hasOwnProperty(s))throw Error(a(99,s));E[s]=o;var u=o.phasedRegistrationNames;if(u){for(r in u)u.hasOwnProperty(r)&&w(u[r],l,s);r=!0}else o.registrationName?(w(o.registrationName,l,s),r=!0):r=!1;if(!r)throw Error(a(98,i,e))}}}}function w(e,t,n){if(T[e])throw Error(a(100,e));T[e]=t,S[e]=t.eventTypes[n].dependencies}var k=[],E={},T={},S={};function x(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var i=e[t];if(!_.hasOwnProperty(t)||_[t]!==i){if(_[t])throw Error(a(102,t));_[t]=i,n=!0}}n&&b()}var C=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),P=null,R=null,D=null;function O(e){if(e=m(e)){if("function"!=typeof P)throw Error(a(280));var t=e.stateNode;t&&(t=p(t),P(e.stateNode,e.type,t))}}function I(e){R?D?D.push(e):D=[e]:R=e}function N(){if(R){var e=R,t=D;if(D=R=null,O(e),t)for(e=0;e<t.length;e++)O(t[e])}}function A(e,t){return e(t)}function M(e,t,n,i,r){return e(t,n,i,r)}function z(){}var L=A,F=!1,j=!1;function H(){null===R&&null===D||(z(),N())}function U(e,t,n){if(j)return e(t,n);j=!0;try{return L(e,t,n)}finally{j=!1,H()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,B=Object.prototype.hasOwnProperty,V={},Y={};function G(e,t,n,i,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){q[e]=new G(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];q[t]=new G(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){q[e]=new G(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){q[e]=new G(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){q[e]=new G(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){q[e]=new G(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){q[e]=new G(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){q[e]=new G(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){q[e]=new G(e,5,!1,e.toLowerCase(),null,!1)}));var X=/[\-:]([a-z])/g;function Q(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(X,Q);q[t]=new G(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(X,Q);q[t]=new G(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(X,Q);q[t]=new G(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){q[e]=new G(e,1,!1,e.toLowerCase(),null,!1)})),q.xlinkHref=new G("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){q[e]=new G(e,1,!1,e.toLowerCase(),null,!0)}));var $=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function K(e,t,n,i){var r=q.hasOwnProperty(t)?q[t]:null;(null!==r?0===r.type:!i&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,i){if(null==t||function(e,t,n,i){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,i)&&(n=null),i||null===r?function(e){return!!B.call(Y,e)||!B.call(V,e)&&(W.test(e)?Y[e]=!0:(V[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,i=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,i?e.setAttributeNS(i,t,n):e.setAttribute(t,n))))}$.hasOwnProperty("ReactCurrentDispatcher")||($.ReactCurrentDispatcher={current:null}),$.hasOwnProperty("ReactCurrentBatchConfig")||($.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,ie=Z?Symbol.for("react.strict_mode"):60108,re=Z?Symbol.for("react.profiler"):60114,oe=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,se=Z?Symbol.for("react.forward_ref"):60112,ue=Z?Symbol.for("react.suspense"):60113,ce=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,he=Z?Symbol.for("react.block"):60121,pe="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=pe&&e[pe]||e["@@iterator"])?e:null}function ge(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case re:return"Profiler";case ie:return"StrictMode";case ue:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case oe:return"Context.Provider";case se:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ge(e.type);case he:return ge(e.render);case de:if(e=1===e._status?e._result:null)return ge(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var i=e._debugOwner,r=e._debugSource,o=ge(e.type);n=null,i&&(n=ge(i.type)),i=o,o="",r?o=" (at "+r.fileName.replace(J,"")+":"+r.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(i||"Unknown")+o}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function _e(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function be(e){e._valueTracker||(e._valueTracker=function(e){var t=_e(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){i=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(e){i=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),i="";return e&&(i=_e(e)?e.checked?"true":"false":e.value),(e=i)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return r({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,i=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Te(e,t){null!=(t=t.checked)&&K(e,"checked",t,!1)}function Se(e,t){Te(e,t);var n=ye(t.value),i=t.type;if(null!=n)"number"===i?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===i||"reset"===i)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ce(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ce(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function xe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!("submit"!==i&&"reset"!==i||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ce(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Pe(e,t){return e=r({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Re(e,t,n,i){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&i&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(i&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function De(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return r({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function Ie(e,t){var n=ye(t.value),i=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=i&&(e.defaultValue=""+i)}function Ne(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ae="http://www.w3.org/1999/xhtml",Me="http://www.w3.org/2000/svg";function ze(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ze(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Fe,je=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,i,r){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Me||"innerHTML"in e)e.innerHTML=t;else{for((Fe=Fe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Fe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function He(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ue(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var We={animationend:Ue("Animation","AnimationEnd"),animationiteration:Ue("Animation","AnimationIteration"),animationstart:Ue("Animation","AnimationStart"),transitionend:Ue("Transition","TransitionEnd")},Be={},Ve={};function Ye(e){if(Be[e])return Be[e];if(!We[e])return e;var t,n=We[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ve)return Be[e]=n[t];return e}C&&(Ve=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);var Ge=Ye("animationend"),qe=Ye("animationiteration"),Xe=Ye("animationstart"),Qe=Ye("transitionend"),$e="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ke=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Ke.get(e);return void 0===t&&(t=new Map,Ke.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,i=t;;){var r=n.return;if(null===r)break;var o=r.alternate;if(null===o){if(null!==(i=r.return)){n=i;continue}break}if(r.child===o.child){for(o=r.child;o;){if(o===n)return tt(r),e;if(o===i)return tt(r),t;o=o.sibling}throw Error(a(188))}if(n.return!==i.return)n=r,i=o;else{for(var l=!1,s=r.child;s;){if(s===n){l=!0,n=r,i=o;break}if(s===i){l=!0,i=r,n=o;break}s=s.sibling}if(!l){for(s=o.child;s;){if(s===n){l=!0,n=o,i=r;break}if(s===i){l=!0,i=o,n=r;break}s=s.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==i)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function it(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function rt(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var i=0;i<t.length&&!e.isPropagationStopped();i++)v(e,t[i],n[i]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(ot=it(ot,e)),e=ot,ot=null,e){if(rt(e,at),ot)throw Error(a(95));if(c)throw e=f,c=!1,f=null,e}}function st(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ut(e){if(!C)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function dt(e,t,n,i){if(ct.length){var r=ct.pop();return r.topLevelType=e,r.eventSystemFlags=i,r.nativeEvent=t,r.targetInst=n,r}return{topLevelType:e,eventSystemFlags:i,nativeEvent:t,targetInst:n,ancestors:[]}}function ht(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var i=n;if(3===i.tag)i=i.stateNode.containerInfo;else{for(;i.return;)i=i.return;i=3!==i.tag?null:i.stateNode.containerInfo}if(!i)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Cn(i)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var r=st(e.nativeEvent);i=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var l=null,s=0;s<k.length;s++){var u=k[s];u&&(u=u.extractEvents(i,t,o,r,a))&&(l=it(l,u))}lt(l)}}function pt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Xt(t,"scroll",!0);break;case"focus":case"blur":Xt(t,"focus",!0),Xt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ut(e)&&Xt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===$e.indexOf(e)&&qt(e,t)}n.set(e,null)}}var mt,gt,vt,yt=!1,_t=[],bt=null,wt=null,kt=null,Et=new Map,Tt=new Map,St=[],xt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ct="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Pt(e,t,n,i,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r,container:i}}function Rt(e,t){switch(e){case"focus":case"blur":bt=null;break;case"dragenter":case"dragleave":wt=null;break;case"mouseover":case"mouseout":kt=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function Dt(e,t,n,i,r,o){return null===e||e.nativeEvent!==o?(e=Pt(t,n,i,r,o),null!==t&&(null!==(t=Pn(t))&&gt(t)),e):(e.eventSystemFlags|=i,e)}function Ot(e){var t=Cn(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Pn(t);return null!==n&&gt(n),e.blockedOn=t,!1}return!0}function Nt(e,t,n){It(e)&&n.delete(t)}function At(){for(yt=!1;0<_t.length;){var e=_t[0];if(null!==e.blockedOn){null!==(e=Pn(e.blockedOn))&&mt(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:_t.shift()}null!==bt&&It(bt)&&(bt=null),null!==wt&&It(wt)&&(wt=null),null!==kt&&It(kt)&&(kt=null),Et.forEach(Nt),Tt.forEach(Nt)}function Mt(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,At)))}function zt(e){function t(t){return Mt(t,e)}if(0<_t.length){Mt(_t[0],e);for(var n=1;n<_t.length;n++){var i=_t[n];i.blockedOn===e&&(i.blockedOn=null)}}for(null!==bt&&Mt(bt,e),null!==wt&&Mt(wt,e),null!==kt&&Mt(kt,e),Et.forEach(t),Tt.forEach(t),n=0;n<St.length;n++)(i=St[n]).blockedOn===e&&(i.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)Ot(n),null===n.blockedOn&&St.shift()}var Lt={},Ft=new Map,jt=new Map,Ht=["abort","abort",Ge,"animationEnd",qe,"animationIteration",Xe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Qe,"transitionEnd","waiting","waiting"];function Ut(e,t){for(var n=0;n<e.length;n+=2){var i=e[n],r=e[n+1],o="on"+(r[0].toUpperCase()+r.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[i],eventPriority:t},jt.set(i,t),Ft.set(i,o),Lt[r]=o}}Ut("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ut("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ut(Ht,2);for(var Wt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Bt=0;Bt<Wt.length;Bt++)jt.set(Wt[Bt],0);var Vt=o.unstable_UserBlockingPriority,Yt=o.unstable_runWithPriority,Gt=!0;function qt(e,t){Xt(t,e,!1)}function Xt(e,t,n){var i=jt.get(t);switch(void 0===i?2:i){case 0:i=Qt.bind(null,t,1,e);break;case 1:i=$t.bind(null,t,1,e);break;default:i=Kt.bind(null,t,1,e)}n?e.addEventListener(t,i,!0):e.addEventListener(t,i,!1)}function Qt(e,t,n,i){F||z();var r=Kt,o=F;F=!0;try{M(r,e,t,n,i)}finally{(F=o)||H()}}function $t(e,t,n,i){Yt(Vt,Kt.bind(null,e,t,n,i))}function Kt(e,t,n,i){if(Gt)if(0<_t.length&&-1<xt.indexOf(e))e=Pt(null,e,t,n,i),_t.push(e);else{var r=Jt(e,t,n,i);if(null===r)Rt(e,i);else if(-1<xt.indexOf(e))e=Pt(r,e,t,n,i),_t.push(e);else if(!function(e,t,n,i,r){switch(t){case"focus":return bt=Dt(bt,e,t,n,i,r),!0;case"dragenter":return wt=Dt(wt,e,t,n,i,r),!0;case"mouseover":return kt=Dt(kt,e,t,n,i,r),!0;case"pointerover":var o=r.pointerId;return Et.set(o,Dt(Et.get(o)||null,e,t,n,i,r)),!0;case"gotpointercapture":return o=r.pointerId,Tt.set(o,Dt(Tt.get(o)||null,e,t,n,i,r)),!0}return!1}(r,e,t,n,i)){Rt(e,i),e=dt(e,i,null,t);try{U(ht,e)}finally{ft(e)}}}}function Jt(e,t,n,i){if(null!==(n=Cn(n=st(i)))){var r=Ze(n);if(null===r)n=null;else{var o=r.tag;if(13===o){if(null!==(n=et(r)))return n;n=null}else if(3===o){if(r.stateNode.hydrate)return 3===r.tag?r.stateNode.containerInfo:null;n=null}else r!==n&&(n=null)}}e=dt(e,i,n,t);try{U(ht,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var i=0===n.indexOf("--"),r=tn(n,t[n],i);"float"===n&&(n="cssFloat"),i?e.setProperty(n,r):e[n]=r}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ae;function sn(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var i=0;i<t.length;i++)pt(t[i],e,n)}function un(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,i=fn(e);for(e=0;i;){if(3===i.nodeType){if(n=e+i.textContent.length,e<=t&&n>=t)return{node:i,offset:t-e};e=n}e:{for(;i;){if(i.nextSibling){i=i.nextSibling;break e}i=i.parentNode}i=void 0}i=fn(i)}}function hn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function pn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,gn=null;function vn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var _n="function"==typeof setTimeout?setTimeout:void 0,bn="function"==typeof clearTimeout?clearTimeout:void 0;function wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function kn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),Tn="__reactInternalInstance$"+En,Sn="__reactEventHandlers$"+En,xn="__reactContainere$"+En;function Cn(e){var t=e[Tn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[xn]||n[Tn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kn(e);null!==e;){if(n=e[Tn])return n;e=kn(e)}return t}n=(e=n).parentNode}return null}function Pn(e){return!(e=e[Tn]||e[xn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Rn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Dn(e){return e[Sn]||null}function On(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function In(e,t){var n=e.stateNode;if(!n)return null;var i=p(n);if(!i)return null;n=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!i;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Nn(e,t,n){(t=In(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=it(n._dispatchListeners,t),n._dispatchInstances=it(n._dispatchInstances,e))}function An(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=On(t);for(t=n.length;0<t--;)Nn(n[t],"captured",e);for(t=0;t<n.length;t++)Nn(n[t],"bubbled",e)}}function Mn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=In(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=it(n._dispatchListeners,t),n._dispatchInstances=it(n._dispatchInstances,e))}function zn(e){e&&e.dispatchConfig.registrationName&&Mn(e._targetInst,null,e)}function Ln(e){rt(e,An)}var Fn=null,jn=null,Hn=null;function Un(){if(Hn)return Hn;var e,t,n=jn,i=n.length,r="value"in Fn?Fn.value:Fn.textContent,o=r.length;for(e=0;e<i&&n[e]===r[e];e++);var a=i-e;for(t=1;t<=a&&n[i-t]===r[o-t];t++);return Hn=r.slice(e,1<t?1-t:void 0)}function Wn(){return!0}function Bn(){return!1}function Vn(e,t,n,i){for(var r in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(r)&&((t=e[r])?this[r]=t(n):"target"===r?this.target=i:this[r]=n[r]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Wn:Bn,this.isPropagationStopped=Bn,this}function Yn(e,t,n,i){if(this.eventPool.length){var r=this.eventPool.pop();return this.call(r,e,t,n,i),r}return new this(e,t,n,i)}function Gn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function qn(e){e.eventPool=[],e.getPooled=Yn,e.release=Gn}r(Vn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wn)},persist:function(){this.isPersistent=Wn},isPersistent:Bn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Bn,this._dispatchInstances=this._dispatchListeners=null}}),Vn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Vn.extend=function(e){function t(){}function n(){return i.apply(this,arguments)}var i=this;t.prototype=i.prototype;var o=new t;return r(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=r({},i.Interface,e),n.extend=i.extend,qn(n),n},qn(Vn);var Xn=Vn.extend({data:null}),Qn=Vn.extend({data:null}),$n=[9,13,27,32],Kn=C&&"CompositionEvent"in window,Jn=null;C&&"documentMode"in document&&(Jn=document.documentMode);var Zn=C&&"TextEvent"in window&&!Jn,ei=C&&(!Kn||Jn&&8<Jn&&11>=Jn),ti=String.fromCharCode(32),ni={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},ii=!1;function ri(e,t){switch(e){case"keyup":return-1!==$n.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function oi(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ai=!1;var li={eventTypes:ni,extractEvents:function(e,t,n,i){var r;if(Kn)e:{switch(e){case"compositionstart":var o=ni.compositionStart;break e;case"compositionend":o=ni.compositionEnd;break e;case"compositionupdate":o=ni.compositionUpdate;break e}o=void 0}else ai?ri(e,n)&&(o=ni.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=ni.compositionStart);return o?(ei&&"ko"!==n.locale&&(ai||o!==ni.compositionStart?o===ni.compositionEnd&&ai&&(r=Un()):(jn="value"in(Fn=i)?Fn.value:Fn.textContent,ai=!0)),o=Xn.getPooled(o,t,n,i),r?o.data=r:null!==(r=oi(n))&&(o.data=r),Ln(o),r=o):r=null,(e=Zn?function(e,t){switch(e){case"compositionend":return oi(t);case"keypress":return 32!==t.which?null:(ii=!0,ti);case"textInput":return(e=t.data)===ti&&ii?null:e;default:return null}}(e,n):function(e,t){if(ai)return"compositionend"===e||!Kn&&ri(e,t)?(e=Un(),Hn=jn=Fn=null,ai=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ei&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Qn.getPooled(ni.beforeInput,t,n,i)).data=e,Ln(t)):t=null,null===r?t:null===t?r:[r,t]}},si={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ui(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!si[e.type]:"textarea"===t}var ci={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fi(e,t,n){return(e=Vn.getPooled(ci.change,e,t,n)).type="change",I(n),Ln(e),e}var di=null,hi=null;function pi(e){lt(e)}function mi(e){if(we(Rn(e)))return e}function gi(e,t){if("change"===e)return t}var vi=!1;function yi(){di&&(di.detachEvent("onpropertychange",_i),hi=di=null)}function _i(e){if("value"===e.propertyName&&mi(hi))if(e=fi(hi,e,st(e)),F)lt(e);else{F=!0;try{A(pi,e)}finally{F=!1,H()}}}function bi(e,t,n){"focus"===e?(yi(),hi=n,(di=t).attachEvent("onpropertychange",_i)):"blur"===e&&yi()}function wi(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mi(hi)}function ki(e,t){if("click"===e)return mi(t)}function Ei(e,t){if("input"===e||"change"===e)return mi(t)}C&&(vi=ut("input")&&(!document.documentMode||9<document.documentMode));var Ti={eventTypes:ci,_isInputEventSupported:vi,extractEvents:function(e,t,n,i){var r=t?Rn(t):window,o=r.nodeName&&r.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===r.type)var a=gi;else if(ui(r))if(vi)a=Ei;else{a=wi;var l=bi}else(o=r.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===r.type||"radio"===r.type)&&(a=ki);if(a&&(a=a(e,t)))return fi(a,n,i);l&&l(e,r,t),"blur"===e&&(e=r._wrapperState)&&e.controlled&&"number"===r.type&&Ce(r,"number",r.value)}},Si=Vn.extend({view:null,detail:null}),xi={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ci(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xi[e])&&!!t[e]}function Pi(){return Ci}var Ri=0,Di=0,Oi=!1,Ii=!1,Ni=Si.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Pi,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ri;return Ri=e.screenX,Oi?"mousemove"===e.type?e.screenX-t:0:(Oi=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Di;return Di=e.screenY,Ii?"mousemove"===e.type?e.screenY-t:0:(Ii=!0,0)}}),Ai=Ni.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Mi={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},zi={eventTypes:Mi,extractEvents:function(e,t,n,i,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&r)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;(o=i.window===i?i:(o=i.ownerDocument)?o.defaultView||o.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Cn(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var l=Ni,s=Mi.mouseLeave,u=Mi.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Ai,s=Mi.pointerLeave,u=Mi.pointerEnter,c="pointer");if(e=null==a?o:Rn(a),o=null==t?o:Rn(t),(s=l.getPooled(s,a,n,i)).type=c+"leave",s.target=e,s.relatedTarget=o,(n=l.getPooled(u,t,n,i)).type=c+"enter",n.target=o,n.relatedTarget=e,c=t,(i=a)&&c)e:{for(u=c,a=0,e=l=i;e;e=On(e))a++;for(e=0,t=u;t;t=On(t))e++;for(;0<a-e;)l=On(l),a--;for(;0<e-a;)u=On(u),e--;for(;a--;){if(l===u||l===u.alternate)break e;l=On(l),u=On(u)}l=null}else l=null;for(u=l,l=[];i&&i!==u&&(null===(a=i.alternate)||a!==u);)l.push(i),i=On(i);for(i=[];c&&c!==u&&(null===(a=c.alternate)||a!==u);)i.push(c),c=On(c);for(c=0;c<l.length;c++)Mn(l[c],"bubbled",s);for(c=i.length;0<c--;)Mn(i[c],"captured",n);return 0==(64&r)?[s]:[s,n]}};var Li="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Fi=Object.prototype.hasOwnProperty;function ji(e,t){if(Li(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++)if(!Fi.call(t,n[i])||!Li(e[n[i]],t[n[i]]))return!1;return!0}var Hi=C&&"documentMode"in document&&11>=document.documentMode,Ui={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wi=null,Bi=null,Vi=null,Yi=!1;function Gi(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Yi||null==Wi||Wi!==cn(n)?null:("selectionStart"in(n=Wi)&&pn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vi&&ji(Vi,n)?null:(Vi=n,(e=Vn.getPooled(Ui.select,Bi,e,t)).type="select",e.target=Wi,Ln(e),e))}var qi={eventTypes:Ui,extractEvents:function(e,t,n,i,r,o){if(!(o=!(r=o||(i.window===i?i.document:9===i.nodeType?i:i.ownerDocument)))){e:{r=Je(r),o=S.onSelect;for(var a=0;a<o.length;a++)if(!r.has(o[a])){r=!1;break e}r=!0}o=!r}if(o)return null;switch(r=t?Rn(t):window,e){case"focus":(ui(r)||"true"===r.contentEditable)&&(Wi=r,Bi=t,Vi=null);break;case"blur":Vi=Bi=Wi=null;break;case"mousedown":Yi=!0;break;case"contextmenu":case"mouseup":case"dragend":return Yi=!1,Gi(n,i);case"selectionchange":if(Hi)break;case"keydown":case"keyup":return Gi(n,i)}return null}},Xi=Vn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Qi=Vn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),$i=Si.extend({relatedTarget:null});function Ki(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Ji={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zi={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},er=Si.extend({key:function(e){if(e.key){var t=Ji[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ki(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zi[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Pi,charCode:function(e){return"keypress"===e.type?Ki(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ki(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),tr=Ni.extend({dataTransfer:null}),nr=Si.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Pi}),ir=Vn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),rr=Ni.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),or={eventTypes:Lt,extractEvents:function(e,t,n,i){var r=Ft.get(e);if(!r)return null;switch(e){case"keypress":if(0===Ki(n))return null;case"keydown":case"keyup":e=er;break;case"blur":case"focus":e=$i;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Ni;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=tr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=nr;break;case Ge:case qe:case Xe:e=Xi;break;case Qe:e=ir;break;case"scroll":e=Si;break;case"wheel":e=rr;break;case"copy":case"cut":case"paste":e=Qi;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ai;break;default:e=Vn}return Ln(t=e.getPooled(r,t,n,i)),t}};if(y)throw Error(a(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),b(),p=Dn,m=Pn,g=Rn,x({SimpleEventPlugin:or,EnterLeaveEventPlugin:zi,ChangeEventPlugin:Ti,SelectEventPlugin:qi,BeforeInputEventPlugin:li});var ar=[],lr=-1;function sr(e){0>lr||(e.current=ar[lr],ar[lr]=null,lr--)}function ur(e,t){lr++,ar[lr]=e.current,e.current=t}var cr={},fr={current:cr},dr={current:!1},hr=cr;function pr(e,t){var n=e.type.contextTypes;if(!n)return cr;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var r,o={};for(r in n)o[r]=t[r];return i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function mr(e){return null!=(e=e.childContextTypes)}function gr(){sr(dr),sr(fr)}function vr(e,t,n){if(fr.current!==cr)throw Error(a(168));ur(fr,t),ur(dr,n)}function yr(e,t,n){var i=e.stateNode;if(e=t.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var o in i=i.getChildContext())if(!(o in e))throw Error(a(108,ge(t)||"Unknown",o));return r({},n,{},i)}function _r(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||cr,hr=fr.current,ur(fr,e),ur(dr,dr.current),!0}function br(e,t,n){var i=e.stateNode;if(!i)throw Error(a(169));n?(e=yr(e,t,hr),i.__reactInternalMemoizedMergedChildContext=e,sr(dr),sr(fr),ur(fr,e)):sr(dr),ur(dr,n)}var wr=o.unstable_runWithPriority,kr=o.unstable_scheduleCallback,Er=o.unstable_cancelCallback,Tr=o.unstable_requestPaint,Sr=o.unstable_now,xr=o.unstable_getCurrentPriorityLevel,Cr=o.unstable_ImmediatePriority,Pr=o.unstable_UserBlockingPriority,Rr=o.unstable_NormalPriority,Dr=o.unstable_LowPriority,Or=o.unstable_IdlePriority,Ir={},Nr=o.unstable_shouldYield,Ar=void 0!==Tr?Tr:function(){},Mr=null,zr=null,Lr=!1,Fr=Sr(),jr=1e4>Fr?Sr:function(){return Sr()-Fr};function Hr(){switch(xr()){case Cr:return 99;case Pr:return 98;case Rr:return 97;case Dr:return 96;case Or:return 95;default:throw Error(a(332))}}function Ur(e){switch(e){case 99:return Cr;case 98:return Pr;case 97:return Rr;case 96:return Dr;case 95:return Or;default:throw Error(a(332))}}function Wr(e,t){return e=Ur(e),wr(e,t)}function Br(e,t,n){return e=Ur(e),kr(e,t,n)}function Vr(e){return null===Mr?(Mr=[e],zr=kr(Cr,Gr)):Mr.push(e),Ir}function Yr(){if(null!==zr){var e=zr;zr=null,Er(e)}Gr()}function Gr(){if(!Lr&&null!==Mr){Lr=!0;var e=0;try{var t=Mr;Wr(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Mr=null}catch(t){throw null!==Mr&&(Mr=Mr.slice(e+1)),kr(Cr,Yr),t}finally{Lr=!1}}}function qr(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Xr(e,t){if(e&&e.defaultProps)for(var n in t=r({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Qr={current:null},$r=null,Kr=null,Jr=null;function Zr(){Jr=Kr=$r=null}function eo(e){var t=Qr.current;sr(Qr),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){$r=e,Jr=Kr=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Da=!0),e.firstContext=null)}function io(e,t){if(Jr!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jr=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Kr){if(null===$r)throw Error(a(308));Kr=t,$r.dependencies={expirationTime:0,firstContext:t,responders:null}}else Kr=Kr.next=t;return e._currentValue}var ro=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ao(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function lo(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function so(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function uo(e,t){var n=e.alternate;null!==n&&ao(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function co(e,t,n,i){var o=e.updateQueue;ro=!1;var a=o.baseQueue,l=o.shared.pending;if(null!==l){if(null!==a){var s=a.next;a.next=l.next,l.next=s}a=l,o.shared.pending=null,null!==(s=e.alternate)&&(null!==(s=s.updateQueue)&&(s.baseQueue=l))}if(null!==a){s=a.next;var u=o.baseState,c=0,f=null,d=null,h=null;if(null!==s)for(var p=s;;){if((l=p.expirationTime)<i){var m={expirationTime:p.expirationTime,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null};null===h?(d=h=m,f=u):h=h.next=m,l>c&&(c=l)}else{null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null}),os(l,p.suspenseConfig);e:{var g=e,v=p;switch(l=t,m=n,v.tag){case 1:if("function"==typeof(g=v.payload)){u=g.call(m,u,l);break e}u=g;break e;case 3:g.effectTag=-4097&g.effectTag|64;case 0:if(null==(l="function"==typeof(g=v.payload)?g.call(m,u,l):g))break e;u=r({},u,l);break e;case 2:ro=!0}}null!==p.callback&&(e.effectTag|=32,null===(l=o.effects)?o.effects=[p]:l.push(p))}if(null===(p=p.next)||p===s){if(null===(l=o.shared.pending))break;p=a.next=l.next,l.next=s,o.baseQueue=a=l,o.shared.pending=null}}null===h?f=u:h.next=d,o.baseState=f,o.baseQueue=h,as(c),e.expirationTime=c,e.memoizedState=u}}function fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var i=e[t],r=i.callback;if(null!==r){if(i.callback=null,i=r,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var ho=$.ReactCurrentBatchConfig,po=(new i.Component).refs;function mo(e,t,n,i){n=null==(n=n(i,t=e.memoizedState))?t:r({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var go={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var i=Gl(),r=ho.suspense;(r=lo(i=ql(i,e,r),r)).payload=t,null!=n&&(r.callback=n),so(e,r),Xl(e,i)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var i=Gl(),r=ho.suspense;(r=lo(i=ql(i,e,r),r)).tag=1,r.payload=t,null!=n&&(r.callback=n),so(e,r),Xl(e,i)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Gl(),i=ho.suspense;(i=lo(n=ql(n,e,i),i)).tag=2,null!=t&&(i.callback=t),so(e,i),Xl(e,n)}};function vo(e,t,n,i,r,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(i,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!ji(n,i)||!ji(r,o))}function yo(e,t,n){var i=!1,r=cr,o=t.contextType;return"object"==typeof o&&null!==o?o=io(o):(r=mr(t)?hr:fr.current,o=(i=null!=(i=t.contextTypes))?pr(e,r):cr),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=go,e.stateNode=t,t._reactInternalFiber=e,i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=o),t}function _o(e,t,n,i){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,i),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,i),t.state!==e&&go.enqueueReplaceState(t,t.state,null)}function bo(e,t,n,i){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=po,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?r.context=io(o):(o=mr(t)?hr:fr.current,r.context=pr(e,o)),co(e,n,r,i),r.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(mo(e,t,o,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&go.enqueueReplaceState(r,r.state,null),co(e,n,r,i),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var wo=Array.isArray;function ko(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var i=n.stateNode}if(!i)throw Error(a(147,e));var r=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===r?t.ref:((t=function(e){var t=i.refs;t===po&&(t=i.refs={}),null===e?delete t[r]:t[r]=e})._stringRef=r,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Eo(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function To(e){function t(t,n){if(e){var i=t.lastEffect;null!==i?(i.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,i){if(!e)return null;for(;null!==i;)t(n,i),i=i.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=xs(e,t)).index=0,e.sibling=null,e}function o(t,n,i){return t.index=i,e?null!==(i=t.alternate)?(i=i.index)<n?(t.effectTag=2,n):i:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,i){return null===t||6!==t.tag?((t=Rs(n,e.mode,i)).return=e,t):((t=r(t,n)).return=e,t)}function u(e,t,n,i){return null!==t&&t.elementType===n.type?((i=r(t,n.props)).ref=ko(e,t,n),i.return=e,i):((i=Cs(n.type,n.key,n.props,null,e.mode,i)).ref=ko(e,t,n),i.return=e,i)}function c(e,t,n,i){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ds(n,e.mode,i)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function f(e,t,n,i,o){return null===t||7!==t.tag?((t=Ps(n,e.mode,i,o)).return=e,t):((t=r(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Rs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Cs(t.type,t.key,t.props,null,e.mode,n)).ref=ko(e,null,t),n.return=e,n;case te:return(t=Ds(t,e.mode,n)).return=e,t}if(wo(t)||me(t))return(t=Ps(t,e.mode,n,null)).return=e,t;Eo(e,t)}return null}function h(e,t,n,i){var r=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:s(e,t,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===r?n.type===ne?f(e,t,n.props.children,i,r):u(e,t,n,i):null;case te:return n.key===r?c(e,t,n,i):null}if(wo(n)||me(n))return null!==r?null:f(e,t,n,i,null);Eo(e,n)}return null}function p(e,t,n,i,r){if("string"==typeof i||"number"==typeof i)return s(t,e=e.get(n)||null,""+i,r);if("object"==typeof i&&null!==i){switch(i.$$typeof){case ee:return e=e.get(null===i.key?n:i.key)||null,i.type===ne?f(t,e,i.props.children,r,i.key):u(t,e,i,r);case te:return c(t,e=e.get(null===i.key?n:i.key)||null,i,r)}if(wo(i)||me(i))return f(t,e=e.get(n)||null,i,r,null);Eo(t,i)}return null}function m(r,a,l,s){for(var u=null,c=null,f=a,m=a=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=h(r,f,l[m],s);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(r,f),a=o(v,a,m),null===c?u=v:c.sibling=v,c=v,f=g}if(m===l.length)return n(r,f),u;if(null===f){for(;m<l.length;m++)null!==(f=d(r,l[m],s))&&(a=o(f,a,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=i(r,f);m<l.length;m++)null!==(g=p(f,r,m,l[m],s))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=o(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(r,e)})),u}function g(r,l,s,u){var c=me(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var f=c=null,m=l,g=l=0,v=null,y=s.next();null!==m&&!y.done;g++,y=s.next()){m.index>g?(v=m,m=null):v=m.sibling;var _=h(r,m,y.value,u);if(null===_){null===m&&(m=v);break}e&&m&&null===_.alternate&&t(r,m),l=o(_,l,g),null===f?c=_:f.sibling=_,f=_,m=v}if(y.done)return n(r,m),c;if(null===m){for(;!y.done;g++,y=s.next())null!==(y=d(r,y.value,u))&&(l=o(y,l,g),null===f?c=y:f.sibling=y,f=y);return c}for(m=i(r,m);!y.done;g++,y=s.next())null!==(y=p(m,r,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=o(y,l,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(r,e)})),c}return function(e,i,o,s){var u="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case ee:e:{for(c=o.key,u=i;null!==u;){if(u.key===c){switch(u.tag){case 7:if(o.type===ne){n(e,u.sibling),(i=r(u,o.props.children)).return=e,e=i;break e}break;default:if(u.elementType===o.type){n(e,u.sibling),(i=r(u,o.props)).ref=ko(e,u,o),i.return=e,e=i;break e}}n(e,u);break}t(e,u),u=u.sibling}o.type===ne?((i=Ps(o.props.children,e.mode,s,o.key)).return=e,e=i):((s=Cs(o.type,o.key,o.props,null,e.mode,s)).ref=ko(e,i,o),s.return=e,e=s)}return l(e);case te:e:{for(u=o.key;null!==i;){if(i.key===u){if(4===i.tag&&i.stateNode.containerInfo===o.containerInfo&&i.stateNode.implementation===o.implementation){n(e,i.sibling),(i=r(i,o.children||[])).return=e,e=i;break e}n(e,i);break}t(e,i),i=i.sibling}(i=Ds(o,e.mode,s)).return=e,e=i}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==i&&6===i.tag?(n(e,i.sibling),(i=r(i,o)).return=e,e=i):(n(e,i),(i=Rs(o,e.mode,s)).return=e,e=i),l(e);if(wo(o))return m(e,i,o,s);if(me(o))return g(e,i,o,s);if(c&&Eo(e,o),void 0===o&&!u)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,i)}}var So=To(!0),xo=To(!1),Co={},Po={current:Co},Ro={current:Co},Do={current:Co};function Oo(e){if(e===Co)throw Error(a(174));return e}function Io(e,t){switch(ur(Do,t),ur(Ro,e),ur(Po,Co),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Le(null,"");break;default:t=Le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}sr(Po),ur(Po,t)}function No(){sr(Po),sr(Ro),sr(Do)}function Ao(e){Oo(Do.current);var t=Oo(Po.current),n=Le(t,e.type);t!==n&&(ur(Ro,e),ur(Po,n))}function Mo(e){Ro.current===e&&(sr(Po),sr(Ro))}var zo={current:0};function Lo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Fo(e,t){return{responder:e,props:t}}var jo=$.ReactCurrentDispatcher,Ho=$.ReactCurrentBatchConfig,Uo=0,Wo=null,Bo=null,Vo=null,Yo=!1;function Go(){throw Error(a(321))}function qo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Li(e[n],t[n]))return!1;return!0}function Xo(e,t,n,i,r,o){if(Uo=o,Wo=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,jo.current=null===e||null===e.memoizedState?va:ya,e=n(i,r),t.expirationTime===Uo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(a(301));o+=1,Vo=Bo=null,t.updateQueue=null,jo.current=_a,e=n(i,r)}while(t.expirationTime===Uo)}if(jo.current=ga,t=null!==Bo&&null!==Bo.next,Uo=0,Vo=Bo=Wo=null,Yo=!1,t)throw Error(a(300));return e}function Qo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Vo?Wo.memoizedState=Vo=e:Vo=Vo.next=e,Vo}function $o(){if(null===Bo){var e=Wo.alternate;e=null!==e?e.memoizedState:null}else e=Bo.next;var t=null===Vo?Wo.memoizedState:Vo.next;if(null!==t)Vo=t,Bo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Bo=e).memoizedState,baseState:Bo.baseState,baseQueue:Bo.baseQueue,queue:Bo.queue,next:null},null===Vo?Wo.memoizedState=Vo=e:Vo=Vo.next=e}return Vo}function Ko(e,t){return"function"==typeof t?t(e):t}function Jo(e){var t=$o(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var i=Bo,r=i.baseQueue,o=n.pending;if(null!==o){if(null!==r){var l=r.next;r.next=o.next,o.next=l}i.baseQueue=r=o,n.pending=null}if(null!==r){r=r.next,i=i.baseState;var s=l=o=null,u=r;do{var c=u.expirationTime;if(c<Uo){var f={expirationTime:u.expirationTime,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=f,o=i):s=s.next=f,c>Wo.expirationTime&&(Wo.expirationTime=c,as(c))}else null!==s&&(s=s.next={expirationTime:1073741823,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),os(c,u.suspenseConfig),i=u.eagerReducer===e?u.eagerState:e(i,u.action);u=u.next}while(null!==u&&u!==r);null===s?o=i:s.next=l,Li(i,t.memoizedState)||(Da=!0),t.memoizedState=i,t.baseState=o,t.baseQueue=s,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function Zo(e){var t=$o(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var i=n.dispatch,r=n.pending,o=t.memoizedState;if(null!==r){n.pending=null;var l=r=r.next;do{o=e(o,l.action),l=l.next}while(l!==r);Li(o,t.memoizedState)||(Da=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,i]}function ea(e){var t=Qo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ko,lastRenderedState:e}).dispatch=ma.bind(null,Wo,e),[t.memoizedState,e]}function ta(e,t,n,i){return e={tag:e,create:t,destroy:n,deps:i,next:null},null===(t=Wo.updateQueue)?(t={lastEffect:null},Wo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(i=n.next,n.next=e,e.next=i,t.lastEffect=e),e}function na(){return $o().memoizedState}function ia(e,t,n,i){var r=Qo();Wo.effectTag|=e,r.memoizedState=ta(1|t,n,void 0,void 0===i?null:i)}function ra(e,t,n,i){var r=$o();i=void 0===i?null:i;var o=void 0;if(null!==Bo){var a=Bo.memoizedState;if(o=a.destroy,null!==i&&qo(i,a.deps))return void ta(t,n,o,i)}Wo.effectTag|=e,r.memoizedState=ta(1|t,n,o,i)}function oa(e,t){return ia(516,4,e,t)}function aa(e,t){return ra(516,4,e,t)}function la(e,t){return ra(4,2,e,t)}function sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ua(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,sa.bind(null,t,e),n)}function ca(){}function fa(e,t){return Qo().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=$o();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&qo(t,i[1])?i[0]:(n.memoizedState=[e,t],e)}function ha(e,t){var n=$o();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&qo(t,i[1])?i[0]:(e=e(),n.memoizedState=[e,t],e)}function pa(e,t,n){var i=Hr();Wr(98>i?98:i,(function(){e(!0)})),Wr(97<i?97:i,(function(){var i=Ho.suspense;Ho.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ho.suspense=i}}))}function ma(e,t,n){var i=Gl(),r=ho.suspense;r={expirationTime:i=ql(i,e,r),suspenseConfig:r,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?r.next=r:(r.next=o.next,o.next=r),t.pending=r,o=e.alternate,e===Wo||null!==o&&o===Wo)Yo=!0,r.expirationTime=Uo,Wo.expirationTime=Uo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=o(a,n);if(r.eagerReducer=o,r.eagerState=l,Li(l,a))return}catch(e){}Xl(e,i)}}var ga={readContext:io,useCallback:Go,useContext:Go,useEffect:Go,useImperativeHandle:Go,useLayoutEffect:Go,useMemo:Go,useReducer:Go,useRef:Go,useState:Go,useDebugValue:Go,useResponder:Go,useDeferredValue:Go,useTransition:Go},va={readContext:io,useCallback:fa,useContext:io,useEffect:oa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ia(4,2,sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ia(4,2,e,t)},useMemo:function(e,t){var n=Qo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var i=Qo();return t=void 0!==n?n(t):t,i.memoizedState=i.baseState=t,e=(e=i.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ma.bind(null,Wo,e),[i.memoizedState,e]},useRef:function(e){return e={current:e},Qo().memoizedState=e},useState:ea,useDebugValue:ca,useResponder:Fo,useDeferredValue:function(e,t){var n=ea(e),i=n[0],r=n[1];return oa((function(){var n=Ho.suspense;Ho.suspense=void 0===t?null:t;try{r(e)}finally{Ho.suspense=n}}),[e,t]),i},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(pa.bind(null,t,e),[t,e]),n]}},ya={readContext:io,useCallback:da,useContext:io,useEffect:aa,useImperativeHandle:ua,useLayoutEffect:la,useMemo:ha,useReducer:Jo,useRef:na,useState:function(){return Jo(Ko)},useDebugValue:ca,useResponder:Fo,useDeferredValue:function(e,t){var n=Jo(Ko),i=n[0],r=n[1];return aa((function(){var n=Ho.suspense;Ho.suspense=void 0===t?null:t;try{r(e)}finally{Ho.suspense=n}}),[e,t]),i},useTransition:function(e){var t=Jo(Ko),n=t[0];return t=t[1],[da(pa.bind(null,t,e),[t,e]),n]}},_a={readContext:io,useCallback:da,useContext:io,useEffect:aa,useImperativeHandle:ua,useLayoutEffect:la,useMemo:ha,useReducer:Zo,useRef:na,useState:function(){return Zo(Ko)},useDebugValue:ca,useResponder:Fo,useDeferredValue:function(e,t){var n=Zo(Ko),i=n[0],r=n[1];return aa((function(){var n=Ho.suspense;Ho.suspense=void 0===t?null:t;try{r(e)}finally{Ho.suspense=n}}),[e,t]),i},useTransition:function(e){var t=Zo(Ko),n=t[0];return t=t[1],[da(pa.bind(null,t,e),[t,e]),n]}},ba=null,wa=null,ka=!1;function Ea(e,t){var n=Ts(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ta(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Sa(e){if(ka){var t=wa;if(t){var n=t;if(!Ta(e,t)){if(!(t=wn(n.nextSibling))||!Ta(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(ba=e);Ea(ba,n)}ba=e,wa=wn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,ba=e}}function xa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ba=e}function Ca(e){if(e!==ba)return!1;if(!ka)return xa(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yn(t,e.memoizedProps))for(t=wa;t;)Ea(e,t),t=wn(t.nextSibling);if(xa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){wa=wn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}wa=null}}else wa=ba?wn(e.stateNode.nextSibling):null;return!0}function Pa(){wa=ba=null,ka=!1}var Ra=$.ReactCurrentOwner,Da=!1;function Oa(e,t,n,i){t.child=null===e?xo(t,null,n,i):So(t,e.child,n,i)}function Ia(e,t,n,i,r){n=n.render;var o=t.ref;return no(t,r),i=Xo(e,t,n,i,o,r),null===e||Da?(t.effectTag|=1,Oa(e,t,i,r),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=r&&(e.expirationTime=0),Xa(e,t,r))}function Na(e,t,n,i,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ss(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Cs(n.type,null,i,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Aa(e,t,a,i,r,o))}return a=e.child,r<o&&(r=a.memoizedProps,(n=null!==(n=n.compare)?n:ji)(r,i)&&e.ref===t.ref)?Xa(e,t,o):(t.effectTag|=1,(e=xs(a,i)).ref=t.ref,e.return=t,t.child=e)}function Aa(e,t,n,i,r,o){return null!==e&&ji(e.memoizedProps,i)&&e.ref===t.ref&&(Da=!1,r<o)?(t.expirationTime=e.expirationTime,Xa(e,t,o)):za(e,t,n,i,o)}function Ma(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function za(e,t,n,i,r){var o=mr(n)?hr:fr.current;return o=pr(t,o),no(t,r),n=Xo(e,t,n,i,o,r),null===e||Da?(t.effectTag|=1,Oa(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=r&&(e.expirationTime=0),Xa(e,t,r))}function La(e,t,n,i,r){if(mr(n)){var o=!0;_r(t)}else o=!1;if(no(t,r),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yo(t,n,i),bo(t,n,i,r),i=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=io(u):u=pr(t,u=mr(n)?hr:fr.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==i||s!==u)&&_o(t,a,i,u),ro=!1;var d=t.memoizedState;a.state=d,co(t,i,a,r),s=t.memoizedState,l!==i||d!==s||dr.current||ro?("function"==typeof c&&(mo(t,n,c,i),s=t.memoizedState),(l=ro||vo(t,n,l,i,d,s,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=i,t.memoizedState=s),a.props=i,a.state=s,a.context=u,i=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),i=!1)}else a=t.stateNode,ao(e,t),l=t.memoizedProps,a.props=t.type===t.elementType?l:Xr(t.type,l),s=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=io(u):u=pr(t,u=mr(n)?hr:fr.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==i||s!==u)&&_o(t,a,i,u),ro=!1,s=t.memoizedState,a.state=s,co(t,i,a,r),d=t.memoizedState,l!==i||s!==d||dr.current||ro?("function"==typeof c&&(mo(t,n,c,i),d=t.memoizedState),(c=ro||vo(t,n,l,i,s,d,u))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(i,d,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(i,d,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=i,t.memoizedState=d),a.props=i,a.state=d,a.context=u,i=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),i=!1);return Fa(e,t,n,i,o,r)}function Fa(e,t,n,i,r,o){Ma(e,t);var a=0!=(64&t.effectTag);if(!i&&!a)return r&&br(t,n,!1),Xa(e,t,o);i=t.stateNode,Ra.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return t.effectTag|=1,null!==e&&a?(t.child=So(t,e.child,null,o),t.child=So(t,null,l,o)):Oa(e,t,l,o),t.memoizedState=i.state,r&&br(t,n,!0),t.child}function ja(e){var t=e.stateNode;t.pendingContext?vr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vr(0,t.context,!1),Io(e,t.containerInfo)}var Ha,Ua,Wa,Ba={dehydrated:null,retryTime:0};function Va(e,t,n){var i,r=t.mode,o=t.pendingProps,a=zo.current,l=!1;if((i=0!=(64&t.effectTag))||(i=0!=(2&a)&&(null===e||null!==e.memoizedState)),i?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),ur(zo,1&a),null===e){if(void 0!==o.fallback&&Sa(t),l){if(l=o.fallback,(o=Ps(null,r,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Ps(l,r,n,null)).return=t,o.sibling=n,t.memoizedState=Ba,t.child=o,n}return r=o.children,t.memoizedState=null,t.child=xo(t,null,r,n)}if(null!==e.memoizedState){if(r=(e=e.child).sibling,l){if(o=o.fallback,(n=xs(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(r=xs(r,o)).return=t,n.sibling=r,n.childExpirationTime=0,t.memoizedState=Ba,t.child=n,r}return n=So(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=o.fallback,(o=Ps(null,r,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Ps(l,r,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Ba,t.child=o,n}return t.memoizedState=null,t.child=So(t,e,o.children,n)}function Ya(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function Ga(e,t,n,i,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:i,tail:n,tailExpiration:0,tailMode:r,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=i,a.tail=n,a.tailExpiration=0,a.tailMode=r,a.lastEffect=o)}function qa(e,t,n){var i=t.pendingProps,r=i.revealOrder,o=i.tail;if(Oa(e,t,i.children,n),0!=(2&(i=zo.current)))i=1&i|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ya(e,n);else if(19===e.tag)Ya(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}i&=1}if(ur(zo,i),0==(2&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===Lo(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),Ga(t,!1,r,n,o,t.lastEffect);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===Lo(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}Ga(t,!0,n,null,o,t.lastEffect);break;case"together":Ga(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Xa(e,t,n){null!==e&&(t.dependencies=e.dependencies);var i=t.expirationTime;if(0!==i&&as(i),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=xs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=xs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var i=null;null!==n;)null!==n.alternate&&(i=n),n=n.sibling;null===i?t||null===e.tail?e.tail=null:e.tail.sibling=null:i.sibling=null}}function $a(e,t,n){var i=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return mr(t.type)&&gr(),null;case 3:return No(),sr(dr),sr(fr),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Ca(t)||(t.effectTag|=4),null;case 5:Mo(t),n=Oo(Do.current);var o=t.type;if(null!==e&&null!=t.stateNode)Ua(e,t,o,i,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!i){if(null===t.stateNode)throw Error(a(166));return null}if(e=Oo(Po.current),Ca(t)){i=t.stateNode,o=t.type;var l=t.memoizedProps;switch(i[Tn]=t,i[Sn]=l,o){case"iframe":case"object":case"embed":qt("load",i);break;case"video":case"audio":for(e=0;e<$e.length;e++)qt($e[e],i);break;case"source":qt("error",i);break;case"img":case"image":case"link":qt("error",i),qt("load",i);break;case"form":qt("reset",i),qt("submit",i);break;case"details":qt("toggle",i);break;case"input":Ee(i,l),qt("invalid",i),sn(n,"onChange");break;case"select":i._wrapperState={wasMultiple:!!l.multiple},qt("invalid",i),sn(n,"onChange");break;case"textarea":Oe(i,l),qt("invalid",i),sn(n,"onChange")}for(var s in on(o,l),e=null,l)if(l.hasOwnProperty(s)){var u=l[s];"children"===s?"string"==typeof u?i.textContent!==u&&(e=["children",u]):"number"==typeof u&&i.textContent!==""+u&&(e=["children",""+u]):T.hasOwnProperty(s)&&null!=u&&sn(n,s)}switch(o){case"input":be(i),xe(i,l,!0);break;case"textarea":be(i),Ne(i);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(i.onclick=un)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(s=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=ze(o)),e===ln?"script"===o?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof i.is?e=s.createElement(o,{is:i.is}):(e=s.createElement(o),"select"===o&&(s=e,i.multiple?s.multiple=!0:i.size&&(s.size=i.size))):e=s.createElementNS(e,o),e[Tn]=t,e[Sn]=i,Ha(e,t),t.stateNode=e,s=an(o,i),o){case"iframe":case"object":case"embed":qt("load",e),u=i;break;case"video":case"audio":for(u=0;u<$e.length;u++)qt($e[u],e);u=i;break;case"source":qt("error",e),u=i;break;case"img":case"image":case"link":qt("error",e),qt("load",e),u=i;break;case"form":qt("reset",e),qt("submit",e),u=i;break;case"details":qt("toggle",e),u=i;break;case"input":Ee(e,i),u=ke(e,i),qt("invalid",e),sn(n,"onChange");break;case"option":u=Pe(e,i);break;case"select":e._wrapperState={wasMultiple:!!i.multiple},u=r({},i,{value:void 0}),qt("invalid",e),sn(n,"onChange");break;case"textarea":Oe(e,i),u=De(e,i),qt("invalid",e),sn(n,"onChange");break;default:u=i}on(o,u);var c=u;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&je(e,f):"children"===l?"string"==typeof f?("textarea"!==o||""!==f)&&He(e,f):"number"==typeof f&&He(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(T.hasOwnProperty(l)?null!=f&&sn(n,l):null!=f&&K(e,l,f,s))}switch(o){case"input":be(e),xe(e,i,!1);break;case"textarea":be(e),Ne(e);break;case"option":null!=i.value&&e.setAttribute("value",""+ye(i.value));break;case"select":e.multiple=!!i.multiple,null!=(n=i.value)?Re(e,!!i.multiple,n,!1):null!=i.defaultValue&&Re(e,!!i.multiple,i.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=un)}vn(o,i)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Wa(0,t,e.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(a(166));n=Oo(Do.current),Oo(Po.current),Ca(t)?(n=t.stateNode,i=t.memoizedProps,n[Tn]=t,n.nodeValue!==i&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[Tn]=t,t.stateNode=n)}return null;case 13:return sr(zo),i=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==i,i=!1,null===e?void 0!==t.memoizedProps.fallback&&Ca(t):(i=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=o,o.nextEffect=l):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!i&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&zo.current)?Cl===bl&&(Cl=wl):(Cl!==bl&&Cl!==wl||(Cl=kl),0!==Il&&null!==Tl&&(Ns(Tl,xl),As(Tl,Il)))),(n||i)&&(t.effectTag|=4),null);case 4:return No(),null;case 10:return eo(t),null;case 17:return mr(t.type)&&gr(),null;case 19:if(sr(zo),null===(i=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(l=i.rendering)){if(o)Qa(i,!1);else if(Cl!==bl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Lo(l))){for(t.effectTag|=64,Qa(i,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===i.lastEffect&&(t.firstEffect=null),t.lastEffect=i.lastEffect,i=t.child;null!==i;)l=n,(o=i).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=l,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,l=e.dependencies,o.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),i=i.sibling;return ur(zo,1&zo.current|2),t.child}l=l.sibling}}else{if(!o)if(null!==(e=Lo(l))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Qa(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate)return null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null),null}else 2*jr()-i.renderingStartTime>i.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Qa(i,!1),t.expirationTime=t.childExpirationTime=n-1);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=i.last)?n.sibling=l:t.child=l,i.last=l)}return null!==i.tail?(0===i.tailExpiration&&(i.tailExpiration=jr()+500),n=i.tail,i.rendering=n,i.tail=n.sibling,i.lastEffect=t.lastEffect,i.renderingStartTime=jr(),n.sibling=null,t=zo.current,ur(zo,o?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Ka(e){switch(e.tag){case 1:mr(e.type)&&gr();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(No(),sr(dr),sr(fr),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Mo(e),null;case 13:return sr(zo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return sr(zo),null;case 4:return No(),null;case 10:return eo(e),null;default:return null}}function Ja(e,t){return{value:e,source:t,stack:ve(t)}}Ha=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ua=function(e,t,n,i,o){var a=e.memoizedProps;if(a!==i){var l,s,u=t.stateNode;switch(Oo(Po.current),e=null,n){case"input":a=ke(u,a),i=ke(u,i),e=[];break;case"option":a=Pe(u,a),i=Pe(u,i),e=[];break;case"select":a=r({},a,{value:void 0}),i=r({},i,{value:void 0}),e=[];break;case"textarea":a=De(u,a),i=De(u,i),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof i.onClick&&(u.onclick=un)}for(l in on(n,i),n=null,a)if(!i.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(s in u=a[l])u.hasOwnProperty(s)&&(n||(n={}),n[s]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(T.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in i){var c=i[l];if(u=null!=a?a[l]:void 0,i.hasOwnProperty(l)&&c!==u&&(null!=c||null!=u))if("style"===l)if(u){for(s in u)!u.hasOwnProperty(s)||c&&c.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in c)c.hasOwnProperty(s)&&u[s]!==c[s]&&(n||(n={}),n[s]=c[s])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(e=e||[]).push(l,c)):"children"===l?u===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(T.hasOwnProperty(l)?(null!=c&&sn(o,l),e||u===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Wa=function(e,t,n,i){n!==i&&(t.effectTag|=4)};var Za="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,i=t.stack;null===i&&null!==n&&(i=ve(n)),null!==n&&ge(n.type),t=t.value,null!==e&&1===e.tag&&ge(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ys(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,i=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Xr(t.type,n),i),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function il(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var i=n.destroy;n.destroy=void 0,void 0!==i&&i()}n=n.next}while(n!==t)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var i=n.create;n.destroy=i()}n=n.next}while(n!==t)}}function ol(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void rl(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var i=n.elementType===n.type?t.memoizedProps:Xr(n.type,t.memoizedProps);e.componentDidUpdate(i,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&vn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&zt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function al(e,t,n){switch("function"==typeof ks&&ks(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var i=e.next;Wr(97<n?97:n,(function(){var e=i;do{var n=e.destroy;if(void 0!==n){var r=t;try{n()}catch(e){ys(r,e)}}e=e.next}while(e!==i)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){ys(e,t)}}(t,n);break;case 5:tl(t);break;case 4:cl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function sl(e){return 5===e.tag||3===e.tag||4===e.tag}function ul(e){e:{for(var t=e.return;null!==t;){if(sl(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var i=!1;break;case 3:case 4:t=t.containerInfo,i=!0;break;default:throw Error(a(161))}16&n.effectTag&&(He(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||sl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}i?function e(t,n,i){var r=t.tag,o=5===r||6===r;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===i.nodeType?i.parentNode.insertBefore(t,n):i.insertBefore(t,n):(8===i.nodeType?(n=i.parentNode).insertBefore(t,i):(n=i).appendChild(t),null!==(i=i._reactRootContainer)&&void 0!==i||null!==n.onclick||(n.onclick=un));else if(4!==r&&null!==(t=t.child))for(e(t,n,i),t=t.sibling;null!==t;)e(t,n,i),t=t.sibling}(e,n,t):function e(t,n,i){var r=t.tag,o=5===r||6===r;if(o)t=o?t.stateNode:t.stateNode.instance,n?i.insertBefore(t,n):i.appendChild(t);else if(4!==r&&null!==(t=t.child))for(e(t,n,i),t=t.sibling;null!==t;)e(t,n,i),t=t.sibling}(e,n,t)}function cl(e,t,n){for(var i,r,o=t,l=!1;;){if(!l){l=o.return;e:for(;;){if(null===l)throw Error(a(160));switch(i=l.stateNode,l.tag){case 5:r=!1;break e;case 3:case 4:i=i.containerInfo,r=!0;break e}l=l.return}l=!0}if(5===o.tag||6===o.tag){e:for(var s=e,u=o,c=n,f=u;;)if(al(s,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===u)break e;for(;null===f.sibling;){if(null===f.return||f.return===u)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}r?(s=i,u=o.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):i.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){i=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(al(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(l=!1)}o.sibling.return=o.return,o=o.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void il(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var i=t.memoizedProps,r=null!==e?e.memoizedProps:i;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Sn]=i,"input"===e&&"radio"===i.type&&null!=i.name&&Te(n,i),an(e,r),t=an(e,i),r=0;r<o.length;r+=2){var l=o[r],s=o[r+1];"style"===l?nn(n,s):"dangerouslySetInnerHTML"===l?je(n,s):"children"===l?He(n,s):K(n,l,s,t)}switch(e){case"input":Se(n,i);break;case"textarea":Ie(n,i);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!i.multiple,null!=(e=i.value)?Re(n,!!i.multiple,e,!1):t!==!!i.multiple&&(null!=i.defaultValue?Re(n,!!i.multiple,i.defaultValue,!0):Re(n,!!i.multiple,i.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,zt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?i=!1:(i=!0,n=t.child,Al=jr()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,i?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,r=null!=(r=e.memoizedProps.style)&&r.hasOwnProperty("display")?r.display:null,o.style.display=tn("display",r));else if(6===e.tag)e.stateNode.nodeValue=i?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(a(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Za),t.forEach((function(t){var i=bs.bind(null,e,t);n.has(t)||(n.add(t),t.then(i,i))}))}}var hl="function"==typeof WeakMap?WeakMap:Map;function pl(e,t,n){(n=lo(n,null)).tag=3,n.payload={element:null};var i=t.value;return n.callback=function(){zl||(zl=!0,Ll=i),el(e,t)},n}function ml(e,t,n){(n=lo(n,null)).tag=3;var i=e.type.getDerivedStateFromError;if("function"==typeof i){var r=t.value;n.payload=function(){return el(e,t),i(r)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof i&&(null===Fl?Fl=new Set([this]):Fl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var gl,vl=Math.ceil,yl=$.ReactCurrentDispatcher,_l=$.ReactCurrentOwner,bl=0,wl=3,kl=4,El=0,Tl=null,Sl=null,xl=0,Cl=bl,Pl=null,Rl=1073741823,Dl=1073741823,Ol=null,Il=0,Nl=!1,Al=0,Ml=null,zl=!1,Ll=null,Fl=null,jl=!1,Hl=null,Ul=90,Wl=null,Bl=0,Vl=null,Yl=0;function Gl(){return 0!=(48&El)?1073741821-(jr()/10|0):0!==Yl?Yl:Yl=1073741821-(jr()/10|0)}function ql(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var i=Hr();if(0==(4&t))return 99===i?1073741823:1073741822;if(0!=(16&El))return xl;if(null!==n)e=qr(e,0|n.timeoutMs||5e3,250);else switch(i){case 99:e=1073741823;break;case 98:e=qr(e,150,100);break;case 97:case 96:e=qr(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Tl&&e===xl&&--e,e}function Xl(e,t){if(50<Bl)throw Bl=0,Vl=null,Error(a(185));if(null!==(e=Ql(e,t))){var n=Hr();1073741823===t?0!=(8&El)&&0==(48&El)?Zl(e):(Kl(e),0===El&&Yr()):Kl(e),0==(4&El)||98!==n&&99!==n||(null===Wl?Wl=new Map([[e,t]]):(void 0===(n=Wl.get(e))||n>t)&&Wl.set(e,t))}}function Ql(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var i=e.return,r=null;if(null===i&&3===e.tag)r=e.stateNode;else for(;null!==i;){if(n=i.alternate,i.childExpirationTime<t&&(i.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===i.return&&3===i.tag){r=i.stateNode;break}i=i.return}return null!==r&&(Tl===r&&(as(t),Cl===kl&&Ns(r,xl)),As(r,t)),r}function $l(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Is(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Kl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Vr(Zl.bind(null,e));else{var t=$l(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var i=Gl();if(1073741823===t?i=99:1===t||2===t?i=95:i=0>=(i=10*(1073741821-t)-10*(1073741821-i))?99:250>=i?98:5250>=i?97:95,null!==n){var r=e.callbackPriority;if(e.callbackExpirationTime===t&&r>=i)return;n!==Ir&&Er(n)}e.callbackExpirationTime=t,e.callbackPriority=i,t=1073741823===t?Vr(Zl.bind(null,e)):Br(i,Jl.bind(null,e),{timeout:10*(1073741821-t)-jr()}),e.callbackNode=t}}}function Jl(e,t){if(Yl=0,t)return Ms(e,t=Gl()),Kl(e),null;var n=$l(e);if(0!==n){if(t=e.callbackNode,0!=(48&El))throw Error(a(327));if(ms(),e===Tl&&n===xl||ns(e,n),null!==Sl){var i=El;El|=16;for(var r=rs();;)try{ss();break}catch(t){is(e,t)}if(Zr(),El=i,yl.current=r,1===Cl)throw t=Pl,ns(e,n),Ns(e,n),Kl(e),t;if(null===Sl)switch(r=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,i=Cl,Tl=null,i){case bl:case 1:throw Error(a(345));case 2:Ms(e,2<n?2:n);break;case wl:if(Ns(e,n),n===(i=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fs(r)),1073741823===Rl&&10<(r=Al+500-jr())){if(Nl){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,ns(e,n);break}}if(0!==(o=$l(e))&&o!==n)break;if(0!==i&&i!==n){e.lastPingedTime=i;break}e.timeoutHandle=_n(ds.bind(null,e),r);break}ds(e);break;case kl:if(Ns(e,n),n===(i=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fs(r)),Nl&&(0===(r=e.lastPingedTime)||r>=n)){e.lastPingedTime=n,ns(e,n);break}if(0!==(r=$l(e))&&r!==n)break;if(0!==i&&i!==n){e.lastPingedTime=i;break}if(1073741823!==Dl?i=10*(1073741821-Dl)-jr():1073741823===Rl?i=0:(i=10*(1073741821-Rl)-5e3,0>(i=(r=jr())-i)&&(i=0),(n=10*(1073741821-n)-r)<(i=(120>i?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*vl(i/1960))-i)&&(i=n)),10<i){e.timeoutHandle=_n(ds.bind(null,e),i);break}ds(e);break;case 5:if(1073741823!==Rl&&null!==Ol){o=Rl;var l=Ol;if(0>=(i=0|l.busyMinDurationMs)?i=0:(r=0|l.busyDelayMs,i=(o=jr()-(10*(1073741821-o)-(0|l.timeoutMs||5e3)))<=r?0:r+i-o),10<i){Ns(e,n),e.timeoutHandle=_n(ds.bind(null,e),i);break}}ds(e);break;default:throw Error(a(329))}if(Kl(e),e.callbackNode===t)return Jl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&El))throw Error(a(327));if(ms(),e===Tl&&t===xl||ns(e,t),null!==Sl){var n=El;El|=16;for(var i=rs();;)try{ls();break}catch(t){is(e,t)}if(Zr(),El=n,yl.current=i,1===Cl)throw n=Pl,ns(e,t),Ns(e,t),Kl(e),n;if(null!==Sl)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Tl=null,ds(e),Kl(e)}return null}function es(e,t){var n=El;El|=1;try{return e(t)}finally{0===(El=n)&&Yr()}}function ts(e,t){var n=El;El&=-2,El|=8;try{return e(t)}finally{0===(El=n)&&Yr()}}function ns(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,bn(n)),null!==Sl)for(n=Sl.return;null!==n;){var i=n;switch(i.tag){case 1:null!=(i=i.type.childContextTypes)&&gr();break;case 3:No(),sr(dr),sr(fr);break;case 5:Mo(i);break;case 4:No();break;case 13:case 19:sr(zo);break;case 10:eo(i)}n=n.return}Tl=e,Sl=xs(e.current,null),xl=t,Cl=bl,Pl=null,Dl=Rl=1073741823,Ol=null,Il=0,Nl=!1}function is(e,t){for(;;){try{if(Zr(),jo.current=ga,Yo)for(var n=Wo.memoizedState;null!==n;){var i=n.queue;null!==i&&(i.pending=null),n=n.next}if(Uo=0,Vo=Bo=Wo=null,Yo=!1,null===Sl||null===Sl.return)return Cl=1,Pl=t,Sl=null;e:{var r=e,o=Sl.return,a=Sl,l=t;if(t=xl,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var s=l;if(0==(2&a.mode)){var u=a.alternate;u?(a.updateQueue=u.updateQueue,a.memoizedState=u.memoizedState,a.expirationTime=u.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var c=0!=(1&zo.current),f=o;do{var d;if(d=13===f.tag){var h=f.memoizedState;if(null!==h)d=null!==h.dehydrated;else{var p=f.memoizedProps;d=void 0!==p.fallback&&(!0!==p.unstable_avoidThisFallback||!c)}}if(d){var m=f.updateQueue;if(null===m){var g=new Set;g.add(s),f.updateQueue=g}else m.add(s);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var v=lo(1073741823,null);v.tag=2,so(a,v)}a.expirationTime=1073741823;break e}l=void 0,a=t;var y=r.pingCache;if(null===y?(y=r.pingCache=new hl,l=new Set,y.set(s,l)):void 0===(l=y.get(s))&&(l=new Set,y.set(s,l)),!l.has(a)){l.add(a);var _=_s.bind(null,r,s,a);s.then(_,_)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ge(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(a))}5!==Cl&&(Cl=2),l=Ja(l,a),f=o;do{switch(f.tag){case 3:s=l,f.effectTag|=4096,f.expirationTime=t,uo(f,pl(f,s,t));break e;case 1:s=l;var b=f.type,w=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof b.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Fl||!Fl.has(w)))){f.effectTag|=4096,f.expirationTime=t,uo(f,ml(f,s,t));break e}}f=f.return}while(null!==f)}Sl=cs(Sl)}catch(e){t=e;continue}break}}function rs(){var e=yl.current;return yl.current=ga,null===e?ga:e}function os(e,t){e<Rl&&2<e&&(Rl=e),null!==t&&e<Dl&&2<e&&(Dl=e,Ol=t)}function as(e){e>Il&&(Il=e)}function ls(){for(;null!==Sl;)Sl=us(Sl)}function ss(){for(;null!==Sl&&!Nr();)Sl=us(Sl)}function us(e){var t=gl(e.alternate,e,xl);return e.memoizedProps=e.pendingProps,null===t&&(t=cs(e)),_l.current=null,t}function cs(e){Sl=e;do{var t=Sl.alternate;if(e=Sl.return,0==(2048&Sl.effectTag)){if(t=$a(t,Sl,xl),1===xl||1!==Sl.childExpirationTime){for(var n=0,i=Sl.child;null!==i;){var r=i.expirationTime,o=i.childExpirationTime;r>n&&(n=r),o>n&&(n=o),i=i.sibling}Sl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Sl.firstEffect),null!==Sl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Sl.firstEffect),e.lastEffect=Sl.lastEffect),1<Sl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Sl:e.firstEffect=Sl,e.lastEffect=Sl))}else{if(null!==(t=Ka(Sl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Sl.sibling))return t;Sl=e}while(null!==Sl);return Cl===bl&&(Cl=5),null}function fs(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function ds(e){var t=Hr();return Wr(99,hs.bind(null,e,t)),null}function hs(e,t){do{ms()}while(null!==Hl);if(0!=(48&El))throw Error(a(327));var n=e.finishedWork,i=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var r=fs(n);if(e.firstPendingTime=r,i<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:i<=e.firstSuspendedTime&&(e.firstSuspendedTime=i-1),i<=e.lastPingedTime&&(e.lastPingedTime=0),i<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Tl&&(Sl=Tl=null,xl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){var o=El;El|=32,_l.current=null,mn=Gt;var l=hn();if(pn(l)){if("selectionStart"in l)var s={start:l.selectionStart,end:l.selectionEnd};else e:{var u=(s=(s=l.ownerDocument)&&s.defaultView||window).getSelection&&s.getSelection();if(u&&0!==u.rangeCount){s=u.anchorNode;var c=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{s.nodeType,f.nodeType}catch(e){s=null;break e}var d=0,h=-1,p=-1,m=0,g=0,v=l,y=null;t:for(;;){for(var _;v!==s||0!==c&&3!==v.nodeType||(h=d+c),v!==f||0!==u&&3!==v.nodeType||(p=d+u),3===v.nodeType&&(d+=v.nodeValue.length),null!==(_=v.firstChild);)y=v,v=_;for(;;){if(v===l)break t;if(y===s&&++m===c&&(h=d),y===f&&++g===u&&(p=d),null!==(_=v.nextSibling))break;y=(v=y).parentNode}v=_}s=-1===h||-1===p?null:{start:h,end:p}}else s=null}s=s||{start:0,end:0}}else s=null;gn={activeElementDetached:null,focusedElem:l,selectionRange:s},Gt=!1,Ml=r;do{try{ps()}catch(e){if(null===Ml)throw Error(a(330));ys(Ml,e),Ml=Ml.nextEffect}}while(null!==Ml);Ml=r;do{try{for(l=e,s=t;null!==Ml;){var b=Ml.effectTag;if(16&b&&He(Ml.stateNode,""),128&b){var w=Ml.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:ul(Ml),Ml.effectTag&=-3;break;case 6:ul(Ml),Ml.effectTag&=-3,fl(Ml.alternate,Ml);break;case 1024:Ml.effectTag&=-1025;break;case 1028:Ml.effectTag&=-1025,fl(Ml.alternate,Ml);break;case 4:fl(Ml.alternate,Ml);break;case 8:cl(l,c=Ml,s),ll(c)}Ml=Ml.nextEffect}}catch(e){if(null===Ml)throw Error(a(330));ys(Ml,e),Ml=Ml.nextEffect}}while(null!==Ml);if(k=gn,w=hn(),b=k.focusedElem,s=k.selectionRange,w!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==s&&pn(b)&&(w=s.start,void 0===(k=s.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),c=b.textContent.length,l=Math.min(s.start,c),s=void 0===s.end?l:Math.min(s.end,c),!k.extend&&l>s&&(c=s,s=l,l=c),c=dn(b,l),f=dn(b,s),c&&f&&(1!==k.rangeCount||k.anchorNode!==c.node||k.anchorOffset!==c.offset||k.focusNode!==f.node||k.focusOffset!==f.offset)&&((w=w.createRange()).setStart(c.node,c.offset),k.removeAllRanges(),l>s?(k.addRange(w),k.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Gt=!!mn,gn=mn=null,e.current=n,Ml=r;do{try{for(b=e;null!==Ml;){var E=Ml.effectTag;if(36&E&&ol(b,Ml.alternate,Ml),128&E){w=void 0;var T=Ml.ref;if(null!==T){var S=Ml.stateNode;switch(Ml.tag){case 5:w=S;break;default:w=S}"function"==typeof T?T(w):T.current=w}}Ml=Ml.nextEffect}}catch(e){if(null===Ml)throw Error(a(330));ys(Ml,e),Ml=Ml.nextEffect}}while(null!==Ml);Ml=null,Ar(),El=o}else e.current=n;if(jl)jl=!1,Hl=e,Ul=t;else for(Ml=r;null!==Ml;)t=Ml.nextEffect,Ml.nextEffect=null,Ml=t;if(0===(t=e.firstPendingTime)&&(Fl=null),1073741823===t?e===Vl?Bl++:(Bl=0,Vl=e):Bl=0,"function"==typeof ws&&ws(n.stateNode,i),Kl(e),zl)throw zl=!1,e=Ll,Ll=null,e;return 0!=(8&El)||Yr(),null}function ps(){for(;null!==Ml;){var e=Ml.effectTag;0!=(256&e)&&nl(Ml.alternate,Ml),0==(512&e)||jl||(jl=!0,Br(97,(function(){return ms(),null}))),Ml=Ml.nextEffect}}function ms(){if(90!==Ul){var e=97<Ul?97:Ul;return Ul=90,Wr(e,gs)}}function gs(){if(null===Hl)return!1;var e=Hl;if(Hl=null,0!=(48&El))throw Error(a(331));var t=El;for(El|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:il(5,n),rl(5,n)}}catch(t){if(null===e)throw Error(a(330));ys(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return El=t,Yr(),!0}function vs(e,t,n){so(e,t=pl(e,t=Ja(n,t),1073741823)),null!==(e=Ql(e,1073741823))&&Kl(e)}function ys(e,t){if(3===e.tag)vs(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){vs(n,e,t);break}if(1===n.tag){var i=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===Fl||!Fl.has(i))){so(n,e=ml(n,e=Ja(t,e),1073741823)),null!==(n=Ql(n,1073741823))&&Kl(n);break}}n=n.return}}function _s(e,t,n){var i=e.pingCache;null!==i&&i.delete(t),Tl===e&&xl===n?Cl===kl||Cl===wl&&1073741823===Rl&&jr()-Al<500?ns(e,xl):Nl=!0:Is(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Kl(e)))}function bs(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=ql(t=Gl(),e,null)),null!==(e=Ql(e,t))&&Kl(e)}gl=function(e,t,n){var i=t.expirationTime;if(null!==e){var r=t.pendingProps;if(e.memoizedProps!==r||dr.current)Da=!0;else{if(i<n){switch(Da=!1,t.tag){case 3:ja(t),Pa();break;case 5:if(Ao(t),4&t.mode&&1!==n&&r.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:mr(t.type)&&_r(t);break;case 4:Io(t,t.stateNode.containerInfo);break;case 10:i=t.memoizedProps.value,r=t.type._context,ur(Qr,r._currentValue),r._currentValue=i;break;case 13:if(null!==t.memoizedState)return 0!==(i=t.child.childExpirationTime)&&i>=n?Va(e,t,n):(ur(zo,1&zo.current),null!==(t=Xa(e,t,n))?t.sibling:null);ur(zo,1&zo.current);break;case 19:if(i=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(i)return qa(e,t,n);t.effectTag|=64}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null),ur(zo,zo.current),!i)return null}return Xa(e,t,n)}Da=!1}}else Da=!1;switch(t.expirationTime=0,t.tag){case 2:if(i=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,r=pr(t,fr.current),no(t,n),r=Xo(null,t,i,e,r,n),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mr(i)){var o=!0;_r(t)}else o=!1;t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,oo(t);var l=i.getDerivedStateFromProps;"function"==typeof l&&mo(t,i,l,e),r.updater=go,t.stateNode=r,r._reactInternalFiber=t,bo(t,i,e,n),t=Fa(null,t,i,!0,o,n)}else t.tag=0,Oa(null,t,r,n),t=t.child;return t;case 16:e:{if(r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(r),1!==r._status)throw r._result;switch(r=r._result,t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ss(e)?1:0;if(null!=e){if((e=e.$$typeof)===se)return 11;if(e===fe)return 14}return 2}(r),e=Xr(r,e),o){case 0:t=za(null,t,r,e,n);break e;case 1:t=La(null,t,r,e,n);break e;case 11:t=Ia(null,t,r,e,n);break e;case 14:t=Na(null,t,r,Xr(r.type,e),i,n);break e}throw Error(a(306,r,""))}return t;case 0:return i=t.type,r=t.pendingProps,za(e,t,i,r=t.elementType===i?r:Xr(i,r),n);case 1:return i=t.type,r=t.pendingProps,La(e,t,i,r=t.elementType===i?r:Xr(i,r),n);case 3:if(ja(t),i=t.updateQueue,null===e||null===i)throw Error(a(282));if(i=t.pendingProps,r=null!==(r=t.memoizedState)?r.element:null,ao(e,t),co(t,i,null,n),(i=t.memoizedState.element)===r)Pa(),t=Xa(e,t,n);else{if((r=t.stateNode.hydrate)&&(wa=wn(t.stateNode.containerInfo.firstChild),ba=t,r=ka=!0),r)for(n=xo(t,null,i,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Oa(e,t,i,n),Pa();t=t.child}return t;case 5:return Ao(t),null===e&&Sa(t),i=t.type,r=t.pendingProps,o=null!==e?e.memoizedProps:null,l=r.children,yn(i,r)?l=null:null!==o&&yn(i,o)&&(t.effectTag|=16),Ma(e,t),4&t.mode&&1!==n&&r.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Oa(e,t,l,n),t=t.child),t;case 6:return null===e&&Sa(t),null;case 13:return Va(e,t,n);case 4:return Io(t,t.stateNode.containerInfo),i=t.pendingProps,null===e?t.child=So(t,null,i,n):Oa(e,t,i,n),t.child;case 11:return i=t.type,r=t.pendingProps,Ia(e,t,i,r=t.elementType===i?r:Xr(i,r),n);case 7:return Oa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Oa(e,t,t.pendingProps.children,n),t.child;case 10:e:{i=t.type._context,r=t.pendingProps,l=t.memoizedProps,o=r.value;var s=t.type._context;if(ur(Qr,s._currentValue),s._currentValue=o,null!==l)if(s=l.value,0===(o=Li(s,o)?0:0|("function"==typeof i._calculateChangedBits?i._calculateChangedBits(s,o):1073741823))){if(l.children===r.children&&!dr.current){t=Xa(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===i&&0!=(c.observedBits&o)){1===s.tag&&((c=lo(n,null)).tag=2,so(s,c)),s.expirationTime<n&&(s.expirationTime=n),null!==(c=s.alternate)&&c.expirationTime<n&&(c.expirationTime=n),to(s.return,n),u.expirationTime<n&&(u.expirationTime=n);break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Oa(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,i=(o=t.pendingProps).children,no(t,n),i=i(r=io(r,o.unstable_observedBits)),t.effectTag|=1,Oa(e,t,i,n),t.child;case 14:return o=Xr(r=t.type,t.pendingProps),Na(e,t,r,o=Xr(r.type,o),i,n);case 15:return Aa(e,t,t.type,t.pendingProps,i,n);case 17:return i=t.type,r=t.pendingProps,r=t.elementType===i?r:Xr(i,r),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,mr(i)?(e=!0,_r(t)):e=!1,no(t,n),yo(t,i,r),bo(t,i,r,n),Fa(null,t,i,!0,e,n);case 19:return qa(e,t,n)}throw Error(a(156,t.tag))};var ws=null,ks=null;function Es(e,t,n,i){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Ts(e,t,n,i){return new Es(e,t,n,i)}function Ss(e){return!(!(e=e.prototype)||!e.isReactComponent)}function xs(e,t){var n=e.alternate;return null===n?((n=Ts(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Cs(e,t,n,i,r,o){var l=2;if(i=e,"function"==typeof e)Ss(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Ps(n.children,r,o,t);case le:l=8,r|=7;break;case ie:l=8,r|=1;break;case re:return(e=Ts(12,n,t,8|r)).elementType=re,e.type=re,e.expirationTime=o,e;case ue:return(e=Ts(13,n,t,r)).type=ue,e.elementType=ue,e.expirationTime=o,e;case ce:return(e=Ts(19,n,t,r)).elementType=ce,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:l=10;break e;case ae:l=9;break e;case se:l=11;break e;case fe:l=14;break e;case de:l=16,i=null;break e;case he:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ts(l,n,t,r)).elementType=e,t.type=i,t.expirationTime=o,t}function Ps(e,t,n,i){return(e=Ts(7,e,i,t)).expirationTime=n,e}function Rs(e,t,n){return(e=Ts(6,e,null,t)).expirationTime=n,e}function Ds(e,t,n){return(t=Ts(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Os(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Is(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Ns(e,t){var n=e.firstSuspendedTime,i=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(i>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function As(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Ms(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function zs(e,t,n,i){var r=t.current,o=Gl(),l=ho.suspense;o=ql(o,r,l);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(mr(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(a(171))}if(1===n.tag){var u=n.type;if(mr(u)){n=yr(n,u,s);break e}}n=s}else n=cr;return null===t.context?t.context=n:t.pendingContext=n,(t=lo(o,l)).payload={element:e},null!==(i=void 0===i?null:i)&&(t.callback=i),so(r,t),Xl(r,o),o}function Ls(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fs(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function js(e,t){Fs(e,t),(e=e.alternate)&&Fs(e,t)}function Hs(e,t,n){var i=new Os(e,t,n=null!=n&&!0===n.hydrate),r=Ts(3,null,null,2===t?7:1===t?3:0);i.current=r,r.stateNode=i,oo(r),e[xn]=i.current,n&&0!==t&&function(e,t){var n=Je(t);xt.forEach((function(e){pt(e,t,n)})),Ct.forEach((function(e){pt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=i}function Us(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ws(e,t,n,i,r){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof r){var l=r;r=function(){var e=Ls(a);l.call(e)}}zs(t,a,e,r)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Hs(e,0,t?{hydrate:!0}:void 0)}(n,i),a=o._internalRoot,"function"==typeof r){var s=r;r=function(){var e=Ls(a);s.call(e)}}ts((function(){zs(t,a,e,r)}))}return Ls(a)}function Bs(e,t,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==i?null:""+i,children:e,containerInfo:t,implementation:n}}function Vs(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Us(t))throw Error(a(200));return Bs(e,t,null,n)}Hs.prototype.render=function(e){zs(e,this._internalRoot,null,null)},Hs.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;zs(null,e,null,(function(){t[xn]=null}))},mt=function(e){if(13===e.tag){var t=qr(Gl(),150,100);Xl(e,t),js(e,t)}},gt=function(e){13===e.tag&&(Xl(e,3),js(e,3))},vt=function(e){if(13===e.tag){var t=Gl();Xl(e,t=ql(t,e,null)),js(e,t)}},P=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var i=n[t];if(i!==e&&i.form===e.form){var r=Dn(i);if(!r)throw Error(a(90));we(i),Se(i,r)}}}break;case"textarea":Ie(e,n);break;case"select":null!=(t=n.value)&&Re(e,!!n.multiple,t,!1)}},A=es,M=function(e,t,n,i,r){var o=El;El|=4;try{return Wr(98,e.bind(null,t,n,i,r))}finally{0===(El=o)&&Yr()}},z=function(){0==(49&El)&&(function(){if(null!==Wl){var e=Wl;Wl=null,e.forEach((function(e,t){Ms(t,e),Kl(t)})),Yr()}}(),ms())},L=function(e,t){var n=El;El|=2;try{return e(t)}finally{0===(El=n)&&Yr()}};var Ys,Gs,qs={Events:[Pn,Rn,Dn,x,E,Ln,function(e){rt(e,zn)},I,N,Kt,lt,ms,{current:!1}]};Gs=(Ys={findFiberByHostInstance:Cn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);ws=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},ks=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(r({},Ys,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:$.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Gs?Gs(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=qs,t.createPortal=Vs,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&El))throw Error(a(187));var n=El;El|=1;try{return Wr(99,e.bind(null,t))}finally{El=n,Yr()}},t.hydrate=function(e,t,n){if(!Us(t))throw Error(a(200));return Ws(null,e,t,!0,n)},t.render=function(e,t,n){if(!Us(t))throw Error(a(200));return Ws(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Us(e))throw Error(a(40));return!!e._reactRootContainer&&(ts((function(){Ws(null,null,e,!1,(function(){e._reactRootContainer=null,e[xn]=null}))})),!0)},t.unstable_batchedUpdates=es,t.unstable_createPortal=function(e,t){return Vs(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,i){if(!Us(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Ws(e,t,n,!1,i)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(7)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var i,r,o,a,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,u=null,c=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},i=function(e){null!==s?setTimeout(i,0,e):(s=e,setTimeout(c,0))},r=function(e,t){u=setTimeout(e,t)},o=function(){clearTimeout(u)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,h=window.Date,p=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var g=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var v=h.now();t.unstable_now=function(){return h.now()-v}}var y=!1,_=null,b=-1,w=5,k=0;a=function(){return t.unstable_now()>=k},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,T=E.port2;E.port1.onmessage=function(){if(null!==_){var e=t.unstable_now();k=e+w;try{_(!0,e)?T.postMessage(null):(y=!1,_=null)}catch(e){throw T.postMessage(null),e}}else y=!1},i=function(e){_=e,y||(y=!0,T.postMessage(null))},r=function(e,n){b=p((function(){e(t.unstable_now())}),n)},o=function(){m(b),b=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var i=n-1>>>1,r=e[i];if(!(void 0!==r&&0<P(r,t)))break e;e[i]=t,e[n]=r,n=i}}function x(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var i=0,r=e.length;i<r;){var o=2*(i+1)-1,a=e[o],l=o+1,s=e[l];if(void 0!==a&&0>P(a,n))void 0!==s&&0>P(s,a)?(e[i]=s,e[l]=n,i=l):(e[i]=a,e[o]=n,i=o);else{if(!(void 0!==s&&0>P(s,n)))break e;e[i]=s,e[l]=n,i=l}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var R=[],D=[],O=1,I=null,N=3,A=!1,M=!1,z=!1;function L(e){for(var t=x(D);null!==t;){if(null===t.callback)C(D);else{if(!(t.startTime<=e))break;C(D),t.sortIndex=t.expirationTime,S(R,t)}t=x(D)}}function F(e){if(z=!1,L(e),!M)if(null!==x(R))M=!0,i(j);else{var t=x(D);null!==t&&r(F,t.startTime-e)}}function j(e,n){M=!1,z&&(z=!1,o()),A=!0;var i=N;try{for(L(n),I=x(R);null!==I&&(!(I.expirationTime>n)||e&&!a());){var l=I.callback;if(null!==l){I.callback=null,N=I.priorityLevel;var s=l(I.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?I.callback=s:I===x(R)&&C(R),L(n)}else C(R);I=x(R)}if(null!==I)var u=!0;else{var c=x(D);null!==c&&r(F,c.startTime-n),u=!1}return u}finally{I=null,N=i,A=!1}}function H(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var U=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||A||(M=!0,i(j))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return x(R)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"==typeof a&&null!==a){var s=a.delay;s="number"==typeof s&&0<s?l+s:l,a="number"==typeof a.timeout?a.timeout:H(e)}else a=H(e),s=l;return e={id:O++,callback:n,priorityLevel:e,startTime:s,expirationTime:a=s+a,sortIndex:-1},s>l?(e.sortIndex=s,S(D,e),null===x(R)&&e===x(D)&&(z?o():z=!0,r(F,s-l))):(e.sortIndex=a,S(R,e),M||A||(M=!0,i(j))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=x(R);return n!==I&&null!==I&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<I.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},function(e,t,n){"use strict";var i=n(9);function r(){}function o(){}o.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,o,a){if(a!==i){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:r};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";n.r(t);var i,r=n(0),o=n.n(r),a=n(3),l=function(){},s=(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){var t=e.call(this)||this;return t.recipeBook=new Map([["Good Recipe",{name:"Good Recipe",text:"This is a recipe"}],["Better Recipe",{name:"Better Recipe",text:"This is a better recipe. It contains all the good things you love to eat and is full of sugar.",keyIngredients:["Sugar","Honey","Peanut Butter Cups"]}],["Awesomesauce Recipe",{name:"Awesomesauce Recipe",text:"This is the best recipe of all",keyIngredients:["Bacon","More Bacon"],commonIngredients:["Flour","Onions","Cheesy bits"]}],["Bad Recipe",{name:"Bad Recipe",text:"This recipe is made of fail and sadness",keyIngredients:["Fail","Sadness"],commonIngredients:["Flour","Water","Spinach"]}],["Jerked Jerky",{name:"Jerked Jerky",text:"Jerk it good",keyIngredients:["Jerky"],commonIngredients:["Sauce","Onions"]}]]),t}return s(t,e),t.prototype.getRecipes=function(){return new Promise(function(e,t){e(Array.from(this.recipeBook.values()))}.bind(this))},t.prototype.recipesNow=function(){return Array.from(this.recipeBook.values())},t.prototype.deleteRecipe=function(e){return this.recipeBook.delete(e),this.getRecipes()},t.prototype.editRecipe=function(e,t){return this.recipeBook.set(e,t),this.getRecipes()},t.prototype.addRecipe=function(e,t){return this.recipeBook.set(e,t),this.getRecipes()},t}(l),c=!1,f=null,d=null;void 0===window.CALLBACK_REGISTRY&&(window.CALLBACK_REGISTRY={refreshRecipeGrid:e=>e});var h=window.CALLBACK_REGISTRY,p=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),m=function(e){function t(){var t=e.call(this)||this;return t.handleErrors=t.handleErrors.bind(t),t.apiServer="",d?t.apiServer=d:f&&(t.apiServer=window.location.protocol+"//"+window.location.hostname+":"+f),t}return p(t,e),t.prototype.getRecipes=function(){var e=this;return fetch(this.apiServer+"/service/",{method:"post",credentials:"include",body:JSON.stringify({action:"getRecipes"})}).then(this.handleErrors).then((function(t){return e.parseResponse(t)}))},t.prototype.deleteRecipe=function(e){var t=this,n={action:"deleteRecipe",recipe:e};return fetch(this.apiServer+"/service/",{method:"post",credentials:"include",body:JSON.stringify(n)}).then(this.handleErrors).then((function(e){return t.parseResponse(e)}))},t.prototype.editRecipe=function(e,t){var n=this,i={action:"editRecipe",recipe:t};return fetch(this.apiServer+"/service/",{method:"post",credentials:"include",body:JSON.stringify(i)}).then(this.handleErrors).then((function(e){return n.parseResponse(e)}))},t.prototype.addRecipe=function(e,t){var n=this,i={action:"addRecipe",recipe:t};return fetch(this.apiServer+"/service/",{method:"post",credentials:"include",body:JSON.stringify(i)}).then(this.handleErrors).then((function(e){return n.parseResponse(e)}))},t.prototype.parseResponse=function(e){return e.json().then((function(e){if(!e.isLoggedIn)throw Error("Please log in again.");if(e.error)throw Error(e.error);return e.recipes}))},t.prototype.handleErrors=function(e){if(!e.ok)throw Error(e.statusText);return e},t}(l),g=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={confirming:!1},n.confirmDelete=n.confirmDelete.bind(n),n}return g(t,e),t.prototype.render=function(){var e=this;return this.state.confirming?o.a.createElement("div",{className:"deleteWidget"},o.a.createElement("span",{className:"label"},"Are you sure?"),o.a.createElement("span",{className:"button yes",onClick:function(){return e.confirmYes()}},"Y "),o.a.createElement("span",{className:"button no",onClick:function(){return e.confirmNo()}}," N ")):o.a.createElement("div",{className:"deleteWidget"},o.a.createElement("span",{className:"button delete",onClick:function(){return e.confirmDelete()}}," X "))},t.prototype.confirmDelete=function(){this.setState({confirming:!0})},t.prototype.confirmYes=function(){this.setState({confirming:!1}),this.props.onDelete()},t.prototype.confirmNo=function(){this.setState({confirming:!1})},t}(o.a.Component),y=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),_=function(){return(_=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},b=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var i=Array(e),r=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,l=o.length;a<l;a++,r++)i[r]=o[a];return i},w=function(e){function t(t){var n=e.call(this,t)||this;n.elementToFocus="",n.needResize=!1;var i=!1;return t.newRecipe&&(i=!0,n.elementToFocus="name:0"),n.state={editing:i,recipeData:t.recipeData},n.doEdit=n.doEdit.bind(n),n.cancelEdit=n.cancelEdit.bind(n),n.confirmEdit=n.confirmEdit.bind(n),n.handleChangeField=n.handleChangeField.bind(n),n.handleChangeList=n.handleChangeList.bind(n),n.onKeydown=n.onKeydown.bind(n),n}return y(t,e),t.prototype.render=function(){return this.state.editing?this.renderEdit():this.renderReadOnly()},t.prototype.renderReadOnly=function(){var e=this;return o.a.createElement("div",{className:"item",ref:function(t){return e.domElement=t}},o.a.createElement("div",{className:"item-content"},o.a.createElement("div",{className:"recipeCard"},o.a.createElement("div",{className:"cardHeader"},o.a.createElement("span",{className:"cardTitle"}," ",this.props.recipeData.name),"        "),o.a.createElement("div",{className:"cardBody"},o.a.createElement(v,{name:this.props.recipeData.name,onDelete:function(){return e.delete()}}),this.renderEditBtn(),this.props.recipeData.text,o.a.createElement("ul",null,this.props.recipeData.keyIngredients&&this.props.recipeData.keyIngredients.map((function(e){return o.a.createElement("li",{key:e,className:"keyIngredient"},e)})),this.props.recipeData.commonIngredients&&this.props.recipeData.commonIngredients.map((function(e){return o.a.createElement("li",{key:e,className:"commonIngredient"},e)})))))))},t.prototype.renderEdit=function(){var e=this,t=0,n=0,i=o.a.createElement("span",null,this.state.recipeData.name);return this.props.newRecipe&&(i=o.a.createElement("input",{type:"text",className:"name",name:"name",value:this.state.recipeData.name,onChange:this.handleChangeField,placeholder:"Enter a new recipe name."})),o.a.createElement("div",{className:"item",ref:function(t){return e.domElement=t}},o.a.createElement("div",{className:"item-content"},o.a.createElement("div",{className:"recipeCard editing",onKeyDown:this.onKeydown},o.a.createElement("div",{className:"cardHeader"},o.a.createElement("span",{className:"cardTitle"}," ",i),"        "),o.a.createElement("div",{className:"cardBody"},o.a.createElement("textarea",{className:"description",name:"text",value:this.state.recipeData.text,ref:function(t){return e.textAreaElement=t},onChange:this.handleChangeField,placeholder:"Enter a recipe description."}),o.a.createElement("ul",null,this.state.recipeData.keyIngredients&&this.state.recipeData.keyIngredients.map((function(n){return o.a.createElement("li",{key:"key"+t.toString(),className:"keyIngredient"},o.a.createElement("input",{type:"text",className:"keyIngredients",value:n,onChange:e.handleChangeList,name:"key"+(t++).toString()}))})),o.a.createElement("li",{key:"key"+t.toString(),className:"keyIngredient"},o.a.createElement("input",{type:"text",className:"keyIngredients",value:"",onChange:this.handleChangeList,name:"key"+(t++).toString(),placeholder:"New ingredient"})),this.state.recipeData.commonIngredients&&this.state.recipeData.commonIngredients.map((function(t){return o.a.createElement("li",{key:"common"+n.toString(),className:"commonIngredient"},o.a.createElement("input",{type:"text",className:"commonIngredients",value:t,onChange:e.handleChangeList,name:"common"+(n++).toString()}))})),o.a.createElement("li",{key:"common"+n.toString(),className:"commonIngredient"},o.a.createElement("input",{type:"text",className:"commonIngredients",value:"",onChange:this.handleChangeList,name:"common"+(n++).toString(),placeholder:"New ingredient"}))),o.a.createElement("div",null,o.a.createElement("button",{type:"button",onClick:this.cancelEdit},"Cancel"),o.a.createElement("button",{type:"button",onClick:this.confirmEdit},"Save"))))))},t.prototype.renderEditBtn=function(){return o.a.createElement("div",{className:"editBtn"},o.a.createElement("img",{src:"images-/pencil.png",alt:"edit",onClick:this.doEdit}))},t.prototype.componentDidMount=function(){this.props.onMount(this.domElement),this.focusIfRequired()},t.prototype.focusIfRequired=function(){if(this.elementToFocus){var e=this.elementToFocus.split(":")[0],t=this.elementToFocus.split(":")[1];this.domElement.getElementsByClassName(e)[t].focus(),this.elementToFocus=""}},t.prototype.componentDidUpdate=function(){this.setEditDesciptionHeight(),this.focusIfRequired(),this.needResize&&(this.needResize=!1,this.props.onResize(this.domElement))},t.prototype.setEditDesciptionHeight=function(){var e=this.textAreaElement;e&&(e.style.height&&e.style.height===e.scrollHeight+"px"||(e.style.height="1px",e.style.height=e.scrollHeight+"px",this.props.onResize(this.domElement)))},t.prototype.componentWillUnmount=function(){this.props.onUnMount(this.domElement)},t.prototype.doEdit=function(){this.elementToFocus="description:0",this.setState({editing:!0,recipeData:Object.assign({},this.props.recipeData)})},t.prototype.cancelEdit=function(){this.needResize=!0,this.props.newRecipe&&this.props.cancelNew&&this.props.cancelNew(),this.setState({editing:!1})},t.prototype.onKeydown=function(e){"Escape"===e.key&&(e.stopPropagation(),e.preventDefault(),this.cancelEdit())},t.prototype.confirmEdit=function(){if(this.props.newRecipe&&this.props.addRecipe){if(!this.state.recipeData.name)return;return this.needResize=!0,this.props.addRecipe(this.state.recipeData),void this.setState({editing:!1})}this.needResize=!0,this.props.editRecipe(this.state.recipeData),this.setState({editing:!1})},t.prototype.handleChangeField=function(e){var t=_({},this.state.recipeData);t[e.target.name]=e.target.value,this.setState({recipeData:t})},t.prototype.handleChangeList=function(e){var t=_({},this.state.recipeData),n=e.target.name,i=e.target.value,r=[],o=0;if(n.startsWith("key")?(r=t.keyIngredients,o=parseInt(n.substring(3))):(r=t.commonIngredients,o=parseInt(n.substring(6))),r=r?b(r):[],0===i.trim().length){if(o>=r.length)return;r.splice(o,1)}else o>=r.length?(r.push(i),this.elementToFocus=e.target.className+":"+o.toString()):r[o]=i;n.startsWith("key")?t.keyIngredients=r:t.commonIngredients=r,this.setState({recipeData:t})},t.prototype.delete=function(){this.props.onDelete(this.props.recipeData.name)},t}(o.a.Component),k=n(1),E=n.n(k),T={},S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},C=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),P=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},R=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},D=function(e){function t(){x(this,t);var e=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._events={},e._queue=[],e._counter=0,e._isDestroyed=!1,e}return P(t,e),C(t,[{key:"on",value:function(e,t){if(this._isDestroyed)return this;var n=this._events[e];return n||(n=this._events[e]=[]),n.push(t),this}},{key:"once",value:function(e,t){if(this._isDestroyed)return this;var n=function(){this.off(e,n),t.apply(void 0,arguments)}.bind(this);return this.on(e,n)}},{key:"off",value:function(e,t){if(this._isDestroyed)return this;var n=this._events[e];if(!n||!n.length)return this;if(!t)return n.length=0,this;for(var i=n.length;i--;)t===n[i]&&n.splice(i,1);return this}},{key:"emit",value:function(e,t,n,i){if(this._isDestroyed)return this;var r=this._events[e];if(!r||!r.length)return this;var o=this._queue,a=o.length,l=arguments.length-1,s=void 0;for(s=0;s<r.length;s++)o.push(r[s]);for(++this._counter,s=a,a=o.length;s<a;s++)if(0===l?o[s]():1===l?o[s](t):2===l?o[s](t,n):o[s](t,n,i),this._isDestroyed)return this;return--this._counter,this._counter||(o.length=0),this}},{key:"destroy",value:function(){if(this._isDestroyed)return this;var e=this._events,t=void 0;for(t in this._isDestroyed=!0,this._queue.length=this._counter=0,e)e[t]&&(e[t].length=0,e[t]=void 0);return this}}]),t}(r.Component),O=!1,I="transform",N="transform";["","Webkit","Moz","O","ms"].forEach((function(e){if(!O){var t=e?e+"Transform":"transform";void 0!==document.documentElement.style[t]&&(e=e.toLowerCase(),I=e?"-"+e+"-transform":"transform",N=t,O=!0)}}));var A="function"==typeof WeakMap?new WeakMap:null;function M(e,t){var n=A&&A.get(e);return n||(n=window.getComputedStyle(e,null),A&&A.set(e,n)),n.getPropertyValue("transform"===t?I:t)}var z=/([A-Z])/g;function L(e){return e.replace(z,"-$1").toLowerCase()}function F(e,t){for(var n in t)e.style["transform"===n?N:n]=t[n]}var j=function(e){function t(e){x(this,t);var n=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._element=e,n._animation=null,n._callback=null,n._props=[],n._values=[],n._keyframes=[],n._options={},n._isDestroyed=!1,n._onFinish=n._onFinish.bind(n),n}return P(t,e),C(t,[{key:"start",value:function(e,t,n){if(!this._isDestroyed){var i=this._animation,r=this._props,o=this._values,a=n||0,l=!1;if(i){var s=0,u=void 0;for(var c in t)if(++s,-1===(u=r.indexOf(c))||t[c]!==o[u]){l=!0;break}l||s===r.length||(l=!0)}if(l&&i.cancel(),this._callback="function"==typeof a.onFinish?a.onFinish:null,!i||l){for(var f in r.length=o.length=0,t)r.push(f),o.push(t[f]);var d=this._keyframes;d[0]=e,d[1]=t;var h=this._options;h.duration=a.duration||300,h.easing=a.easing||"ease";var p=this._element;(i=p.animate(d,h)).onfinish=this._onFinish,this._animation=i,F(p,t)}}}},{key:"stop",value:function(e){if(!this._isDestroyed&&this._animation){var t=this._element,n=this._props,i=this._values,r=void 0,o=void 0,a=void 0;if(e)F(t,e);else for(a=0;a<n.length;a++)o=M(t,L(r=n[a])),t.style["transform"===r?N:r]=o;this._animation.cancel(),this._animation=this._callback=null,n.length=i.length=0}}},{key:"isAnimating",value:function(){return!!this._animation}},{key:"destroy",value:function(){this._isDestroyed||(this.stop(),this._element=this._options=this._keyframes=null,this._isDestroyed=!0)}},{key:"_onFinish",value:function(){var e=this._callback;this._animation=this._callback=null,this._props.length=this._values.length=0,e&&e()}}]),t}(r.Component);var H=function(e,t){return e(t={exports:{}},t.exports),t.exports}((function(e){
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function(t,n,i,r){var o,a=["","webkit","Moz","MS","ms","o"],l=n.createElement("div"),s=Math.round,u=Math.abs,c=Date.now;function f(e,t,n){return setTimeout(y(e,n),t)}function d(e,t,n){return!!Array.isArray(e)&&(h(e,n[t],n),!0)}function h(e,t,n){var i;if(e)if(e.forEach)e.forEach(t,n);else if(void 0!==e.length)for(i=0;i<e.length;)t.call(n,e[i],i,e),i++;else for(i in e)e.hasOwnProperty(i)&&t.call(n,e[i],i,e)}function p(e,n,i){var r="DEPRECATED METHOD: "+n+"\n"+i+" AT \n";return function(){var n=new Error("get-stack-trace"),i=n&&n.stack?n.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=t.console&&(t.console.warn||t.console.log);return o&&o.call(t.console,r,i),e.apply(this,arguments)}}o="function"!=typeof Object.assign?function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var r in i)i.hasOwnProperty(r)&&(t[r]=i[r])}return t}:Object.assign;var m=p((function(e,t,n){for(var i=Object.keys(t),r=0;r<i.length;)(!n||n&&void 0===e[i[r]])&&(e[i[r]]=t[i[r]]),r++;return e}),"extend","Use `assign`."),g=p((function(e,t){return m(e,t,!0)}),"merge","Use `assign`.");function v(e,t,n){var i,r=t.prototype;(i=e.prototype=Object.create(r)).constructor=e,i._super=r,n&&o(i,n)}function y(e,t){return function(){return e.apply(t,arguments)}}function _(e,t){return"function"==typeof e?e.apply(t&&t[0]||void 0,t):e}function b(e,t){return void 0===e?t:e}function w(e,t,n){h(S(t),(function(t){e.addEventListener(t,n,!1)}))}function k(e,t,n){h(S(t),(function(t){e.removeEventListener(t,n,!1)}))}function E(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function T(e,t){return e.indexOf(t)>-1}function S(e){return e.trim().split(/\s+/g)}function x(e,t,n){if(e.indexOf&&!n)return e.indexOf(t);for(var i=0;i<e.length;){if(n&&e[i][n]==t||!n&&e[i]===t)return i;i++}return-1}function C(e){return Array.prototype.slice.call(e,0)}function P(e,t,n){for(var i=[],r=[],o=0;o<e.length;){var a=t?e[o][t]:e[o];x(r,a)<0&&i.push(e[o]),r[o]=a,o++}return n&&(i=t?i.sort((function(e,n){return e[t]>n[t]})):i.sort()),i}function R(e,t){for(var n,i,r=t[0].toUpperCase()+t.slice(1),o=0;o<a.length;){if((i=(n=a[o])?n+r:t)in e)return i;o++}}var D=1;function O(e){var n=e.ownerDocument||e;return n.defaultView||n.parentWindow||t}var I="ontouchstart"in t,N=void 0!==R(t,"PointerEvent"),A=I&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),M=["x","y"],z=["clientX","clientY"];function L(e,t){var n=this;this.manager=e,this.callback=t,this.element=e.element,this.target=e.options.inputTarget,this.domHandler=function(t){_(e.options.enable,[e])&&n.handler(t)},this.init()}function F(e,t,n){var i=n.pointers.length,r=n.changedPointers.length,o=1&t&&i-r==0,a=12&t&&i-r==0;n.isFirst=!!o,n.isFinal=!!a,o&&(e.session={}),n.eventType=t,function(e,t){var n=e.session,i=t.pointers,r=i.length;n.firstInput||(n.firstInput=j(t));r>1&&!n.firstMultiple?n.firstMultiple=j(t):1===r&&(n.firstMultiple=!1);var o=n.firstInput,a=n.firstMultiple,l=a?a.center:o.center,s=t.center=H(i);t.timeStamp=c(),t.deltaTime=t.timeStamp-o.timeStamp,t.angle=V(l,s),t.distance=B(l,s),function(e,t){var n=t.center,i=e.offsetDelta||{},r=e.prevDelta||{},o=e.prevInput||{};1!==t.eventType&&4!==o.eventType||(r=e.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=e.offsetDelta={x:n.x,y:n.y});t.deltaX=r.x+(n.x-i.x),t.deltaY=r.y+(n.y-i.y)}(n,t),t.offsetDirection=W(t.deltaX,t.deltaY);var f=U(t.deltaTime,t.deltaX,t.deltaY);t.overallVelocityX=f.x,t.overallVelocityY=f.y,t.overallVelocity=u(f.x)>u(f.y)?f.x:f.y,t.scale=a?(d=a.pointers,h=i,B(h[0],h[1],z)/B(d[0],d[1],z)):1,t.rotation=a?function(e,t){return V(t[1],t[0],z)+V(e[1],e[0],z)}(a.pointers,i):0,t.maxPointers=n.prevInput?t.pointers.length>n.prevInput.maxPointers?t.pointers.length:n.prevInput.maxPointers:t.pointers.length,function(e,t){var n,i,r,o,a=e.lastInterval||t,l=t.timeStamp-a.timeStamp;if(8!=t.eventType&&(l>25||void 0===a.velocity)){var s=t.deltaX-a.deltaX,c=t.deltaY-a.deltaY,f=U(l,s,c);i=f.x,r=f.y,n=u(f.x)>u(f.y)?f.x:f.y,o=W(s,c),e.lastInterval=t}else n=a.velocity,i=a.velocityX,r=a.velocityY,o=a.direction;t.velocity=n,t.velocityX=i,t.velocityY=r,t.direction=o}(n,t);var d,h;var p=e.element;E(t.srcEvent.target,p)&&(p=t.srcEvent.target);t.target=p}(e,n),e.emit("hammer.input",n),e.recognize(n),e.session.prevInput=n}function j(e){for(var t=[],n=0;n<e.pointers.length;)t[n]={clientX:s(e.pointers[n].clientX),clientY:s(e.pointers[n].clientY)},n++;return{timeStamp:c(),pointers:t,center:H(t),deltaX:e.deltaX,deltaY:e.deltaY}}function H(e){var t=e.length;if(1===t)return{x:s(e[0].clientX),y:s(e[0].clientY)};for(var n=0,i=0,r=0;r<t;)n+=e[r].clientX,i+=e[r].clientY,r++;return{x:s(n/t),y:s(i/t)}}function U(e,t,n){return{x:t/e||0,y:n/e||0}}function W(e,t){return e===t?1:u(e)>=u(t)?e<0?2:4:t<0?8:16}function B(e,t,n){n||(n=M);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return Math.sqrt(i*i+r*r)}function V(e,t,n){n||(n=M);var i=t[n[0]]-e[n[0]],r=t[n[1]]-e[n[1]];return 180*Math.atan2(r,i)/Math.PI}L.prototype={handler:function(){},init:function(){this.evEl&&w(this.element,this.evEl,this.domHandler),this.evTarget&&w(this.target,this.evTarget,this.domHandler),this.evWin&&w(O(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&k(this.element,this.evEl,this.domHandler),this.evTarget&&k(this.target,this.evTarget,this.domHandler),this.evWin&&k(O(this.element),this.evWin,this.domHandler)}};var Y={mousedown:1,mousemove:2,mouseup:4};function G(){this.evEl="mousedown",this.evWin="mousemove mouseup",this.pressed=!1,L.apply(this,arguments)}v(G,L,{handler:function(e){var t=Y[e.type];1&t&&0===e.button&&(this.pressed=!0),2&t&&1!==e.which&&(t=4),this.pressed&&(4&t&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:"mouse",srcEvent:e}))}});var q={pointerdown:1,pointermove:2,pointerup:4,pointercancel:8,pointerout:8},X={2:"touch",3:"pen",4:"mouse",5:"kinect"},Q="pointerdown",$="pointermove pointerup pointercancel";function K(){this.evEl=Q,this.evWin=$,L.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}t.MSPointerEvent&&!t.PointerEvent&&(Q="MSPointerDown",$="MSPointerMove MSPointerUp MSPointerCancel"),v(K,L,{handler:function(e){var t=this.store,n=!1,i=e.type.toLowerCase().replace("ms",""),r=q[i],o=X[e.pointerType]||e.pointerType,a="touch"==o,l=x(t,e.pointerId,"pointerId");1&r&&(0===e.button||a)?l<0&&(t.push(e),l=t.length-1):12&r&&(n=!0),l<0||(t[l]=e,this.callback(this.manager,r,{pointers:t,changedPointers:[e],pointerType:o,srcEvent:e}),n&&t.splice(l,1))}});var J={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function Z(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,L.apply(this,arguments)}function ee(e,t){var n=C(e.touches),i=C(e.changedTouches);return 12&t&&(n=P(n.concat(i),"identifier",!0)),[n,i]}v(Z,L,{handler:function(e){var t=J[e.type];if(1===t&&(this.started=!0),this.started){var n=ee.call(this,e,t);12&t&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}}});var te={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function ne(){this.evTarget="touchstart touchmove touchend touchcancel",this.targetIds={},L.apply(this,arguments)}function ie(e,t){var n=C(e.touches),i=this.targetIds;if(3&t&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,o,a=C(e.changedTouches),l=[],s=this.target;if(o=n.filter((function(e){return E(e.target,s)})),1===t)for(r=0;r<o.length;)i[o[r].identifier]=!0,r++;for(r=0;r<a.length;)i[a[r].identifier]&&l.push(a[r]),12&t&&delete i[a[r].identifier],r++;return l.length?[P(o.concat(l),"identifier",!0),l]:void 0}v(ne,L,{handler:function(e){var t=te[e.type],n=ie.call(this,e,t);n&&this.callback(this.manager,t,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:e})}});function re(){L.apply(this,arguments);var e=y(this.handler,this);this.touch=new ne(this.manager,e),this.mouse=new G(this.manager,e),this.primaryTouch=null,this.lastTouches=[]}function oe(e,t){1&e?(this.primaryTouch=t.changedPointers[0].identifier,ae.call(this,t)):12&e&&ae.call(this,t)}function ae(e){var t=e.changedPointers[0];if(t.identifier===this.primaryTouch){var n={x:t.clientX,y:t.clientY};this.lastTouches.push(n);var i=this.lastTouches;setTimeout((function(){var e=i.indexOf(n);e>-1&&i.splice(e,1)}),2500)}}function le(e){for(var t=e.srcEvent.clientX,n=e.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],o=Math.abs(t-r.x),a=Math.abs(n-r.y);if(o<=25&&a<=25)return!0}return!1}v(re,L,{handler:function(e,t,n){var i="touch"==n.pointerType,r="mouse"==n.pointerType;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)oe.call(this,t,n);else if(r&&le.call(this,n))return;this.callback(e,t,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var se=R(l.style,"touchAction"),ue=void 0!==se,ce=function(){if(!ue)return!1;var e={},n=t.CSS&&t.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(i){e[i]=!n||t.CSS.supports("touch-action",i)})),e}();function fe(e,t){this.manager=e,this.set(t)}fe.prototype={set:function(e){"compute"==e&&(e=this.compute()),ue&&this.manager.element.style&&ce[e]&&(this.manager.element.style[se]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var e=[];return h(this.manager.recognizers,(function(t){_(t.options.enable,[t])&&(e=e.concat(t.getTouchAction()))})),function(e){if(T(e,"none"))return"none";var t=T(e,"pan-x"),n=T(e,"pan-y");if(t&&n)return"none";if(t||n)return t?"pan-x":"pan-y";if(T(e,"manipulation"))return"manipulation";return"auto"}(e.join(" "))},preventDefaults:function(e){var t=e.srcEvent,n=e.offsetDirection;if(this.manager.session.prevented)t.preventDefault();else{var i=this.actions,r=T(i,"none")&&!ce.none,o=T(i,"pan-y")&&!ce["pan-y"],a=T(i,"pan-x")&&!ce["pan-x"];if(r){var l=1===e.pointers.length,s=e.distance<2,u=e.deltaTime<250;if(l&&s&&u)return}if(!a||!o)return r||o&&6&n||a&&24&n?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};function de(e){this.options=o({},this.defaults,e||{}),this.id=D++,this.manager=null,this.options.enable=b(this.options.enable,!0),this.state=1,this.simultaneous={},this.requireFail=[]}function he(e){return 16&e?"cancel":8&e?"end":4&e?"move":2&e?"start":""}function pe(e){return 16==e?"down":8==e?"up":2==e?"left":4==e?"right":""}function me(e,t){var n=t.manager;return n?n.get(e):e}function ge(){de.apply(this,arguments)}function ve(){ge.apply(this,arguments),this.pX=null,this.pY=null}function ye(){ge.apply(this,arguments)}function _e(){de.apply(this,arguments),this._timer=null,this._input=null}function be(){ge.apply(this,arguments)}function we(){ge.apply(this,arguments)}function ke(){de.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function Ee(e,t){return(t=t||{}).recognizers=b(t.recognizers,Ee.defaults.preset),new Te(e,t)}de.prototype={defaults:{},set:function(e){return o(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(d(e,"recognizeWith",this))return this;var t=this.simultaneous;return t[(e=me(e,this)).id]||(t[e.id]=e,e.recognizeWith(this)),this},dropRecognizeWith:function(e){return d(e,"dropRecognizeWith",this)||(e=me(e,this),delete this.simultaneous[e.id]),this},requireFailure:function(e){if(d(e,"requireFailure",this))return this;var t=this.requireFail;return-1===x(t,e=me(e,this))&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(d(e,"dropRequireFailure",this))return this;e=me(e,this);var t=x(this.requireFail,e);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(e){var t=this,n=this.state;function i(n){t.manager.emit(n,e)}n<8&&i(t.options.event+he(n)),i(t.options.event),e.additionalEvent&&i(e.additionalEvent),n>=8&&i(t.options.event+he(n))},tryEmit:function(e){if(this.canEmit())return this.emit(e);this.state=32},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(33&this.requireFail[e].state))return!1;e++}return!0},recognize:function(e){var t=o({},e);if(!_(this.options.enable,[this,t]))return this.reset(),void(this.state=32);56&this.state&&(this.state=1),this.state=this.process(t),30&this.state&&this.tryEmit(t)},process:function(e){},getTouchAction:function(){},reset:function(){}},v(ge,de,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,n=e.eventType,i=6&t,r=this.attrTest(e);return i&&(8&n||!r)?16|t:i||r?4&n?8|t:2&t?4|t:2:32}}),v(ve,ge,{defaults:{event:"pan",threshold:10,pointers:1,direction:30},getTouchAction:function(){var e=this.options.direction,t=[];return 6&e&&t.push("pan-y"),24&e&&t.push("pan-x"),t},directionTest:function(e){var t=this.options,n=!0,i=e.distance,r=e.direction,o=e.deltaX,a=e.deltaY;return r&t.direction||(6&t.direction?(r=0===o?1:o<0?2:4,n=o!=this.pX,i=Math.abs(e.deltaX)):(r=0===a?1:a<0?8:16,n=a!=this.pY,i=Math.abs(e.deltaY))),e.direction=r,n&&i>t.threshold&&r&t.direction},attrTest:function(e){return ge.prototype.attrTest.call(this,e)&&(2&this.state||!(2&this.state)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=pe(e.direction);t&&(e.additionalEvent=this.options.event+t),this._super.emit.call(this,e)}}),v(ye,ge,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||2&this.state)},emit:function(e){if(1!==e.scale){var t=e.scale<1?"in":"out";e.additionalEvent=this.options.event+t}this._super.emit.call(this,e)}}),v(_e,de,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return["auto"]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,r=e.deltaTime>t.time;if(this._input=e,!i||!n||12&e.eventType&&!r)this.reset();else if(1&e.eventType)this.reset(),this._timer=f((function(){this.state=8,this.tryEmit()}),t.time,this);else if(4&e.eventType)return 8;return 32},reset:function(){clearTimeout(this._timer)},emit:function(e){8===this.state&&(e&&4&e.eventType?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=c(),this.manager.emit(this.options.event,this._input)))}}),v(be,ge,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||2&this.state)}}),v(we,ge,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:30,pointers:1},getTouchAction:function(){return ve.prototype.getTouchAction.call(this)},attrTest:function(e){var t,n=this.options.direction;return 30&n?t=e.overallVelocity:6&n?t=e.overallVelocityX:24&n&&(t=e.overallVelocityY),this._super.attrTest.call(this,e)&&n&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers==this.options.pointers&&u(t)>this.options.velocity&&4&e.eventType},emit:function(e){var t=pe(e.offsetDirection);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),v(ke,de,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return["manipulation"]},process:function(e){var t=this.options,n=e.pointers.length===t.pointers,i=e.distance<t.threshold,r=e.deltaTime<t.time;if(this.reset(),1&e.eventType&&0===this.count)return this.failTimeout();if(i&&r&&n){if(4!=e.eventType)return this.failTimeout();var o=!this.pTime||e.timeStamp-this.pTime<t.interval,a=!this.pCenter||B(this.pCenter,e.center)<t.posThreshold;if(this.pTime=e.timeStamp,this.pCenter=e.center,a&&o?this.count+=1:this.count=1,this._input=e,0===this.count%t.taps)return this.hasRequireFailures()?(this._timer=f((function(){this.state=8,this.tryEmit()}),t.interval,this),2):8}return 32},failTimeout:function(){return this._timer=f((function(){this.state=32}),this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),Ee.VERSION="2.0.7",Ee.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[be,{enable:!1}],[ye,{enable:!1},["rotate"]],[we,{direction:6}],[ve,{direction:6},["swipe"]],[ke],[ke,{event:"doubletap",taps:2},["tap"]],[_e]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function Te(e,t){var n;this.options=o({},Ee.defaults,t||{}),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=e,this.input=new((n=this).options.inputClass||(N?K:A?ne:I?re:G))(n,F),this.touchAction=new fe(this,this.options.touchAction),Se(this,!0),h(this.options.recognizers,(function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])}),this)}function Se(e,t){var n,i=e.element;i.style&&(h(e.options.cssProps,(function(r,o){n=R(i.style,o),t?(e.oldCssProps[n]=i.style[n],i.style[n]=r):i.style[n]=e.oldCssProps[n]||""})),t||(e.oldCssProps={}))}Te.prototype={set:function(e){return o(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?2:1},recognize:function(e){var t=this.session;if(!t.stopped){var n;this.touchAction.preventDefaults(e);var i=this.recognizers,r=t.curRecognizer;(!r||r&&8&r.state)&&(r=t.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],2===t.stopped||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(e),!r&&14&n.state&&(r=t.curRecognizer=n),o++}},get:function(e){if(e instanceof de)return e;for(var t=this.recognizers,n=0;n<t.length;n++)if(t[n].options.event==e)return t[n];return null},add:function(e){if(d(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),e.manager=this,this.touchAction.update(),e},remove:function(e){if(d(e,"remove",this))return this;if(e=this.get(e)){var t=this.recognizers,n=x(t,e);-1!==n&&(t.splice(n,1),this.touchAction.update())}return this},on:function(e,t){if(void 0!==e&&void 0!==t){var n=this.handlers;return h(S(e),(function(e){n[e]=n[e]||[],n[e].push(t)})),this}},off:function(e,t){if(void 0!==e){var n=this.handlers;return h(S(e),(function(e){t?n[e]&&n[e].splice(x(n[e],t),1):delete n[e]})),this}},emit:function(e,t){this.options.domEvents&&function(e,t){var i=n.createEvent("Event");i.initEvent(e,!0,!0),i.gesture=t,t.target.dispatchEvent(i)}(e,t);var i=this.handlers[e]&&this.handlers[e].slice();if(i&&i.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var r=0;r<i.length;)i[r](t),r++}},destroy:function(){this.element&&Se(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},o(Ee,{INPUT_START:1,INPUT_MOVE:2,INPUT_END:4,INPUT_CANCEL:8,STATE_POSSIBLE:1,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:32,DIRECTION_NONE:1,DIRECTION_LEFT:2,DIRECTION_RIGHT:4,DIRECTION_UP:8,DIRECTION_DOWN:16,DIRECTION_HORIZONTAL:6,DIRECTION_VERTICAL:24,DIRECTION_ALL:30,Manager:Te,Input:L,TouchAction:fe,TouchInput:ne,MouseInput:G,PointerEventInput:K,TouchMouseInput:re,SingleTouchInput:Z,Recognizer:de,AttrRecognizer:ge,Tap:ke,Pan:ve,Swipe:we,Pinch:ye,Rotate:be,Press:_e,on:w,off:k,each:h,merge:g,extend:m,assign:o,inherit:v,bindFn:y,prefixed:R}),(void 0!==t?t:"undefined"!=typeof self?self:{}).Hammer=Ee,e.exports?e.exports=Ee:t.Hammer=Ee}(window,document)}));var U=(window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,16)}).bind(window),W=new(function(e){function t(){x(this,t);var e=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._nextTick=null,e._queue=[],e._reads={},e._writes={},e._batch=[],e._batchReads={},e._batchWrites={},e._flush=e._flush.bind(e),e}return P(t,e),C(t,[{key:"add",value:function(e,t,n,i){var r=this._queue.indexOf(e);r>-1&&(this._queue[r]=void 0),i?this._queue.unshift(e):this._queue.push(e),this._reads[e]=t,this._writes[e]=n,this._nextTick||(this._nextTick=U(this._flush))}},{key:"cancel",value:function(e){var t=this._queue.indexOf(e);t>-1&&(this._queue[t]=void 0,this._reads[e]=void 0,this._writes[e]=void 0)}},{key:"_flush",value:function(){var e=this._queue,t=this._reads,n=this._writes,i=this._batch,r=this._batchReads,o=this._batchWrites,a=e.length,l=void 0,s=void 0;for(this._nextTick=null,s=0;s<a;s++)(l=e[s])&&(i.push(l),r[l]=t[l],t[l]=void 0,o[l]=n[l],n[l]=void 0);for(e.length=0,s=0;s<a;s++)r[l=i[s]]&&(r[l](),r[l]=void 0);for(s=0;s<a;s++)o[l=i[s]]&&(o[l](),o[l]=void 0);i.length=0,!this._nextTick&&e.length&&(this._nextTick=U(this._flush))}}]),t}(r.Component));function B(e){return W.cancel(e+"layout")}function V(e){return W.cancel(e+"visibility")}function Y(e){return W.cancel(e+"move")}function G(e){return W.cancel(e+"scroll")}var q=Element.prototype,X=q.matches||q.matchesSelector||q.webkitMatchesSelector||q.mozMatchesSelector||q.msMatchesSelector||q.oMatchesSelector;function Q(e,t){return X.call(e,t)}var $="classList"in Element.prototype?function(e,t){e.classList.add(t)}:function(e,t){Q(e,"."+t)||(e.className+=" "+t)};function K(e,t,n){var i=e.length,r=Math.max(0,n?i:i-1);return t>r?r:t<0?Math.max(r+t+1,0):t}function J(e,t,n){if(!(e.length<2)){var i=K(e,t),r=K(e,n);i!==r&&e.splice(r,0,e.splice(i,1)[0])}}function Z(e,t,n){if(!(e.length<2)){var i=K(e,t),r=K(e,n),o=void 0;i!==r&&(o=e[i],e[i]=e[r],e[r]=o)}}function ee(e,t){var n=void 0;return t>0?function(i){void 0!==n&&(n=window.clearTimeout(n),"finish"===i&&e()),"cancel"!==i&&"finish"!==i&&(n=window.setTimeout((function(){n=void 0,e()}),t))}:function(t){"cancel"!==t&&e()}}function te(e){var t=M(e,"transform");if(!t||"none"===t)return!1;var n=M(e,"display");return"inline"!==n&&"none"!==n}function ne(e,t){for(var n=(t?e:e.parentElement)||document;n&&n!==document&&"static"===M(n,"position")&&!te(n);)n=n.parentElement||document;return n}function ie(e,t){return parseFloat(M(e,t))||0}var re={},oe={},ae={};function le(e,t){var n,i=t||{};return i.left=0,i.top=0,e===document?i:(i.left=window.pageXOffset||0,i.top=window.pageYOffset||0,e.self===window.self||(n=e.getBoundingClientRect(),i.left+=n.left,i.top+=n.top,i.left+=ie(e,"border-left-width"),i.top+=ie(e,"border-top-width")),i)}function se(e,t,n){return ae.left=0,ae.top=0,e===t||n&&(e=ne(e,!0))===(t=ne(t,!0))||(le(e,re),le(t,oe),ae.left=oe.left-re.left,ae.top=oe.top-re.top),ae}var ue={};function ce(e){ue.x=0,ue.y=0;var t=M(e,"transform");if(!t)return ue;var n=t.replace("matrix(","").split(",");return ue.x=parseFloat(n[4])||0,ue.y=parseFloat(n[5])||0,ue}function fe(e,t){return"translateX("+e+"px) translateY("+t+"px)"}var de=[];function he(e,t,n){var i="number"==typeof n?n:-1;i<0&&(i=e.length-i+1),e.splice.apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(de.concat(i,0,t))),de.length=0}var pe=Object.prototype.toString;function me(e){return"object"===(void 0===e?"undefined":S(e))&&"[object Object]"===pe.call(e)}var ge,ve,ye,_e,be="classList"in Element.prototype?function(e,t){e.classList.remove(t)}:function(e,t){Q(e,"."+t)&&(e.className=(" "+e.className+" ").replace(" "+t+" "," ").trim())},we=Ce(),ke=function(e){function t(e){x(this,t);var n=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));if(!H)throw new Error("[Muuri] required dependency Hammer is not defined.");null===we&&(we=Ce());var i=n,r=e._element,o=e.getGrid(),a=o._settings,l=void 0,s="function"==typeof a.dragStartPredicate?a.dragStartPredicate:t.defaultStartPredicate,u=0,c=void 0;return n._item=e,n._gridId=o._id,n._hammer=l=new H.Manager(r),n._isDestroyed=!1,n._isMigrating=!1,n._reset(),n._onScroll=n._onScroll.bind(n),n._prepareMove=n._prepareMove.bind(n),n._applyMove=n._applyMove.bind(n),n._prepareScroll=n._prepareScroll.bind(n),n._applyScroll=n._applyScroll.bind(n),n._checkOverlap=n._checkOverlap.bind(n),n._forceResolveStartPredicate=function(e){this._isDestroyed||1!==u||(u=2,this._onStart(e))},n._checkOverlapDebounce=ee(n._checkOverlap,a.dragSortInterval),l.add(new H.Pan({event:"drag",pointers:1,threshold:0,direction:H.DIRECTION_ALL})),l.add(new H.Press({event:"draginit",pointers:1,threshold:1e3,time:0})),me(a.dragHammerSettings)&&l.set(a.dragHammerSettings),l.on("draginit dragstart dragmove",(function(e){0===u&&(u=1),1===u?!0===(c=s(i._item,e))?(u=2,i._onStart(e)):!1===c&&(u=3):2===u&&i._isActive&&i._onMove(e)})).on("dragend dragcancel draginitup",(function(e){var t=2===u;s(i._item,e),u=0,t&&i._isActive&&i._onEnd(e)})),r.addEventListener("dragstart",Ee,!1),n}return P(t,e),C(t,[{key:"stop",value:function(){var e=this._item,t=e._element,n=this._getGrid();return this._isActive?this._isMigrating?(this._finishMigration(),this):(Y(e._id),G(e._id),this._unbindScrollListeners(),this._checkOverlapDebounce("cancel"),t.parentNode!==n._element&&(n._element.appendChild(t),t.style[N]=fe(this._gridX,this._gridY)),be(t,n._settings.itemDraggingClass),this._reset(),this):this}},{key:"destroy",value:function(){return this._isDestroyed||(this.stop(),this._hammer.destroy(),this._item._element.removeEventListener("dragstart",Ee,!1),this._isDestroyed=!0),this}},{key:"_getGrid",value:function(){return T[this._gridId]||null}},{key:"_reset",value:function(){this._isActive=!1,this._container=null,this._containingBlock=null,this._lastEvent=null,this._lastScrollEvent=null,this._scrollers=[],this._left=0,this._top=0,this._gridX=0,this._gridY=0,this._elementClientX=0,this._elementClientY=0,this._containerDiffX=0,this._containerDiffY=0}},{key:"_bindScrollListeners",value:function(){var e=this._getGrid()._element,t=this._container,n=this._scrollers,i=void 0,r=void 0;if(n.length=0,Se(this._item._element,n),t!==e)for(Se(e,i=[]),i.push(e),r=0;r<i.length;r++)n.includes(i[r])||n.push(i[r]);for(r=0;r<n.length;r++)n[r].addEventListener("scroll",this._onScroll)}},{key:"_unbindScrollListeners",value:function(){var e=this._scrollers,t=void 0;for(t=0;t<e.length;t++)e[t].removeEventListener("scroll",this._onScroll);e.length=0}},{key:"_setupStartPredicate",value:function(e){var t=e||this._getGrid()._settings.dragStartPredicate||0;return this._startPredicateData={distance:Math.abs(t.distance)||0,delay:Math.max(t.delay,0)||0,handle:"string"==typeof t.handle&&t.handle}}},{key:"_getStartPredicateHandle",value:function(e){var t=this._startPredicateData,n=this._item._element,i=n;if(!t.handle)return i;for(i=(e.changedPointers[0]||0).target;i&&!Q(i,t.handle);)i=i!==n?i.parentElement:null;return i||null}},{key:"_resolveStartPredicate",value:function(e){var t,n,i,r,o,a=this._startPredicateData,l=e.changedPointers[0],s=l&&l.pageX||0,u=l&&l.pageY||0;if(!(e.distance<a.distance||a.delay))return n=(t=a.handleElement.getBoundingClientRect()).left+(window.pageXOffset||0),i=t.top+(window.pageYOffset||0),r=t.width,o=t.height,this._resetStartPredicate(),r&&o&&s>=n&&s<n+r&&u>=i&&u<i+o}},{key:"_finishStartPredicate",value:function(e){var t=this._item._element;this._resetStartPredicate(),function(e){return Math.abs(e.deltaX)<2&&Math.abs(e.deltaY)<2&&e.deltaTime<200}(e)&&function(e){if("a"!==e.tagName.toLowerCase())return;var t=e.getAttribute("href");if(!t)return;var n=e.getAttribute("target");n&&"_self"!==n?window.open(t,n):window.location.href=t}(t)}},{key:"_resetStartPredicate",value:function(){var e=this._startPredicateData;e&&(e.delayTimer&&(e.delayTimer=window.clearTimeout(e.delayTimer)),this._startPredicateData=null)}},{key:"_checkOverlap",value:function(){if(this._isActive){var e,n,i,r,o=this._item,a=this._getGrid()._settings,l=void 0,s=void 0,u=void 0;(l="function"==typeof a.dragSortPredicate?a.dragSortPredicate(o,this._lastEvent):t.defaultSortPredicate(o,a.dragSortPredicate))&&"number"==typeof l.index&&(r=(s=o.getGrid())!==(u=l.grid||s),e=s._items.indexOf(o),n=K(u._items,l.index,r),i="swap"===l.action?"swap":"move",r?(s._hasListeners("beforeSend")&&s._emit("beforeSend",{item:o,fromGrid:s,fromIndex:e,toGrid:u,toIndex:n}),u._hasListeners("beforeReceive")&&u._emit("beforeReceive",{item:o,fromGrid:s,fromIndex:e,toGrid:u,toIndex:n}),o._gridId=u._id,this._isMigrating=o._gridId!==this._gridId,s._items.splice(e,1),he(u._items,o,n),o._sortData=null,s._hasListeners("send")&&s._emit("send",{item:o,fromGrid:s,fromIndex:e,toGrid:u,toIndex:n}),u._hasListeners("receive")&&u._emit("receive",{item:o,fromGrid:s,fromIndex:e,toGrid:u,toIndex:n}),s.layout(),u.layout()):e!==n&&(("swap"===i?Z:J)(s._items,e,n),s._hasListeners("move")&&s._emit("move",{item:o,fromIndex:e,toIndex:n,action:i}),s.layout()))}}},{key:"_finishMigration",value:function(){var e=this._item,n=e._release,i=e._element,r=e._isActive,o=e.getGrid(),a=o._element,l=o._settings,s=l.dragContainer||a,u=this._getGrid()._settings,c=i.parentNode,f=void 0,d=void 0;this._isMigrating=!1,this.destroy(),be(i,u.itemClass),be(i,u.itemVisibleClass),be(i,u.itemHiddenClass),$(i,l.itemClass),$(i,r?l.itemVisibleClass:l.itemHiddenClass),s!==c&&(s.appendChild(i),d=se(c,s,!0),(f=ce(i)).x-=d.left,f.y-=d.top),e._refreshDimensions(),e._refreshSortData(),d=se(s,a,!0),n._containerDiffX=d.left,n._containerDiffY=d.top,e._drag=l.dragEnabled?new t(e):null,s!==c&&(i.style[N]=fe(f.x,f.y)),e._child.removeAttribute("style"),F(e._child,r?l.visibleStyles:l.hiddenStyles),n.start()}},{key:"_onStart",value:function(e){var t=this._item;if(t._isActive){var n=t._element,i=this._getGrid(),r=i._settings,o=t._release,a=t._migrate,l=i._element,s=r.dragContainer||l,u=ne(s,!0),c=ce(n),f=c.x,d=c.y,h=n.getBoundingClientRect(),p=s!==l,m=void 0;p&&(m=se(u,l)),t.isPositioning()&&t._layout.stop(!0,{transform:fe(f,d)}),a._isActive&&(f-=a._containerDiffX,d-=a._containerDiffY,a.stop(!0,{transform:fe(f,d)})),t.isReleasing()&&o._reset(),this._isActive=!0,this._lastEvent=e,this._container=s,this._containingBlock=u,this._elementClientX=h.left,this._elementClientY=h.top,this._left=this._gridX=f,this._top=this._gridY=d,i._emit("dragInit",t,e),p&&(this._containerDiffX=m.left,this._containerDiffY=m.top,n.parentNode===s?(this._gridX=f-this._containerDiffX,this._gridY=d-this._containerDiffY):(this._left=f+this._containerDiffX,this._top=d+this._containerDiffY,s.appendChild(n),n.style[N]=fe(this._left,this._top))),$(n,r.itemDraggingClass),this._bindScrollListeners(),i._emit("dragStart",t,e)}}},{key:"_onMove",value:function(e){var t=this._item;if(t._isActive){var n,i,r,o=this._getGrid()._settings.dragAxis,a=e.deltaX-this._lastEvent.deltaX,l=e.deltaY-this._lastEvent.deltaY;this._lastEvent=e,"y"!==o&&(this._left+=a,this._gridX+=a,this._elementClientX+=a),"x"!==o&&(this._top+=l,this._gridY+=l,this._elementClientY+=l),n=t._id,i=this._prepareMove,r=this._applyMove,W.add(n+"move",i,r,!0)}else this.stop()}},{key:"_prepareMove",value:function(){this._item._isActive&&this._getGrid()._settings.dragSort&&this._checkOverlapDebounce()}},{key:"_applyMove",value:function(){var e=this._item;e._isActive&&(e._element.style[N]=fe(this._left,this._top),this._getGrid()._emit("dragMove",e,this._lastEvent))}},{key:"_onScroll",value:function(e){var t,n,i,r=this._item;r._isActive?(this._lastScrollEvent=e,t=r._id,n=this._prepareScroll,i=this._applyScroll,W.add(t+"scroll",n,i,!0)):this.stop()}},{key:"_prepareScroll",value:function(){var e=this._item;if(e._isActive){var t=e._element,n=this._getGrid(),i=n._settings,r=i.dragAxis,o=n._element,a=void 0,l=t.getBoundingClientRect(),s=this._elementClientX-l.left,u=this._elementClientY-l.top;this._container!==o&&(a=se(this._containingBlock,o),this._containerDiffX=a.left,this._containerDiffY=a.top),"y"!==r&&(this._left+=s,this._gridX=this._left-this._containerDiffX),"x"!==r&&(this._top+=u,this._gridY=this._top-this._containerDiffY),i.dragSort&&this._checkOverlapDebounce()}}},{key:"_applyScroll",value:function(){var e=this._item;e._isActive&&(e._element.style[N]=fe(this._left,this._top),this._getGrid()._emit("dragScroll",e,this._lastScrollEvent))}},{key:"_onEnd",value:function(e){var t=this._item,n=t._element,i=this._getGrid(),r=i._settings,o=t._release;t._isActive?(Y(t._id),G(t._id),r.dragSort&&this._checkOverlapDebounce("finish"),this._unbindScrollListeners(),o._containerDiffX=this._containerDiffX,o._containerDiffY=this._containerDiffY,this._reset(),be(n,r.itemDraggingClass),i._emit("dragEnd",t,e),this._isMigrating?this._finishMigration():o.start()):this.stop()}}]),t}(r.Component);function Ee(e){e.preventDefault&&e.preventDefault()}function Te(e,t){return e.left+e.width<=t.left||t.left+t.width<=e.left||e.top+e.height<=t.top||t.top+t.height<=e.top?0:(Math.min(e.left+e.width,t.left+t.width)-Math.max(e.left,t.left))*(Math.min(e.top+e.height,t.top+t.height)-Math.max(e.top,t.top))/(Math.min(e.width,t.width)*Math.min(e.height,t.height))*100}function Se(e,t){var n=t||[],i=e.parentNode;if(we){if("fixed"===M(e,"position"))return n;for(;i&&i!==document&&i!==document.documentElement;)xe(i)&&n.push(i),i="fixed"===M(i,"position")?null:i.parentNode;return null!==i&&n.push(window),n}for(;i&&i!==document;)"fixed"!==M(e,"position")||te(i)?(xe(i)&&n.push(i),e=i,i=i.parentNode):i=i.parentNode;return n[n.length-1]===document.documentElement?n[n.length-1]=window:n.push(window),n}function xe(e){var t=M(e,"overflow");return"auto"===t||"scroll"===t||("auto"===(t=M(e,"overflow-x"))||"scroll"===t||("auto"===(t=M(e,"overflow-y"))||"scroll"===t))}function Ce(){if(!O)return!0;if(!document.body)return null;var e=[0,1].map((function(e,t){return(e=document.createElement("div")).style.position=t?"fixed":"absolute",e.style.display="block",e.style.visibility="hidden",e.style.left=t?"0px":"1px",e.style[N]="none",e})),t=document.body.appendChild(e[0]),n=t.appendChild(e[1]),i=n.getBoundingClientRect().left;t.style[N]="scale(1)";var r=i===n.getBoundingClientRect().left;return document.body.removeChild(t),r}ke.defaultStartPredicate=function(e,t,n){var i=e._drag,r=i._startPredicateData||i._setupStartPredicate(n);if(!t.isFinal)return!(!r.handleElement&&(r.handleElement=i._getStartPredicateHandle(t),!r.handleElement))&&(r.delay&&(r.event=t,r.delayTimer||(r.delayTimer=window.setTimeout((function(){r.delay=0,i._resolveStartPredicate(r.event)&&(i._forceResolveStartPredicate(r.event),i._resetStartPredicate())}),r.delay))),i._resolveStartPredicate(t));i._finishStartPredicate(t)},ke.defaultSortPredicate=(ge={},ve={},ye={},_e=[],function(e,t){var n=e._drag,i=n._getGrid(),r=t&&"number"==typeof t.threshold?t.threshold:50,o=t&&"swap"===t.action?"swap":"move";ge.width=e._width,ge.height=e._height,ge.left=n._elementClientX,ge.top=n._elementClientY;var a=function(e,t,n){var i=null,r=t._settings.dragSort,o=-1,a=void 0,l=void 0,s=void 0,u=void 0;if(!0===r?(_e[0]=t,l=_e):l=r.call(t,e),!Array.isArray(l))return i;for(u=0;u<l.length;u++)(s=l[u])._isDestroyed||(s._updateBoundingRect(),ve.width=s._width,ve.height=s._height,ve.left=s._left,ve.top=s._top,(a=Te(ge,ve))>n&&a>o&&(o=a,i=s));return _e.length=0,i}(e,i,r);if(!a)return!1;var l=0,s=0,u=-1,c=void 0,f=void 0,d=void 0,h=void 0,p=void 0;for(a===i?(ge.left=n._gridX+e._marginLeft,ge.top=n._gridY+e._marginTop):(a._updateBorders(1,0,1,0),l=a._left+a._borderLeft,s=a._top+a._borderTop),p=0;p<a._items.length;p++)(d=a._items[p])._isActive&&d!==e&&(f=!0,ve.width=d._width,ve.height=d._height,ve.left=d._left+d._marginLeft+l,ve.top=d._top+d._marginTop+s,(h=Te(ge,ve))>u&&(c=p,u=h));return u<r&&e.getGrid()!==a&&(c=f?-1:0,u=1/0),u>=r&&(ye.grid=a,ye.index=c,ye.action=o,ye)});var Pe=function(e){function t(){x(this,t);var e=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._queue=[],e._isDestroyed=!1,e}return P(t,e),C(t,[{key:"add",value:function(e){return this._isDestroyed||this._queue.push(e),this}},{key:"flush",value:function(e,t){if(this._isDestroyed)return this;var n=this._queue,i=n.length,r=void 0;if(!i)return this;var o=1===i,a=o?n[0]:n.slice(0);if(n.length=0,o)return a(e,t),this;for(r=0;r<i&&(a[r](e,t),!this._isDestroyed);r++);return this}},{key:"destroy",value:function(){return this._isDestroyed||(this._isDestroyed=!0,this._queue.length=0),this}}]),t}(r.Component),Re=function(e){function t(e){x(this,t);var n=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._item=e,n._isActive=!1,n._isDestroyed=!1,n._isInterrupted=!1,n._currentStyles={},n._targetStyles={},n._currentLeft=0,n._currentTop=0,n._offsetLeft=0,n._offsetTop=0,n._skipNextAnimation=!1,n._animateOptions={onFinish:n._finish.bind(n)},n._queue=new Pe,n._setupAnimation=n._setupAnimation.bind(n),n._startAnimation=n._startAnimation.bind(n),n}return P(t,e),C(t,[{key:"start",value:function(e,t){if(!this._isDestroyed){var n,i,r,o=this._item,a=o._element,l=o._release,s=o.getGrid()._settings,u=this._isActive,c=l._isActive&&!1===l._isPositioningStarted,f=c?s.dragReleaseDuration:s.layoutDuration,d=c?s.dragReleaseEasing:s.layoutEasing,h=!e&&!this._skipNextAnimation&&f>0,p=void 0;return u&&this._queue.flush(!0,o),c&&(l._isPositioningStarted=!0),"function"==typeof t&&this._queue.add(t),h?(this._isActive=!0,this._animateOptions.easing=d,this._animateOptions.duration=f,this._isInterrupted=u,n=o._id,i=this._setupAnimation,r=this._startAnimation,W.add(n+"layout",i,r),this):(this._updateOffsets(),this._updateTargetStyles(),u&&B(o._id),p=o._animate.isAnimating(),this.stop(!1,this._targetStyles),!p&&F(a,this._targetStyles),this._skipNextAnimation=!1,this._finish())}}},{key:"stop",value:function(e,t){if(this._isDestroyed||!this._isActive)return this;var n=this._item;return B(n._id),n._animate.stop(t),be(n._element,n.getGrid()._settings.itemPositioningClass),this._isActive=!1,e&&this._queue.flush(!0,n),this}},{key:"destroy",value:function(){return this._isDestroyed||(this.stop(!0,{}),this._queue.destroy(),this._item=this._currentStyles=this._targetStyles=this._animateOptions=null,this._isDestroyed=!0),this}},{key:"_updateOffsets",value:function(){if(!this._isDestroyed){var e=this._item,t=e._migrate,n=e._release;this._offsetLeft=n._isActive?n._containerDiffX:t._isActive?t._containerDiffX:0,this._offsetTop=n._isActive?n._containerDiffY:t._isActive?t._containerDiffY:0}}},{key:"_updateTargetStyles",value:function(){if(!this._isDestroyed){var e=this._item;this._targetStyles.transform=fe(e._left+this._offsetLeft,e._top+this._offsetTop)}}},{key:"_finish",value:function(){if(!this._isDestroyed){var e=this._item,t=e._migrate,n=e._release;this._isActive&&(this._isActive=!1,be(e._element,e.getGrid()._settings.itemPositioningClass)),n._isActive&&n.stop(),t._isActive&&t.stop(),this._queue.flush(!1,e)}}},{key:"_setupAnimation",value:function(){var e=ce(this._item._element);this._currentLeft=e.x,this._currentTop=e.y}},{key:"_startAnimation",value:function(){var e=this._item,t=e._element,n=e.getGrid()._settings;if(this._updateOffsets(),this._updateTargetStyles(),e._left===this._currentLeft-this._offsetLeft&&e._top===this._currentTop-this._offsetTop)return this._isInterrupted&&this.stop(!1,this._targetStyles),this._isActive=!1,void this._finish();!this._isInterrupted&&$(t,n.itemPositioningClass),this._currentStyles.transform=fe(this._currentLeft,this._currentTop),e._animate.start(this._currentStyles,this._targetStyles,this._animateOptions)}}]),t}(r.Component),De={},Oe=function(e){function t(e){x(this,t);var n=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._item=e,n._isActive=!1,n._isDestroyed=!1,n._container=!1,n._containerDiffX=0,n._containerDiffY=0,n}return P(t,e),C(t,[{key:"start",value:function(e,t,n){if(this._isDestroyed)return this;var i,r,o=this._item,a=o._element,l=o.isVisible(),s=o.getGrid(),u=s._settings,c=e._settings,f=e._element,d=e._items,h=s._items.indexOf(o),p=n||document.body,m=void 0,g=void 0,v=void 0,y=void 0,_=void 0,b=void 0;if("number"==typeof t)m=K(d,t,!0);else{if(!(g=e._getItem(t)))return this;m=d.indexOf(g)}return(o.isPositioning()||this._isActive||o.isReleasing())&&(_=(y=ce(a)).x,b=y.y),o.isPositioning()&&o._layout.stop(!0,{transform:fe(_,b)}),this._isActive&&(_-=this._containerDiffX,b-=this._containerDiffY,this.stop(!0,{transform:fe(_,b)})),o.isReleasing()&&(_-=o._release._containerDiffX,b-=o._release._containerDiffY,o._release.stop(!0,{transform:fe(_,b)})),o._visibility._stopAnimation(),o._drag&&o._drag.destroy(),o._visibility._queue.flush(!0,o),s._hasListeners("beforeSend")&&s._emit("beforeSend",{item:o,fromGrid:s,fromIndex:h,toGrid:e,toIndex:m}),e._hasListeners("beforeReceive")&&e._emit("beforeReceive",{item:o,fromGrid:s,fromIndex:h,toGrid:e,toIndex:m}),be(a,u.itemClass),be(a,u.itemVisibleClass),be(a,u.itemHiddenClass),$(a,c.itemClass),$(a,l?c.itemVisibleClass:c.itemHiddenClass),s._items.splice(h,1),he(d,o,m),o._gridId=e._id,p!==(i=a.parentNode)&&(p.appendChild(a),v=se(p,i,!0),y||(_=(y=ce(a)).x,b=y.y),a.style[N]=fe(_+v.left,b+v.top)),o._child.removeAttribute("style"),F(o._child,l?c.visibleStyles:c.hiddenStyles),a.style.display=l?"block":"hidden",r=se(p,f,!0),o._refreshDimensions(),o._refreshSortData(),o._drag=c.dragEnabled?new ke(o):null,this._isActive=!0,this._container=p,this._containerDiffX=r.left,this._containerDiffY=r.top,s._hasListeners("send")&&s._emit("send",{item:o,fromGrid:s,fromIndex:h,toGrid:e,toIndex:m}),e._hasListeners("receive")&&e._emit("receive",{item:o,fromGrid:s,fromIndex:h,toGrid:e,toIndex:m}),this}},{key:"stop",value:function(e,t){if(this._isDestroyed||!this._isActive)return this;var n=this._item,i=n._element,r=n.getGrid()._element,o=void 0;return this._container!==r&&(t||(e?(o=ce(i),De.transform=fe(o.x-this._containerDiffX,o.y-this._containerDiffY)):De.transform=fe(n._left,n._top),t=De),r.appendChild(i),F(i,t)),this._isActive=!1,this._container=null,this._containerDiffX=0,this._containerDiffY=0,this}},{key:"destroy",value:function(){return this._isDestroyed||(this.stop(!0),this._item=null,this._isDestroyed=!0),this}}]),t}(r.Component),Ie={},Ne=function(e){function t(e){x(this,t);var n=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._item=e,n._isActive=!1,n._isDestroyed=!1,n._isPositioningStarted=!1,n._containerDiffX=0,n._containerDiffY=0,n}return P(t,e),C(t,[{key:"start",value:function(){if(this._isDestroyed||this._isActive)return this;var e=this._item,t=e.getGrid();return this._isActive=!0,$(e._element,t._settings.itemReleasingClass),t._emit("dragReleaseStart",e),e._layout.start(!1),this}},{key:"stop",value:function(e,t){if(this._isDestroyed||!this._isActive)return this;var n=this._item,i=n._element,r=n.getGrid(),o=r._element,a=void 0;return this._reset(),i.parentNode!==o&&(t||(e?(a=ce(i),Ie.transform=fe(a.x-this._containerDiffX,a.y-this._containerDiffY)):Ie.transform=fe(n._left,n._top),t=Ie),o.appendChild(i),F(i,t)),e||r._emit("dragReleaseEnd",n),this}},{key:"destroy",value:function(){return this._isDestroyed||(this.stop(!0),this._item=null,this._isDestroyed=!0),this}},{key:"_reset",value:function(){if(!this._isDestroyed){var e=this._item;this._isActive=!1,this._isPositioningStarted=!1,this._containerDiffX=0,this._containerDiffY=0,be(e._element,e.getGrid()._settings.itemReleasingClass)}}}]),t}(r.Component);var Ae=function(e){function t(e){x(this,t);var n=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),i=e._isActive,r=e._element,o=e.getGrid()._settings;return n._item=e,n._isDestroyed=!1,n._isHidden=!i,n._isHiding=!1,n._isShowing=!1,n._queue=new Pe,n._finishShow=n._finishShow.bind(n),n._finishHide=n._finishHide.bind(n),r.style.display=i?"block":"none",$(r,i?o.itemVisibleClass:o.itemHiddenClass),F(e._child,i?o.visibleStyles:o.hiddenStyles),n}return P(t,e),C(t,[{key:"show",value:function(e,t){if(this._isDestroyed)return this;var n=this._item,i=n._element,r=this._queue,o="function"==typeof t?t:null,a=n.getGrid()._settings;return this._isShowing||this._isHidden?this._isShowing&&!e?(o&&r.add(o),this):(this._isShowing||(r.flush(!0,n),be(i,a.itemHiddenClass),$(i,a.itemVisibleClass),this._isHiding||(i.style.display="block")),o&&r.add(o),n._isActive=this._isShowing=!0,this._isHiding=this._isHidden=!1,this._startAnimation(!0,e,this._finishShow),this):(o&&o(!1,n),this)}},{key:"hide",value:function(e,t){if(this._isDestroyed)return this;var n=this._item,i=n._element,r=this._queue,o="function"==typeof t?t:null,a=n.getGrid()._settings;return!this._isHiding&&this._isHidden?(o&&o(!1,n),this):this._isHiding&&!e?(o&&r.add(o),this):(this._isHiding||(r.flush(!0,n),$(i,a.itemHiddenClass),be(i,a.itemVisibleClass)),o&&r.add(o),this._isHidden=this._isHiding=!0,n._isActive=this._isShowing=!1,this._startAnimation(!1,e,this._finishHide),this)}},{key:"destroy",value:function(){if(this._isDestroyed)return this;var e=this._item,t=e._element,n=e.getGrid(),i=this._queue,r=n._settings;return this._stopAnimation({}),i.flush(!0,e).destroy(),be(t,r.itemVisibleClass),be(t,r.itemHiddenClass),this._item=null,this._isHiding=this._isShowing=!1,this._isDestroyed=this._isHidden=!0,this}},{key:"_startAnimation",value:function(e,t,n){if(!this._isDestroyed){var i=this._item,r=i.getGrid()._settings,o=e?r.visibleStyles:r.hiddenStyles,a=parseInt(e?r.showDuration:r.hideDuration)||0,l=(e?r.showEasing:r.hideEasing)||"ease",s=t||a<=0,u=void 0;if(o){if(V(i._id),s)return i._animateChild.isAnimating()?i._animateChild.stop(o):F(i._child,o),void(n&&n());var c,f,d;c=i._id,f=function(){u=function(e,t){var n={};for(var i in t)n[i]=M(e,L(i));return n}(i._child,o)},d=function(){i._animateChild.start(u,o,{duration:a,easing:l,onFinish:n})},W.add(c+"visibility",f,d)}else n&&n()}}},{key:"_stopAnimation",value:function(e){if(!this._isDestroyed){var t=this._item;V(t._id),t._animateChild.stop(e)}}},{key:"_finishShow",value:function(){this._isHidden||(this._isShowing=!1,this._queue.flush(!1,this._item))}},{key:"_finishHide",value:function(){if(this._isHidden){var e=this._item;this._isHiding=!1,Me.transform=fe(0,0),e._layout.stop(!0,Me),e._element.style.display="none",this._queue.flush(!1,e)}}}]),t}(r.Component),Me={},ze=0;function Le(){return++ze}var Fe,je,He,Ue,We=function(){function e(t,n,i){x(this,e);var r=t._settings;this._id=Le(),this._gridId=t._id,this._isDestroyed=!1,this._left=0,this._top=0,this._element=n,this._child=n.children[0],n.parentNode!==t._element&&t._element.appendChild(n),$(n,r.itemClass),"boolean"!=typeof i&&(i="none"!==M(n,"display")),this._isActive=i,n.style.left="0",n.style.top="0",n.style[N]=fe(0,0),this._animate=new j(n),this._animateChild=new j(this._child),this._visibility=new Ae(this),this._layout=new Re(this),this._migrate=new Oe(this),this._release=new Ne(this),this._drag=r.dragEnabled?new ke(this):null,this._refreshDimensions(),this._refreshSortData()}return C(e,[{key:"getGrid",value:function(){return T[this._gridId]}},{key:"getElement",value:function(){return this._element}},{key:"getWidth",value:function(){return this._width}},{key:"getHeight",value:function(){return this._height}},{key:"getMargin",value:function(){return{left:this._marginLeft,right:this._marginRight,top:this._marginTop,bottom:this._marginBottom}}},{key:"getPosition",value:function(){return{left:this._left,top:this._top}}},{key:"isActive",value:function(){return this._isActive}},{key:"isVisible",value:function(){return!!this._visibility&&!this._visibility._isHidden}},{key:"isShowing",value:function(){return!(!this._visibility||!this._visibility._isShowing)}},{key:"isHiding",value:function(){return!(!this._visibility||!this._visibility._isHiding)}},{key:"isPositioning",value:function(){return!(!this._layout||!this._layout._isActive)}},{key:"isDragging",value:function(){return!(!this._drag||!this._drag._isActive)}},{key:"isReleasing",value:function(){return!(!this._release||!this._release._isActive)}},{key:"isDestroyed",value:function(){return this._isDestroyed}},{key:"_refreshDimensions",value:function(){if(!this._isDestroyed&&!this._visibility._isHidden){var e=this._element,t=e.getBoundingClientRect();this._width=t.width,this._height=t.height,this._marginLeft=Math.max(0,ie(e,"margin-left")),this._marginRight=Math.max(0,ie(e,"margin-right")),this._marginTop=Math.max(0,ie(e,"margin-top")),this._marginBottom=Math.max(0,ie(e,"margin-bottom"))}}},{key:"_refreshSortData",value:function(){if(!this._isDestroyed){var e=this._sortData={},t=this.getGrid()._settings.sortData,n=void 0;for(n in t)e[n]=t[n](this,this._element)}}},{key:"_destroy",value:function(e){if(!this._isDestroyed){var t=this._element,n=this.getGrid(),i=n._settings,r=n._items.indexOf(this);this._release.destroy(),this._migrate.destroy(),this._layout.destroy(),this._visibility.destroy(),this._animate.destroy(),this._animateChild.destroy(),this._drag&&this._drag.destroy(),t.removeAttribute("style"),this._child.removeAttribute("style"),be(t,i.itemClass),r>-1&&n._items.splice(r,1),e&&t.parentNode.removeChild(t),this._isActive=!1,this._isDestroyed=!0}}}]),e}(),Be=function(e){function t(){x(this,t);var e=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._slots=[],e._slotSizes=[],e._freeSlots=[],e._newSlots=[],e._rectItem={},e._rectStore=[],e._rectId=0,e._layout={slots:null,setWidth:!1,setHeight:!1,width:!1,height:!1},e._sortRectsLeftTop=e._sortRectsLeftTop.bind(e),e._sortRectsTopLeft=e._sortRectsTopLeft.bind(e),e}return P(t,e),C(t,[{key:"getLayout",value:function(e,t,n,i,r){var o=this._layout,a=!(!r||!r.fillGaps),l=!(!r||!r.horizontal),s=!(!r||!r.alignRight),u=!(!r||!r.alignBottom),c=!(!r||!r.rounding),f=this._slotSizes,d=void 0;if(o.slots=i||this._slots,o.width=l?0:c?Math.round(t):t,o.height=l?c?Math.round(n):n:0,o.setWidth=l,o.setHeight=!l,o.slots.length=0,f.length=0,!e.length)return o;for(d=0;d<e.length;d++)this._addSlot(e[d],l,a,c,s||u);if(s)for(d=0;d<o.slots.length;d+=2)o.slots[d]=o.width-(o.slots[d]+f[d]);if(u)for(d=1;d<o.slots.length;d+=2)o.slots[d]=o.height-(o.slots[d]+f[d]);return f.length=0,this._freeSlots.length=0,this._newSlots.length=0,this._rectId=0,o}},{key:"_addRect",value:function(e,t,n,i){var r=++this._rectId,o=this._rectStore;return o[r]=e||0,o[++this._rectId]=t||0,o[++this._rectId]=n||0,o[++this._rectId]=i||0,r}},{key:"_getRect",value:function(e,t){var n=t||this._rectItem,i=this._rectStore;return n.left=i[e]||0,n.top=i[++e]||0,n.width=i[++e]||0,n.height=i[++e]||0,n}},{key:"_doRectsOverlap",value:function(e,t){return!(e.left+e.width<=t.left||t.left+t.width<=e.left||e.top+e.height<=t.top||t.top+t.height<=e.top)}},{key:"_isRectWithinRect",value:function(e,t){return e.left>=t.left&&e.top>=t.top&&e.left+e.width<=t.left+t.width&&e.top+e.height<=t.top+t.height}}]),t}(r.Component);Be.prototype._addSlot=(Fe={},function(e,t,n,i,r){var o=this._layout,a=this._freeSlots,l=this._newSlots,s=void 0,u=void 0,c=void 0,f=void 0,d=void 0,h=void 0;for(l.length=0,Fe.left=null,Fe.top=null,Fe.width=e._width+e._marginLeft+e._marginRight,Fe.height=e._height+e._marginTop+e._marginBottom,i&&(Fe.width=Math.round(Fe.width),Fe.height=Math.round(Fe.height)),d=0;d<a.length;d++)if((u=a[d])&&(s=this._getRect(u),Fe.width<=s.width+.001&&Fe.height<=s.height+.001)){Fe.left=s.left,Fe.top=s.top;break}for(null===Fe.left&&(Fe.left=t?o.width:0,Fe.top=t?0:o.height,n||(f=!0)),!t&&Fe.top+Fe.height>o.height&&(Fe.left>0&&l.push(this._addRect(0,o.height,Fe.left,1/0)),Fe.left+Fe.width<o.width&&l.push(this._addRect(Fe.left+Fe.width,o.height,o.width-Fe.left-Fe.width,1/0)),o.height=Fe.top+Fe.height),t&&Fe.left+Fe.width>o.width&&(Fe.top>0&&l.push(this._addRect(o.width,0,1/0,Fe.top)),Fe.top+Fe.height<o.height&&l.push(this._addRect(o.width,Fe.top+Fe.height,1/0,o.height-Fe.top-Fe.height)),o.width=Fe.left+Fe.width),d=n?0:f?a.length:d;d<a.length;d++)if(u=a[d])for(s=this._getRect(u),c=this._splitRect(s,Fe),h=0;h<c.length;h++)u=c[h],(s=this._getRect(u)).width>.49&&s.height>.49&&(!t&&s.top<o.height||t&&s.left<o.width)&&l.push(u);l.length&&this._purgeRects(l).sort(t?this._sortRectsLeftTop:this._sortRectsTopLeft),t?o.width=Math.max(o.width,Fe.left+Fe.width):o.height=Math.max(o.height,Fe.top+Fe.height),o.slots.push(Fe.left,Fe.top),r&&this._slotSizes.push(Fe.width,Fe.height),this._freeSlots=l,this._newSlots=a}),Be.prototype._splitRect=(je=[],function(e,t){return je.length=0,this._doRectsOverlap(e,t)?(e.left<t.left&&je.push(this._addRect(e.left,e.top,t.left-e.left,e.height)),e.left+e.width>t.left+t.width&&je.push(this._addRect(t.left+t.width,e.top,e.left+e.width-(t.left+t.width),e.height)),e.top<t.top&&je.push(this._addRect(e.left,e.top,e.width,t.top-e.top)),e.top+e.height>t.top+t.height&&je.push(this._addRect(e.left,t.top+t.height,e.width,e.top+e.height-(t.top+t.height))),je):(je.push(this._addRect(e.left,e.top,e.width,e.height)),je)}),Be.prototype._purgeRects=(He={},Ue={},function(e){for(var t=e.length,n=void 0;t--;)if(n=e.length,e[t])for(this._getRect(e[t],He);n--;)if(e[n]&&t!==n&&this._isRectWithinRect(He,this._getRect(e[n],Ue))){e[t]=0;break}return e}),Be.prototype._sortRectsTopLeft=function(){var e={},t={};return function(n,i){return this._getRect(n,e),this._getRect(i,t),e.top<t.top?-1:e.top>t.top?1:e.left<t.left?-1:e.left>t.left?1:0}}(),Be.prototype._sortRectsLeftTop=function(){var e={},t={};return function(n,i){return this._getRect(n,e),this._getRect(i,t),e.left<t.left?-1:e.left>t.left?1:e.top<t.top?-1:e.top>t.top?1:0}}();function Ve(e){var t=Object.prototype.toString.call(e);return"[object HTMLCollection]"===t||"[object NodeList]"===t}function Ye(e){return Ve(e)?Array.prototype.slice.call(e):Array.prototype.concat(e)}var Ge=new Be;function qe(){}var Xe=function(e){function t(e,n){x(this,t);var i,r=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n)),o=r,a=void 0,l=void 0;if(e=r._element="string"==typeof e?document.querySelector(e):e,!document.body.contains(e))throw new Error("Container element must be an existing DOM element");return"function"!=typeof(a=r._settings=function(e,t){var n=Qe({},e);t&&(n=Qe(n,t));return n.visibleStyles=(t||0).visibleStyles||(e||0).visibleStyles,n.hiddenStyles=(t||0).hiddenStyles||(e||0).hiddenStyles,n}(t.defaultOptions,n)).dragSort&&(a.dragSort=!!a.dragSort),r._id=Le(),T[r._id]=o,r._isDestroyed=!1,r._layout={id:0,items:[],slots:[],setWidth:!1,setHeight:!1,width:0,height:0},r._emitter=new D,$(e,a.containerClass),r._items=[],"string"==typeof(i=a.items)?Ye(e.children).forEach((function(e){("*"===i||Q(e,i))&&o._items.push(new We(o,e))})):(Array.isArray(i)||Ve(i))&&(r._items=Ye(i).map((function(e){return new We(o,e)}))),"number"!=typeof(l=a.layoutOnResize)&&(l=!0===l?0:-1),l>=0&&window.addEventListener("resize",o._resizeHandler=ee((function(){o.refreshItems().layout()}),l)),a.layoutOnInit&&r.layout(!0),r}return P(t,e),C(t,[{key:"on",value:function(e,t){return this._emitter.on(e,t),this}},{key:"once",value:function(e,t){return this._emitter.once(e,t),this}},{key:"off",value:function(e,t){return this._emitter.off(e,t),this}},{key:"getElement",value:function(){return this._element}},{key:"getItems",value:function(e){if(this._isDestroyed||!e&&0!==e)return this._items.slice(0);var t=[],n=Ye(e),i=void 0,r=void 0;for(r=0;r<n.length;r++)(i=this._getItem(n[r]))&&t.push(i);return t}},{key:"refreshItems",value:function(e){if(this._isDestroyed)return this;var t=this.getItems(e),n=void 0;for(n=0;n<t.length;n++)t[n]._refreshDimensions();return this}},{key:"refreshSortData",value:function(e){if(this._isDestroyed)return this;var t=this.getItems(e),n=void 0;for(n=0;n<t.length;n++)t[n]._refreshSortData();return this}},{key:"synchronize",value:function(){if(this._isDestroyed)return this;var e=this._element,t=this._items,n=void 0,i=void 0,r=void 0;if(t.length){for(r=0;r<t.length;r++)(i=t[r]._element).parentNode===e&&(n=n||document.createDocumentFragment()).appendChild(i);n&&e.appendChild(n)}return this._emit("synchronize"),this}},{key:"layout",value:function(e,t){if(this._isDestroyed)return this;var n=this,i=this._element,r=this._updateLayout(),o=r.id,a=r.items.length,l=a,s="function"==typeof e?e:t,u="function"==typeof s,c=u?r.items.slice(0):null,f=void 0,d=void 0,h=void 0;function p(){if(!(--l>0)){var e=n._layout.id!==o;u&&s(e,c),!e&&n._hasListeners("layoutEnd")&&n._emit("layoutEnd",r.items.slice(0))}}if((r.setHeight&&"number"==typeof r.height||r.setWidth&&"number"==typeof r.width)&&(f="border-box"===M(i,"box-sizing")),r.setHeight&&("number"==typeof r.height?i.style.height=(f?r.height+this._borderTop+this._borderBottom:r.height)+"px":i.style.height=r.height),r.setWidth&&("number"==typeof r.width?i.style.width=(f?r.width+this._borderLeft+this._borderRight:r.width)+"px":i.style.width=r.width),this._hasListeners("layoutStart")&&this._emit("layoutStart",r.items.slice(0)),!a)return p(),this;for(h=0;h<a;h++)(d=r.items[h])&&(d._left=r.slots[2*h],d._top=r.slots[2*h+1],d.isDragging()?p():d._layout.start(!0===e,p));return this}},{key:"add",value:function(e,t){if(this._isDestroyed||!e)return[];var n=Ye(e);if(!n.length)return n;var i=t||0,r=i.layout?i.layout:void 0===i.layout,o=this._items,a=!1,l=void 0,s=void 0;for(s=0;s<n.length;s++)l=new We(this,n[s],i.isActive),n[s]=l,l._isActive&&(a=!0,l._layout._skipNextAnimation=!0);return he(o,n,i.index),this._hasListeners("add")&&this._emit("add",n.slice(0)),a&&r&&this.layout("instant"===r,"function"==typeof r?r:void 0),n}},{key:"remove",value:function(e,t){if(this._isDestroyed)return this;var n=t||0,i=n.layout?n.layout:void 0===n.layout,r=!1,o=this.getItems(),a=this.getItems(e),l=[],s=void 0,u=void 0;for(u=0;u<a.length;u++)s=a[u],l.push(o.indexOf(s)),s._isActive&&(r=!0),s._destroy(n.removeElements);return this._hasListeners("remove")&&this._emit("remove",a.slice(0),l),r&&i&&this.layout("instant"===i,"function"==typeof i?i:void 0),a}},{key:"show",value:function(e,t){return this._isDestroyed||this._setItemsVisibility(e,!0,t),this}},{key:"hide",value:function(e,t){return this._isDestroyed||this._setItemsVisibility(e,!1,t),this}},{key:"filter",value:function(e,t){if(this._isDestroyed||!this._items.length)return this;var n=[],i=[],r="string"==typeof e,o="function"==typeof e,a=t||0,l=!0===a.instant,s=a.layout?a.layout:void 0===a.layout,u="function"==typeof a.onFinish?a.onFinish:null,c=-1,f=qe,d=void 0,h=void 0;if(u&&(f=function(){++c&&u(n.slice(0),i.slice(0))}),o||r)for(h=0;h<this._items.length;h++)d=this._items[h],(o?e(d):Q(d._element,e))?n.push(d):i.push(d);return n.length?this.show(n,{instant:l,onFinish:f,layout:!1}):f(),i.length?this.hide(i,{instant:l,onFinish:f,layout:!1}):f(),(n.length||i.length)&&(this._hasListeners("filter")&&this._emit("filter",n.slice(0),i.slice(0)),s&&this.layout("instant"===s,"function"==typeof s?s:void 0)),this}},{key:"move",value:function(e,t,n){if(this._isDestroyed||this._items.length<2)return this;var i=this._items,r=n||0,o=r.layout?r.layout:void 0===r.layout,a="swap"===r.action,l=a?"swap":"move",s=this._getItem(e),u=this._getItem(t),c=void 0,f=void 0;return s&&u&&s!==u&&(c=i.indexOf(s),f=i.indexOf(u),a?Z(i,c,f):J(i,c,f),this._hasListeners("move")&&this._emit("move",{item:s,fromIndex:c,toIndex:f,action:l}),o&&this.layout("instant"===o,"function"==typeof o?o:void 0)),this}},{key:"send",value:function(e,t,n,i){if(this._isDestroyed||t._isDestroyed||this===t)return this;if(!(e=this._getItem(e)))return this;var r=i||0,o=r.appendTo||document.body,a=r.layoutSender?r.layoutSender:void 0===r.layoutSender,l=r.layoutReceiver?r.layoutReceiver:void 0===r.layoutReceiver;return e._migrate.start(t,n,o),e._migrate._isActive&&e._isActive&&(a&&this.layout("instant"===a,"function"==typeof a?a:void 0),l&&t.layout("instant"===l,"function"==typeof l?l:void 0)),this}},{key:"destroy",value:function(e){if(this._isDestroyed)return this;var t=this._element,n=this._items.slice(0),i=void 0;for(this._resizeHandler&&window.removeEventListener("resize",this._resizeHandler),i=0;i<n.length;i++)n[i]._destroy(e);return be(t,this._settings.containerClass),t.style.height="",t.style.width="",this._emit("destroy"),this._emitter.destroy(),T[this._id]=void 0,this._isDestroyed=!0,this}},{key:"_getItem",value:function(e){if(this._isDestroyed||!e&&0!==e)return null;if("number"==typeof e)return this._items[e>-1?e:this._items.length+e]||null;if(e instanceof We)return e._gridId===this._id?e:null;for(var t=0;t<this._items.length;t++)if(this._items[t]._element===e)return this._items[t];return null}},{key:"_updateLayout",value:function(){var e,t,n=this._layout,i=this._settings.layout,r=void 0,o=void 0;for(++n.id,n.items.length=0,o=0;o<this._items.length;o++)this._items[o]._isActive&&n.items.push(this._items[o]);return this._refreshDimensions(),e=this._width-this._borderLeft-this._borderRight,t=this._height-this._borderTop-this._borderBottom,r="function"==typeof i?i(n.items,e,t):Ge.getLayout(n.items,e,t,n.slots,i),n.slots=r.slots,n.setWidth=Boolean(r.setWidth),n.setHeight=Boolean(r.setHeight),n.width=r.width,n.height=r.height,n}},{key:"_emit",value:function(){var e;this._isDestroyed||(e=this._emitter).emit.apply(e,arguments)}},{key:"_hasListeners",value:function(e){var t=this._emitter._events[e];return!(!t||!t.length)}},{key:"_updateBoundingRect",value:function(){var e=this._element.getBoundingClientRect();this._width=e.width,this._height=e.height,this._left=e.left,this._top=e.top}},{key:"_updateBorders",value:function(e,t,n,i){var r=this._element;e&&(this._borderLeft=ie(r,"border-left-width")),t&&(this._borderRight=ie(r,"border-right-width")),n&&(this._borderTop=ie(r,"border-top-width")),i&&(this._borderBottom=ie(r,"border-bottom-width"))}},{key:"_refreshDimensions",value:function(){this._updateBoundingRect(),this._updateBorders(1,1,1,1)}},{key:"_setItemsVisibility",value:function(e,t,n){var i=this,r=this.getItems(e),o=n||0,a=!0===o.instant,l=o.onFinish,s=o.layout?o.layout:void 0===o.layout,u=r.length,c=t?"showStart":"hideStart",f=t?"showEnd":"hideEnd",d=t?"show":"hide",h=!1,p=[],m=[],g=void 0,v=void 0;if(u){for(this._hasListeners(c)&&this._emit(c,r.slice(0)),v=0;v<r.length;v++)g=r[v],(t&&!g._isActive||!t&&g._isActive)&&(h=!0),t&&!g._isActive&&(g._layout._skipNextAnimation=!0),t&&g._visibility._isHidden&&m.push(g),g._visibility[d](a,(function(e,t){e||p.push(t),--u<1&&("function"==typeof l&&l(p.slice(0)),i._hasListeners(f)&&i._emit(f,p.slice(0)))}));m.length&&this.refreshItems(m),h&&s&&this.layout("instant"===s,"function"==typeof s?s:void 0)}else"function"==typeof l&&l(r)}}]),t}(r.Component);function Qe(e,t){var n=Object.keys(t),i=n.length,r=void 0,o=void 0,a=void 0;for(a=0;a<i;a++)r=me(t[o=n[a]]),me(e[o])&&r?e[o]=Qe(Qe({},e[o]),t[o]):r?e[o]=Qe({},t[o]):Array.isArray(t[o])?e[o]=t[o].slice(0):e[o]=t[o];return e}Xe.Item=We,Xe.ItemLayout=Re,Xe.ItemVisibility=Ae,Xe.ItemRelease=Ne,Xe.ItemMigrate=Oe,Xe.ItemAnimate=j,Xe.ItemDrag=ke,Xe.Emitter=D,Xe.defaultOptions={items:"*",showDuration:300,showEasing:"ease",hideDuration:300,hideEasing:"ease",visibleStyles:{opacity:"1",transform:"scale(1)"},hiddenStyles:{opacity:"0",transform:"scale(0.5)"},layout:{fillGaps:!1,horizontal:!1,alignRight:!1,alignBottom:!1,rounding:!0},layoutOnResize:100,layoutOnInit:!0,layoutDuration:300,layoutEasing:"ease",sortData:null,dragEnabled:!1,dragContainer:null,dragStartPredicate:{distance:0,delay:0,handle:!1},dragAxis:null,dragSort:!0,dragSortInterval:100,dragSortPredicate:{threshold:50,action:"move"},dragReleaseDuration:300,dragReleaseEasing:"ease",dragHammerSettings:{touchAction:"none"},containerClass:"muuri",itemClass:"muuri-item",itemVisibleClass:"muuri-item-shown",itemHiddenClass:"muuri-item-hidden",itemPositioningClass:"muuri-item-positioning",itemDraggingClass:"muuri-item-dragging",itemReleasingClass:"muuri-item-releasing"},Xe.prototype.sort=function(){var e=void 0,t=void 0,n=void 0,i=void 0;function r(e){for(var t={},n=0;n<e.length;n++)t[e[n]._id]=n;return t}function o(e,n){var r=i[e._id],o=i[n._id];return t?o-r:r-o}function a(a,l){for(var s=0,u=void 0,c=void 0,f=void 0,d=void 0,h=0;h<e.length;h++)if(u=e[h][0],c=e[h][1],f=(a._sortData?a:a._refreshSortData())._sortData[u],d=(l._sortData?l:l._refreshSortData())._sortData[u],s="desc"===c||!c&&t?d<f?-1:d>f?1:0:f<d?-1:f>d?1:0)return s;return s||(i||(i=r(n)),s=o(a,l)),s}function l(a,l){var s=e(a,l);return t&&s&&(s=-s),s||(i||(i=r(n)),o(a,l))}return function(r,o){if(this._isDestroyed||this._items.length<2)return this;var s=this._items,u=o||0,c=u.layout?u.layout:void 0===u.layout,f=void 0;if(e=r,t=!!u.descending,n=s.slice(0),i=null,"function"==typeof e)s.sort(l);else if("string"==typeof e)e=r.trim().split(" ").map((function(e){return e.split(":")})),s.sort(a);else{if(!Array.isArray(e))return this;if(e.length!==s.length)throw new Error("[Muuri] sort reference items do not match with grid items.");for(f=0;f<s.length;f++){if(!e.includes(s[f]))throw new Error("[Muuri] sort reference items do not match with grid items.");s[f]=e[f]}t&&s.reverse()}return this._hasListeners("sort")&&this._emit("sort",s.slice(0),n),c&&this.layout("instant"===c,"function"==typeof c?c:void 0),this}}();var $e=function(e){function t(e){x(this,t);var n=R(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.grid=new Xe(e.node,e.defaultOptions),n.getMethod=n.getMethod.bind(n),n.getEvent=n.getEvent.bind(n),n.getItemMethod=n.getItemMethod.bind(n),n}return P(t,e),C(t,[{key:"getMethod",value:function(e,t,n,i,r){try{var o=void 0;switch(e){case"getElement":o=this.grid.getElement();break;case"getItems":o=this.grid.getItems(t);break;case"refreshItems":o=this.grid.refreshItems(t);break;case"refreshSortData":o=this.grid.refreshSortData(t);break;case"synchronize":o=this.grid.synchronize();break;case"layout":o=this.grid.layout(t,n);break;case"add":o=this.grid.add(t,n);break;case"remove":o=this.grid.remove(t,n);break;case"show":o=this.grid.show(t,n);break;case"hide":o=this.grid.hide(t,n);break;case"filter":o=this.grid.filter(t,n);break;case"sort":o=this.grid.sort(t,n);break;case"move":o=this.grid.move(t,n,i);break;case"send":o=this.grid.send(t,n,i,r);break;case"on":o=this.grid.on(t,n);break;case"once":o=this.grid.once(t,n);break;case"off":o=this.grid.off(t,n);break;case"destroy":o=this.grid.destroy(t);break;default:o=null,console.error("Invalid 'Method' provided: "+e),console.error("Check the Muuri documentation for a list of valid methods.")}return o}catch(e){console.error("The following error occured in 'getMethod()': "+e)}}},{key:"getEvent",value:function(e,t,n,i){var r=this;if(null==e||-1===["synchronize","layoutStart","layoutEnd","add","remove","showStart","showEnd","hideStart","hideEnd","filter","sort","move","send","beforeSend","receive","beforeReceive","dragInit","dragStart","dragMove","dragScroll","dragEnd","dragReleaseStart","dragReleaseEnd","destroy"].indexOf(e))console.error("Invalid event provided to 'getEvent()': "+e);else try{this.grid.on(e,(function(e,t){i&&i(e,t),r.grid.synchronize()}))}catch(e){console.error("The following error occured in 'getEvent()': "+e)}}},{key:"getItemMethod",value:function(e,t){try{var n=void 0;switch(e){case"getGrid":n=t.getGrid();break;case"getElement":n=t.getElement();break;case"getWidth":n=t.getWidth();break;case"getHeight":n=t.getHeight();break;case"getMargin":n=t.getMargin();break;case"getPosition":n=t.getPosition();break;case"isActive":n=t.isActive();break;case"isVisible":n=t.isVisible();break;case"isShowing":n=t.isShowing();break;case"isHiding":n=t.isHiding();break;case"isPositioning":n=t.isPositioning();break;case"isDragging":n=t.isDragging();break;case"isReleasing":n=t.isReleasing();break;case"isDestroyed":n=t.isDestroyed();break;default:n=null,console.error("Invalid 'Item Event' provided: "+e),console.error("Check the Muuri documentation for a list of valid item events.")}return n}catch(e){console.error("The following error occured in 'getItemMethod()': "+e)}}}]),t}(r.Component);$e.propTypes={node:E.a.node.isRequired,defaultOptions:E.a.object};var Ke=$e,Je=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ze=function(e){function t(t){var n=e.call(this,t)||this;return n.addToGrid=n.addToGrid.bind(n),n.removeFromGrid=n.removeFromGrid.bind(n),n.onResize=n.onResize.bind(n),n.cancelNew=n.cancelNew.bind(n),n.addRecipe=n.addRecipe.bind(n),n.state={addingRecipe:!1},console.log("readyregister"),h.refreshRecipeGrid=n.refreshGrid.bind(n),console.log("didregister"),n}return Je(t,e),t.prototype.componentDidMount=function(){this.grid=new Ke({node:this.gridElement,defaultOptions:{dragEnabled:!0,dragStartPredicate:function(e,t,n){return"cardTitle"===t.target.className&&function(e,t,n){var i=e._drag,r=i._startPredicateData||i._setupStartPredicate(n);if(!t.isFinal)return!(!r.handleElement&&(r.handleElement=i._getStartPredicateHandle(t),!r.handleElement))&&(r.delay&&(r.event=t,r.delayTimer||(r.delayTimer=window.setTimeout((function(){r.delay=0,i._resolveStartPredicate(r.event)&&(i._forceResolveStartPredicate(r.event),i._resetStartPredicate())}),r.delay))),i._resolveStartPredicate(t));i._finishStartPredicate(t)}(e,t,n)}}})},t.prototype.componentWillUnmount=function(){this.grid.getMethod("destroy")},t.prototype.render=function(){var e=this;return o.a.createElement("div",null,o.a.createElement("h1",null,"Your Recipes"),o.a.createElement("div",{ref:function(t){return e.gridElement=t}},this.props.recipes.map((function(t){return e.renderCard(t)})),this.state.addingRecipe&&this.renderNewCard()),this.state.addingRecipe||o.a.createElement("button",{onClick:function(t){return e.setState({addingRecipe:!0})}},"Add Recipe"))},t.prototype.renderCard=function(e){return o.a.createElement(w,{key:e.name,recipeData:e,onMount:this.addToGrid,onUnMount:this.removeFromGrid,editRecipe:this.props.editRecipe,onResize:this.onResize,newRecipe:!1,onDelete:this.props.deleteRecipeFromSvr})},t.prototype.renderNewCard=function(){return o.a.createElement(w,{key:"THE_NEW_RECIPE",recipeData:{name:"",text:""},onMount:this.addToGrid,onUnMount:this.removeFromGrid,editRecipe:this.props.editRecipe,addRecipe:this.addRecipe,onResize:this.onResize,newRecipe:!0,cancelNew:this.cancelNew,onDelete:this.props.deleteRecipeFromSvr})},t.prototype.cancelNew=function(){this.setState({addingRecipe:!1})},t.prototype.addRecipe=function(e){this.setState({addingRecipe:!1}),this.props.addRecipe(e)},t.prototype.addToGrid=function(e){this.grid.getMethod("add",[e],{isActive:!0})},t.prototype.removeFromGrid=function(e){this.grid.getMethod("remove",[e],{removeElements:!1})},t.prototype.onResize=function(e){this.grid.getMethod("refreshItems",[e]),this.grid.getMethod("layout")},t.prototype.refreshGrid=function(){this.grid.getMethod("refreshItems"),this.grid.getMethod("layout"),this.props.fetchRecipes()},t}(r.Component),et=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),tt=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var i=Array(e),r=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,l=o.length;a<l;a++,r++)i[r]=o[a];return i},nt=function(e){function t(t){var n=e.call(this,t)||this;return n.updateRecipes=n.updateRecipes.bind(n),n.reportError=n.reportError.bind(n),n.deleteRecipe=n.deleteRecipe.bind(n),n.editRecipe=n.editRecipe.bind(n),n.addRecipe=n.addRecipe.bind(n),n.fetchRecipes=n.fetchRecipes.bind(n),n.service=c?new u:new m,n.state={recipes:[],error:""},n}return et(t,e),t.prototype.componentDidMount=function(){this.fetchRecipes()},t.prototype.render=function(){var e;return e=o.a.createElement(Ze,{recipes:this.state.recipes,deleteRecipeFromSvr:this.deleteRecipe,editRecipe:this.editRecipe,addRecipe:this.addRecipe,fetchRecipes:this.fetchRecipes}),o.a.createElement("div",null,e,o.a.createElement("div",null,this.state.error))},t.prototype.updateRecipes=function(e){this.setState({recipes:e})},t.prototype.reportError=function(e){this.setState({error:e.message})},t.prototype.deleteRecipe=function(e){var t=this.state.recipes.filter((function(t){return t.name!==e}));t.length!==this.state.recipes.length&&(this.service.deleteRecipe(e).then(this.updateRecipes).catch(this.reportError),this.setState({recipes:t}))},t.prototype.editRecipe=function(e){for(var t=tt(this.state.recipes),n=0;n<t.length;n++)if(t[n].name===e.name){t[n]=e;break}this.service.editRecipe(e.name,e).then(this.updateRecipes).catch(this.reportError),this.setState({recipes:t})},t.prototype.addRecipe=function(e){var t=tt(this.state.recipes);t.push(e),this.service.addRecipe(e.name,e).then(this.updateRecipes).catch(this.reportError),this.setState({recipes:t})},t.prototype.fetchRecipes=function(){this.service.getRecipes().then(this.updateRecipes).catch(this.reportError)},t}(r.Component);Object(a.render)(o.a.createElement(nt,null),document.getElementById("recipeRoot"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,