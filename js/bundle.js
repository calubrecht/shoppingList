!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=5)}([function(t,e){t.exports=React},function(t,e,i){t.exports=i(3)()},function(t,e){t.exports=ReactDOM},function(t,e,i){"use strict";var n=i(4);function r(){}function s(){}s.resetWarningCache=r,t.exports=function(){function t(t,e,i,r,s,o){if(o!==n){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return t}t.isRequired=t;var i={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:s,resetWarningCache:r};return i.PropTypes=i,i}},function(t,e,i){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,i){"use strict";i.r(e);var n,r=i(0),s=i.n(r),o=i(2),a=function(){},h=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=function(t){function e(){var e=t.call(this)||this;return e.recipeBook=new Map([["Good Recipe",{name:"Good Recipe",text:"This is a recipe"}],["Better Recipe",{name:"Better Recipe",text:"This is a better recipe. It contains all the good things you love to eat and is full of sugar.",keyIngredients:["Sugar","Honey","Peanut Butter Cups"]}],["Awesomesauce Recipe",{name:"Awesomesauce Recipe",text:"This is the best recipe of all",keyIngredients:["Bacon","More Bacon"],commonIngredients:["Flour","Onions","Cheesy bits"]}],["Bad Recipe",{name:"Bad Recipe",text:"This recipe is made of fail and sadness",keyIngredients:["Fail","Sadness"],commonIngredients:["Flour","Water","Spinach"]}],["Jerked Jerky",{name:"Jerked Jerky",text:"Jerk it good",keyIngredients:["Jerky"],commonIngredients:["Sauce","Onions"]}]]),e}return h(e,t),e.prototype.getRecipes=function(){return new Promise(function(t,e){t(Array.from(this.recipeBook.values()))}.bind(this))},e.prototype.recipesNow=function(){return Array.from(this.recipeBook.values())},e.prototype.deleteRecipe=function(t){return this.recipeBook.delete(t),this.getRecipes()},e.prototype.editRecipe=function(t,e){return this.recipeBook.set(t,e),this.getRecipes()},e.prototype.addRecipe=function(t,e){return this.recipeBook.set(t,e),this.getRecipes()},e}(a),c=!1,u=null,d=null;void 0===window.CALLBACK_REGISTRY&&(window.CALLBACK_REGISTRY={refreshRecipeGrid:t=>t});var f=window.CALLBACK_REGISTRY,p=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),_=function(t){function e(){var e=t.call(this)||this;return e.handleErrors=e.handleErrors.bind(e),e.apiServer="",d?e.apiServer=d:u&&(e.apiServer=window.location.protocol+"//"+window.location.hostname+":"+u),e}return p(e,t),e.prototype.getRecipes=function(){var t=this;return fetch(this.apiServer+"/service/",{method:"post",credentials:"include",body:JSON.stringify({action:"getRecipes"})}).then(this.handleErrors).then((function(e){return t.parseResponse(e)}))},e.prototype.deleteRecipe=function(t){var e=this,i={action:"deleteRecipe",recipe:t};return fetch(this.apiServer+"/service/",{method:"post",credentials:"include",body:JSON.stringify(i)}).then(this.handleErrors).then((function(t){return e.parseResponse(t)}))},e.prototype.editRecipe=function(t,e){var i=this,n={action:"editRecipe",recipe:e};return fetch(this.apiServer+"/service/",{method:"post",credentials:"include",body:JSON.stringify(n)}).then(this.handleErrors).then((function(t){return i.parseResponse(t)}))},e.prototype.addRecipe=function(t,e){var i=this,n={action:"addRecipe",recipe:e};return fetch(this.apiServer+"/service/",{method:"post",credentials:"include",body:JSON.stringify(n)}).then(this.handleErrors).then((function(t){return i.parseResponse(t)}))},e.prototype.parseResponse=function(t){return t.json().then((function(t){if(!t.isLoggedIn)throw Error("Please log in again.");if(t.error)throw Error(t.error);return t.recipes}))},e.prototype.handleErrors=function(t){if(!t.ok)throw Error(t.statusText);return t},e}(a),m=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),v=function(t){function e(e){var i=t.call(this,e)||this;return i.state={confirming:!1},i.confirmDelete=i.confirmDelete.bind(i),i}return m(e,t),e.prototype.render=function(){var t=this;return this.state.confirming?s.a.createElement("div",{className:"deleteWidget"},s.a.createElement("span",{className:"label"},"Are you sure?"),s.a.createElement("span",{className:"button yes",onClick:function(){return t.confirmYes()}},"Y "),s.a.createElement("span",{className:"button no",onClick:function(){return t.confirmNo()}}," N ")):s.a.createElement("div",{className:"deleteWidget"},s.a.createElement("span",{className:"button delete",onClick:function(){return t.confirmDelete()}}," X "))},e.prototype.confirmDelete=function(){this.setState({confirming:!0})},e.prototype.confirmYes=function(){this.setState({confirming:!1}),this.props.onDelete()},e.prototype.confirmNo=function(){this.setState({confirming:!1})},e}(s.a.Component),g=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),y=function(){return(y=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var r in e=arguments[i])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},b=function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var n=Array(t),r=0;for(e=0;e<i;e++)for(var s=arguments[e],o=0,a=s.length;o<a;o++,r++)n[r]=s[o];return n},w=function(t){function e(e){var i=t.call(this,e)||this;i.elementToFocus="",i.needResize=!1;var n=!1;return e.newRecipe&&(n=!0,i.elementToFocus="name:0"),i.state={editing:n,recipeData:e.recipeData},i.doEdit=i.doEdit.bind(i),i.doSelect=i.doSelect.bind(i),i.cancelEdit=i.cancelEdit.bind(i),i.confirmEdit=i.confirmEdit.bind(i),i.handleChangeField=i.handleChangeField.bind(i),i.handleChangeList=i.handleChangeList.bind(i),i.onKeydown=i.onKeydown.bind(i),i}return g(e,t),e.prototype.render=function(){return this.state.editing?this.renderEdit():this.renderReadOnly()},e.prototype.renderReadOnly=function(){var t=this;return s.a.createElement("div",{className:"item",ref:function(e){return t.domElement=e}},s.a.createElement("div",{className:"item-content"},s.a.createElement("div",{className:"recipeCard"},s.a.createElement("div",{className:"cardHeader"},s.a.createElement("span",{className:"cardTitle"}," ",this.props.recipeData.name),"        "),s.a.createElement("div",{className:"cardBody"},this.props.queryMode||s.a.createElement(v,{name:this.props.recipeData.name,onDelete:function(){return t.delete()}}),this.props.queryMode?this.renderSelectBtn():this.renderEditBtn(),this.props.recipeData.text,s.a.createElement("ul",null,this.props.recipeData.keyIngredients&&this.props.recipeData.keyIngredients.map((function(t){return s.a.createElement("li",{key:t,className:"keyIngredient"},t)})),this.props.recipeData.commonIngredients&&this.props.recipeData.commonIngredients.map((function(t){return s.a.createElement("li",{key:t,className:"commonIngredient"},t)})))))))},e.prototype.renderEdit=function(){var t=this,e=0,i=0,n=s.a.createElement("span",null,this.state.recipeData.name);return this.props.newRecipe&&(n=s.a.createElement("input",{type:"text",className:"name",name:"name",value:this.state.recipeData.name,onChange:this.handleChangeField,placeholder:"Enter a new recipe name."})),s.a.createElement("div",{className:"item",ref:function(e){return t.domElement=e}},s.a.createElement("div",{className:"item-content"},s.a.createElement("div",{className:"recipeCard editing",onKeyDown:this.onKeydown},s.a.createElement("div",{className:"cardHeader"},s.a.createElement("span",{className:"cardTitle"}," ",n),"        "),s.a.createElement("div",{className:"cardBody"},s.a.createElement("textarea",{className:"description",name:"text",value:this.state.recipeData.text,ref:function(e){return t.textAreaElement=e},onChange:this.handleChangeField,placeholder:"Enter a recipe description."}),s.a.createElement("ul",null,this.state.recipeData.keyIngredients&&this.state.recipeData.keyIngredients.map((function(i){return s.a.createElement("li",{key:"key"+e.toString(),className:"keyIngredient"},s.a.createElement("input",{type:"text",className:"keyIngredients",value:i,onChange:t.handleChangeList,name:"key"+(e++).toString()}))})),s.a.createElement("li",{key:"key"+e.toString(),className:"keyIngredient"},s.a.createElement("input",{type:"text",className:"keyIngredients",value:"",onChange:this.handleChangeList,name:"key"+(e++).toString(),placeholder:"New ingredient"})),this.state.recipeData.commonIngredients&&this.state.recipeData.commonIngredients.map((function(e){return s.a.createElement("li",{key:"common"+i.toString(),className:"commonIngredient"},s.a.createElement("input",{type:"text",className:"commonIngredients",value:e,onChange:t.handleChangeList,name:"common"+(i++).toString()}))})),s.a.createElement("li",{key:"common"+i.toString(),className:"commonIngredient"},s.a.createElement("input",{type:"text",className:"commonIngredients",value:"",onChange:this.handleChangeList,name:"common"+(i++).toString(),placeholder:"New ingredient"}))),s.a.createElement("div",null,s.a.createElement("button",{type:"button",onClick:this.cancelEdit},"Cancel"),s.a.createElement("button",{type:"button",onClick:this.confirmEdit},"Save"))))))},e.prototype.renderEditBtn=function(){return s.a.createElement("div",{className:"editBtn"},s.a.createElement("img",{src:"sl_icons/pencil.png",alt:"edit",onClick:this.doEdit}))},e.prototype.renderSelectBtn=function(){return s.a.createElement("div",{className:"selectBtn"},s.a.createElement("img",{src:"sl_icons/"+(this.props.selected?"check.png":"checkOff.png"),alt:"edit",onClick:this.doSelect}))},e.prototype.componentDidMount=function(){this.props.onMount(this.domElement),this.focusIfRequired()},e.prototype.focusIfRequired=function(){if(this.elementToFocus){var t=this.elementToFocus.split(":")[0],e=this.elementToFocus.split(":")[1];this.domElement.getElementsByClassName(t)[e].focus(),this.elementToFocus=""}},e.prototype.componentDidUpdate=function(){this.setEditDesciptionHeight(),this.focusIfRequired(),this.needResize&&(this.needResize=!1,this.props.onResize(this.domElement))},e.prototype.setEditDesciptionHeight=function(){var t=this.textAreaElement;t&&(t.style.height&&t.style.height===t.scrollHeight+"px"||(t.style.height="1px",t.style.height=t.scrollHeight+"px",this.props.onResize(this.domElement)))},e.prototype.componentWillUnmount=function(){this.props.onUnMount(this.domElement)},e.prototype.doEdit=function(){this.elementToFocus="description:0",this.setState({editing:!0,recipeData:Object.assign({},this.props.recipeData)})},e.prototype.doSelect=function(){this.props.selectRecipe&&this.props.selectRecipe(this.props.recipeData.name)},e.prototype.cancelEdit=function(){this.needResize=!0,this.props.newRecipe&&this.props.cancelNew&&this.props.cancelNew(),this.setState({editing:!1})},e.prototype.onKeydown=function(t){"Escape"===t.key&&(t.stopPropagation(),t.preventDefault(),this.cancelEdit())},e.prototype.confirmEdit=function(){if(this.props.newRecipe&&this.props.addRecipe){if(!this.state.recipeData.name)return;return this.needResize=!0,this.props.addRecipe(this.state.recipeData),void this.setState({editing:!1})}this.needResize=!0,this.props.editRecipe(this.state.recipeData),this.setState({editing:!1})},e.prototype.handleChangeField=function(t){var e=y({},this.state.recipeData);e[t.target.name]=t.target.value,this.setState({recipeData:e})},e.prototype.handleChangeList=function(t){var e=y({},this.state.recipeData),i=t.target.name,n=t.target.value,r=[],s=0;if(i.startsWith("key")?(r=e.keyIngredients,s=parseInt(i.substring(3))):(r=e.commonIngredients,s=parseInt(i.substring(6))),r=r?b(r):[],0===n.trim().length){if(s>=r.length)return;r.splice(s,1)}else s>=r.length?(r.push(n),this.elementToFocus=t.target.className+":"+s.toString()):r[s]=n;i.startsWith("key")?e.keyIngredients=r:e.commonIngredients=r,this.setState({recipeData:e})},e.prototype.delete=function(){this.props.onDelete(this.props.recipeData.name)},e}(s.a.Component),S=i(1),E=i.n(S),D={},k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},R=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},T=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),C=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},I=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},A=function(t){function e(){R(this,e);var t=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t._events={},t._queue=[],t._counter=0,t._isDestroyed=!1,t}return C(e,t),T(e,[{key:"on",value:function(t,e){if(this._isDestroyed)return this;var i=this._events[t];return i||(i=this._events[t]=[]),i.push(e),this}},{key:"once",value:function(t,e){if(this._isDestroyed)return this;var i=function(){this.off(t,i),e.apply(void 0,arguments)}.bind(this);return this.on(t,i)}},{key:"off",value:function(t,e){if(this._isDestroyed)return this;var i=this._events[t];if(!i||!i.length)return this;if(!e)return i.length=0,this;for(var n=i.length;n--;)e===i[n]&&i.splice(n,1);return this}},{key:"emit",value:function(t,e,i,n){if(this._isDestroyed)return this;var r=this._events[t];if(!r||!r.length)return this;var s=this._queue,o=s.length,a=arguments.length-1,h=void 0;for(h=0;h<r.length;h++)s.push(r[h]);for(++this._counter,h=o,o=s.length;h<o;h++)if(0===a?s[h]():1===a?s[h](e):2===a?s[h](e,i):s[h](e,i,n),this._isDestroyed)return this;return--this._counter,this._counter||(s.length=0),this}},{key:"destroy",value:function(){if(this._isDestroyed)return this;var t=this._events,e=void 0;for(e in this._isDestroyed=!0,this._queue.length=this._counter=0,t)t[e]&&(t[e].length=0,t[e]=void 0);return this}}]),e}(r.Component),O=!1,x="transform",P="transform";["","Webkit","Moz","O","ms"].forEach((function(t){if(!O){var e=t?t+"Transform":"transform";void 0!==document.documentElement.style[e]&&(t=t.toLowerCase(),x=t?"-"+t+"-transform":"transform",P=e,O=!0)}}));var M="function"==typeof WeakMap?new WeakMap:null;function N(t,e){var i=M&&M.get(t);return i||(i=window.getComputedStyle(t,null),M&&M.set(t,i)),i.getPropertyValue("transform"===e?x:e)}var L=/([A-Z])/g;function H(t){return t.replace(L,"-$1").toLowerCase()}function G(t,e){for(var i in e)t.style["transform"===i?P:i]=e[i]}var Y=function(t){function e(t){R(this,e);var i=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return i._element=t,i._animation=null,i._callback=null,i._props=[],i._values=[],i._keyframes=[],i._options={},i._isDestroyed=!1,i._onFinish=i._onFinish.bind(i),i}return C(e,t),T(e,[{key:"start",value:function(t,e,i){if(!this._isDestroyed){var n=this._animation,r=this._props,s=this._values,o=i||0,a=!1;if(n){var h=0,l=void 0;for(var c in e)if(++h,-1===(l=r.indexOf(c))||e[c]!==s[l]){a=!0;break}a||h===r.length||(a=!0)}if(a&&n.cancel(),this._callback="function"==typeof o.onFinish?o.onFinish:null,!n||a){for(var u in r.length=s.length=0,e)r.push(u),s.push(e[u]);var d=this._keyframes;d[0]=t,d[1]=e;var f=this._options;f.duration=o.duration||300,f.easing=o.easing||"ease";var p=this._element;(n=p.animate(d,f)).onfinish=this._onFinish,this._animation=n,G(p,e)}}}},{key:"stop",value:function(t){if(!this._isDestroyed&&this._animation){var e=this._element,i=this._props,n=this._values,r=void 0,s=void 0,o=void 0;if(t)G(e,t);else for(o=0;o<i.length;o++)s=N(e,H(r=i[o])),e.style["transform"===r?P:r]=s;this._animation.cancel(),this._animation=this._callback=null,i.length=n.length=0}}},{key:"isAnimating",value:function(){return!!this._animation}},{key:"destroy",value:function(){this._isDestroyed||(this.stop(),this._element=this._options=this._keyframes=null,this._isDestroyed=!0)}},{key:"_onFinish",value:function(){var t=this._callback;this._animation=this._callback=null,this._props.length=this._values.length=0,t&&t()}}]),e}(r.Component);var F=function(t,e){return t(e={exports:{}},e.exports),e.exports}((function(t){
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function(e,i,n,r){var s,o=["","webkit","Moz","MS","ms","o"],a=i.createElement("div"),h=Math.round,l=Math.abs,c=Date.now;function u(t,e,i){return setTimeout(g(t,i),e)}function d(t,e,i){return!!Array.isArray(t)&&(f(t,i[e],i),!0)}function f(t,e,i){var n;if(t)if(t.forEach)t.forEach(e,i);else if(void 0!==t.length)for(n=0;n<t.length;)e.call(i,t[n],n,t),n++;else for(n in t)t.hasOwnProperty(n)&&e.call(i,t[n],n,t)}function p(t,i,n){var r="DEPRECATED METHOD: "+i+"\n"+n+" AT \n";return function(){var i=new Error("get-stack-trace"),n=i&&i.stack?i.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",s=e.console&&(e.console.warn||e.console.log);return s&&s.call(e.console,r,n),t.apply(this,arguments)}}s="function"!=typeof Object.assign?function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var n=arguments[i];if(null!=n)for(var r in n)n.hasOwnProperty(r)&&(e[r]=n[r])}return e}:Object.assign;var _=p((function(t,e,i){for(var n=Object.keys(e),r=0;r<n.length;)(!i||i&&void 0===t[n[r]])&&(t[n[r]]=e[n[r]]),r++;return t}),"extend","Use `assign`."),m=p((function(t,e){return _(t,e,!0)}),"merge","Use `assign`.");function v(t,e,i){var n,r=e.prototype;(n=t.prototype=Object.create(r)).constructor=t,n._super=r,i&&s(n,i)}function g(t,e){return function(){return t.apply(e,arguments)}}function y(t,e){return"function"==typeof t?t.apply(e&&e[0]||void 0,e):t}function b(t,e){return void 0===t?e:t}function w(t,e,i){f(k(e),(function(e){t.addEventListener(e,i,!1)}))}function S(t,e,i){f(k(e),(function(e){t.removeEventListener(e,i,!1)}))}function E(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function D(t,e){return t.indexOf(e)>-1}function k(t){return t.trim().split(/\s+/g)}function R(t,e,i){if(t.indexOf&&!i)return t.indexOf(e);for(var n=0;n<t.length;){if(i&&t[n][i]==e||!i&&t[n]===e)return n;n++}return-1}function T(t){return Array.prototype.slice.call(t,0)}function C(t,e,i){for(var n=[],r=[],s=0;s<t.length;){var o=e?t[s][e]:t[s];R(r,o)<0&&n.push(t[s]),r[s]=o,s++}return i&&(n=e?n.sort((function(t,i){return t[e]>i[e]})):n.sort()),n}function I(t,e){for(var i,n,r=e[0].toUpperCase()+e.slice(1),s=0;s<o.length;){if((n=(i=o[s])?i+r:e)in t)return n;s++}}var A=1;function O(t){var i=t.ownerDocument||t;return i.defaultView||i.parentWindow||e}var x="ontouchstart"in e,P=void 0!==I(e,"PointerEvent"),M=x&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),N=["x","y"],L=["clientX","clientY"];function H(t,e){var i=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){y(t.options.enable,[t])&&i.handler(e)},this.init()}function G(t,e,i){var n=i.pointers.length,r=i.changedPointers.length,s=1&e&&n-r==0,o=12&e&&n-r==0;i.isFirst=!!s,i.isFinal=!!o,s&&(t.session={}),i.eventType=e,function(t,e){var i=t.session,n=e.pointers,r=n.length;i.firstInput||(i.firstInput=Y(e));r>1&&!i.firstMultiple?i.firstMultiple=Y(e):1===r&&(i.firstMultiple=!1);var s=i.firstInput,o=i.firstMultiple,a=o?o.center:s.center,h=e.center=F(n);e.timeStamp=c(),e.deltaTime=e.timeStamp-s.timeStamp,e.angle=j(a,h),e.distance=q(a,h),function(t,e){var i=e.center,n=t.offsetDelta||{},r=t.prevDelta||{},s=t.prevInput||{};1!==e.eventType&&4!==s.eventType||(r=t.prevDelta={x:s.deltaX||0,y:s.deltaY||0},n=t.offsetDelta={x:i.x,y:i.y});e.deltaX=r.x+(i.x-n.x),e.deltaY=r.y+(i.y-n.y)}(i,e),e.offsetDirection=z(e.deltaX,e.deltaY);var u=X(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=u.x,e.overallVelocityY=u.y,e.overallVelocity=l(u.x)>l(u.y)?u.x:u.y,e.scale=o?(d=o.pointers,f=n,q(f[0],f[1],L)/q(d[0],d[1],L)):1,e.rotation=o?function(t,e){return j(e[1],e[0],L)+j(t[1],t[0],L)}(o.pointers,n):0,e.maxPointers=i.prevInput?e.pointers.length>i.prevInput.maxPointers?e.pointers.length:i.prevInput.maxPointers:e.pointers.length,function(t,e){var i,n,r,s,o=t.lastInterval||e,a=e.timeStamp-o.timeStamp;if(8!=e.eventType&&(a>25||void 0===o.velocity)){var h=e.deltaX-o.deltaX,c=e.deltaY-o.deltaY,u=X(a,h,c);n=u.x,r=u.y,i=l(u.x)>l(u.y)?u.x:u.y,s=z(h,c),t.lastInterval=e}else i=o.velocity,n=o.velocityX,r=o.velocityY,s=o.direction;e.velocity=i,e.velocityX=n,e.velocityY=r,e.direction=s}(i,e);var d,f;var p=t.element;E(e.srcEvent.target,p)&&(p=e.srcEvent.target);e.target=p}(t,i),t.emit("hammer.input",i),t.recognize(i),t.session.prevInput=i}function Y(t){for(var e=[],i=0;i<t.pointers.length;)e[i]={clientX:h(t.pointers[i].clientX),clientY:h(t.pointers[i].clientY)},i++;return{timeStamp:c(),pointers:e,center:F(e),deltaX:t.deltaX,deltaY:t.deltaY}}function F(t){var e=t.length;if(1===e)return{x:h(t[0].clientX),y:h(t[0].clientY)};for(var i=0,n=0,r=0;r<e;)i+=t[r].clientX,n+=t[r].clientY,r++;return{x:h(i/e),y:h(n/e)}}function X(t,e,i){return{x:e/t||0,y:i/t||0}}function z(t,e){return t===e?1:l(t)>=l(e)?t<0?2:4:e<0?8:16}function q(t,e,i){i||(i=N);var n=e[i[0]]-t[i[0]],r=e[i[1]]-t[i[1]];return Math.sqrt(n*n+r*r)}function j(t,e,i){i||(i=N);var n=e[i[0]]-t[i[0]],r=e[i[1]]-t[i[1]];return 180*Math.atan2(r,n)/Math.PI}H.prototype={handler:function(){},init:function(){this.evEl&&w(this.element,this.evEl,this.domHandler),this.evTarget&&w(this.target,this.evTarget,this.domHandler),this.evWin&&w(O(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&S(this.element,this.evEl,this.domHandler),this.evTarget&&S(this.target,this.evTarget,this.domHandler),this.evWin&&S(O(this.element),this.evWin,this.domHandler)}};var B={mousedown:1,mousemove:2,mouseup:4};function W(){this.evEl="mousedown",this.evWin="mousemove mouseup",this.pressed=!1,H.apply(this,arguments)}v(W,H,{handler:function(t){var e=B[t.type];1&e&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=4),this.pressed&&(4&e&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var V={pointerdown:1,pointermove:2,pointerup:4,pointercancel:8,pointerout:8},U={2:"touch",3:"pen",4:"mouse",5:"kinect"},J="pointerdown",K="pointermove pointerup pointercancel";function Z(){this.evEl=J,this.evWin=K,H.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}e.MSPointerEvent&&!e.PointerEvent&&(J="MSPointerDown",K="MSPointerMove MSPointerUp MSPointerCancel"),v(Z,H,{handler:function(t){var e=this.store,i=!1,n=t.type.toLowerCase().replace("ms",""),r=V[n],s=U[t.pointerType]||t.pointerType,o="touch"==s,a=R(e,t.pointerId,"pointerId");1&r&&(0===t.button||o)?a<0&&(e.push(t),a=e.length-1):12&r&&(i=!0),a<0||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:s,srcEvent:t}),i&&e.splice(a,1))}});var Q={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function $(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,H.apply(this,arguments)}function tt(t,e){var i=T(t.touches),n=T(t.changedTouches);return 12&e&&(i=C(i.concat(n),"identifier",!0)),[i,n]}v($,H,{handler:function(t){var e=Q[t.type];if(1===e&&(this.started=!0),this.started){var i=tt.call(this,t,e);12&e&&i[0].length-i[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}}});var et={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function it(){this.evTarget="touchstart touchmove touchend touchcancel",this.targetIds={},H.apply(this,arguments)}function nt(t,e){var i=T(t.touches),n=this.targetIds;if(3&e&&1===i.length)return n[i[0].identifier]=!0,[i,i];var r,s,o=T(t.changedTouches),a=[],h=this.target;if(s=i.filter((function(t){return E(t.target,h)})),1===e)for(r=0;r<s.length;)n[s[r].identifier]=!0,r++;for(r=0;r<o.length;)n[o[r].identifier]&&a.push(o[r]),12&e&&delete n[o[r].identifier],r++;return a.length?[C(s.concat(a),"identifier",!0),a]:void 0}v(it,H,{handler:function(t){var e=et[t.type],i=nt.call(this,t,e);i&&this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}});function rt(){H.apply(this,arguments);var t=g(this.handler,this);this.touch=new it(this.manager,t),this.mouse=new W(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function st(t,e){1&t?(this.primaryTouch=e.changedPointers[0].identifier,ot.call(this,e)):12&t&&ot.call(this,e)}function ot(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var i={x:e.clientX,y:e.clientY};this.lastTouches.push(i);var n=this.lastTouches;setTimeout((function(){var t=n.indexOf(i);t>-1&&n.splice(t,1)}),2500)}}function at(t){for(var e=t.srcEvent.clientX,i=t.srcEvent.clientY,n=0;n<this.lastTouches.length;n++){var r=this.lastTouches[n],s=Math.abs(e-r.x),o=Math.abs(i-r.y);if(s<=25&&o<=25)return!0}return!1}v(rt,H,{handler:function(t,e,i){var n="touch"==i.pointerType,r="mouse"==i.pointerType;if(!(r&&i.sourceCapabilities&&i.sourceCapabilities.firesTouchEvents)){if(n)st.call(this,e,i);else if(r&&at.call(this,i))return;this.callback(t,e,i)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var ht=I(a.style,"touchAction"),lt=void 0!==ht,ct=function(){if(!lt)return!1;var t={},i=e.CSS&&e.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){t[n]=!i||e.CSS.supports("touch-action",n)})),t}();function ut(t,e){this.manager=t,this.set(e)}ut.prototype={set:function(t){"compute"==t&&(t=this.compute()),lt&&this.manager.element.style&&ct[t]&&(this.manager.element.style[ht]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return f(this.manager.recognizers,(function(e){y(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))})),function(t){if(D(t,"none"))return"none";var e=D(t,"pan-x"),i=D(t,"pan-y");if(e&&i)return"none";if(e||i)return e?"pan-x":"pan-y";if(D(t,"manipulation"))return"manipulation";return"auto"}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,i=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var n=this.actions,r=D(n,"none")&&!ct.none,s=D(n,"pan-y")&&!ct["pan-y"],o=D(n,"pan-x")&&!ct["pan-x"];if(r){var a=1===t.pointers.length,h=t.distance<2,l=t.deltaTime<250;if(a&&h&&l)return}if(!o||!s)return r||s&&6&i||o&&24&i?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};function dt(t){this.options=s({},this.defaults,t||{}),this.id=A++,this.manager=null,this.options.enable=b(this.options.enable,!0),this.state=1,this.simultaneous={},this.requireFail=[]}function ft(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}function pt(t){return 16==t?"down":8==t?"up":2==t?"left":4==t?"right":""}function _t(t,e){var i=e.manager;return i?i.get(t):t}function mt(){dt.apply(this,arguments)}function vt(){mt.apply(this,arguments),this.pX=null,this.pY=null}function gt(){mt.apply(this,arguments)}function yt(){dt.apply(this,arguments),this._timer=null,this._input=null}function bt(){mt.apply(this,arguments)}function wt(){mt.apply(this,arguments)}function St(){dt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function Et(t,e){return(e=e||{}).recognizers=b(e.recognizers,Et.defaults.preset),new Dt(t,e)}dt.prototype={defaults:{},set:function(t){return s(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(d(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=_t(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return d(t,"dropRecognizeWith",this)||(t=_t(t,this),delete this.simultaneous[t.id]),this},requireFailure:function(t){if(d(t,"requireFailure",this))return this;var e=this.requireFail;return-1===R(e,t=_t(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(d(t,"dropRequireFailure",this))return this;t=_t(t,this);var e=R(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,i=this.state;function n(i){e.manager.emit(i,t)}i<8&&n(e.options.event+ft(i)),n(e.options.event),t.additionalEvent&&n(t.additionalEvent),i>=8&&n(e.options.event+ft(i))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(33&this.requireFail[t].state))return!1;t++}return!0},recognize:function(t){var e=s({},t);if(!y(this.options.enable,[this,e]))return this.reset(),void(this.state=32);56&this.state&&(this.state=1),this.state=this.process(e),30&this.state&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},v(mt,dt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,i=t.eventType,n=6&e,r=this.attrTest(t);return n&&(8&i||!r)?16|e:n||r?4&i?8|e:2&e?4|e:2:32}}),v(vt,mt,{defaults:{event:"pan",threshold:10,pointers:1,direction:30},getTouchAction:function(){var t=this.options.direction,e=[];return 6&t&&e.push("pan-y"),24&t&&e.push("pan-x"),e},directionTest:function(t){var e=this.options,i=!0,n=t.distance,r=t.direction,s=t.deltaX,o=t.deltaY;return r&e.direction||(6&e.direction?(r=0===s?1:s<0?2:4,i=s!=this.pX,n=Math.abs(t.deltaX)):(r=0===o?1:o<0?8:16,i=o!=this.pY,n=Math.abs(t.deltaY))),t.direction=r,i&&n>e.threshold&&r&e.direction},attrTest:function(t){return mt.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=pt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),v(gt,mt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||2&this.state)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),v(yt,dt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return["auto"]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,n=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!n||!i||12&t.eventType&&!r)this.reset();else if(1&t.eventType)this.reset(),this._timer=u((function(){this.state=8,this.tryEmit()}),e.time,this);else if(4&t.eventType)return 8;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){8===this.state&&(t&&4&t.eventType?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=c(),this.manager.emit(this.options.event,this._input)))}}),v(bt,mt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||2&this.state)}}),v(wt,mt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:30,pointers:1},getTouchAction:function(){return vt.prototype.getTouchAction.call(this)},attrTest:function(t){var e,i=this.options.direction;return 30&i?e=t.overallVelocity:6&i?e=t.overallVelocityX:24&i&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&i&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&l(e)>this.options.velocity&&4&t.eventType},emit:function(t){var e=pt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),v(St,dt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return["manipulation"]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,n=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),1&t.eventType&&0===this.count)return this.failTimeout();if(n&&r&&i){if(4!=t.eventType)return this.failTimeout();var s=!this.pTime||t.timeStamp-this.pTime<e.interval,o=!this.pCenter||q(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,o&&s?this.count+=1:this.count=1,this._input=t,0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=u((function(){this.state=8,this.tryEmit()}),e.interval,this),2):8}return 32},failTimeout:function(){return this._timer=u((function(){this.state=32}),this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),Et.VERSION="2.0.7",Et.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[bt,{enable:!1}],[gt,{enable:!1},["rotate"]],[wt,{direction:6}],[vt,{direction:6},["swipe"]],[St],[St,{event:"doubletap",taps:2},["tap"]],[yt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function Dt(t,e){var i;this.options=s({},Et.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((i=this).options.inputClass||(P?Z:M?it:x?rt:W))(i,G),this.touchAction=new ut(this,this.options.touchAction),kt(this,!0),f(this.options.recognizers,(function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])}),this)}function kt(t,e){var i,n=t.element;n.style&&(f(t.options.cssProps,(function(r,s){i=I(n.style,s),e?(t.oldCssProps[i]=n.style[i],n.style[i]=r):n.style[i]=t.oldCssProps[i]||""})),e||(t.oldCssProps={}))}Dt.prototype={set:function(t){return s(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var i;this.touchAction.preventDefaults(t);var n=this.recognizers,r=e.curRecognizer;(!r||r&&8&r.state)&&(r=e.curRecognizer=null);for(var s=0;s<n.length;)i=n[s],2===e.stopped||r&&i!=r&&!i.canRecognizeWith(r)?i.reset():i.recognize(t),!r&&14&i.state&&(r=e.curRecognizer=i),s++}},get:function(t){if(t instanceof dt)return t;for(var e=this.recognizers,i=0;i<e.length;i++)if(e[i].options.event==t)return e[i];return null},add:function(t){if(d(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(d(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,i=R(e,t);-1!==i&&(e.splice(i,1),this.touchAction.update())}return this},on:function(t,e){if(void 0!==t&&void 0!==e){var i=this.handlers;return f(k(t),(function(t){i[t]=i[t]||[],i[t].push(e)})),this}},off:function(t,e){if(void 0!==t){var i=this.handlers;return f(k(t),(function(t){e?i[t]&&i[t].splice(R(i[t],e),1):delete i[t]})),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var n=i.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e,e.target.dispatchEvent(n)}(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var r=0;r<n.length;)n[r](e),r++}},destroy:function(){this.element&&kt(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},s(Et,{INPUT_START:1,INPUT_MOVE:2,INPUT_END:4,INPUT_CANCEL:8,STATE_POSSIBLE:1,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:32,DIRECTION_NONE:1,DIRECTION_LEFT:2,DIRECTION_RIGHT:4,DIRECTION_UP:8,DIRECTION_DOWN:16,DIRECTION_HORIZONTAL:6,DIRECTION_VERTICAL:24,DIRECTION_ALL:30,Manager:Dt,Input:H,TouchAction:ut,TouchInput:it,MouseInput:W,PointerEventInput:Z,TouchMouseInput:rt,SingleTouchInput:$,Recognizer:dt,AttrRecognizer:mt,Tap:St,Pan:vt,Swipe:wt,Pinch:gt,Rotate:bt,Press:yt,on:w,off:S,each:f,merge:m,extend:_,assign:s,inherit:v,bindFn:g,prefixed:I}),(void 0!==e?e:"undefined"!=typeof self?self:{}).Hammer=Et,t.exports?t.exports=Et:e.Hammer=Et}(window,document)}));var X=(window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,16)}).bind(window),z=new(function(t){function e(){R(this,e);var t=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t._nextTick=null,t._queue=[],t._reads={},t._writes={},t._batch=[],t._batchReads={},t._batchWrites={},t._flush=t._flush.bind(t),t}return C(e,t),T(e,[{key:"add",value:function(t,e,i,n){var r=this._queue.indexOf(t);r>-1&&(this._queue[r]=void 0),n?this._queue.unshift(t):this._queue.push(t),this._reads[t]=e,this._writes[t]=i,this._nextTick||(this._nextTick=X(this._flush))}},{key:"cancel",value:function(t){var e=this._queue.indexOf(t);e>-1&&(this._queue[e]=void 0,this._reads[t]=void 0,this._writes[t]=void 0)}},{key:"_flush",value:function(){var t=this._queue,e=this._reads,i=this._writes,n=this._batch,r=this._batchReads,s=this._batchWrites,o=t.length,a=void 0,h=void 0;for(this._nextTick=null,h=0;h<o;h++)(a=t[h])&&(n.push(a),r[a]=e[a],e[a]=void 0,s[a]=i[a],i[a]=void 0);for(t.length=0,h=0;h<o;h++)r[a=n[h]]&&(r[a](),r[a]=void 0);for(h=0;h<o;h++)s[a=n[h]]&&(s[a](),s[a]=void 0);n.length=0,!this._nextTick&&t.length&&(this._nextTick=X(this._flush))}}]),e}(r.Component));function q(t){return z.cancel(t+"layout")}function j(t){return z.cancel(t+"visibility")}function B(t){return z.cancel(t+"move")}function W(t){return z.cancel(t+"scroll")}var V=Element.prototype,U=V.matches||V.matchesSelector||V.webkitMatchesSelector||V.mozMatchesSelector||V.msMatchesSelector||V.oMatchesSelector;function J(t,e){return U.call(t,e)}var K="classList"in Element.prototype?function(t,e){t.classList.add(e)}:function(t,e){J(t,"."+e)||(t.className+=" "+e)};function Z(t,e,i){var n=t.length,r=Math.max(0,i?n:n-1);return e>r?r:e<0?Math.max(r+e+1,0):e}function Q(t,e,i){if(!(t.length<2)){var n=Z(t,e),r=Z(t,i);n!==r&&t.splice(r,0,t.splice(n,1)[0])}}function $(t,e,i){if(!(t.length<2)){var n=Z(t,e),r=Z(t,i),s=void 0;n!==r&&(s=t[n],t[n]=t[r],t[r]=s)}}function tt(t,e){var i=void 0;return e>0?function(n){void 0!==i&&(i=window.clearTimeout(i),"finish"===n&&t()),"cancel"!==n&&"finish"!==n&&(i=window.setTimeout((function(){i=void 0,t()}),e))}:function(e){"cancel"!==e&&t()}}function et(t){var e=N(t,"transform");if(!e||"none"===e)return!1;var i=N(t,"display");return"inline"!==i&&"none"!==i}function it(t,e){for(var i=(e?t:t.parentElement)||document;i&&i!==document&&"static"===N(i,"position")&&!et(i);)i=i.parentElement||document;return i}function nt(t,e){return parseFloat(N(t,e))||0}var rt={},st={},ot={};function at(t,e){var i,n=e||{};return n.left=0,n.top=0,t===document?n:(n.left=window.pageXOffset||0,n.top=window.pageYOffset||0,t.self===window.self||(i=t.getBoundingClientRect(),n.left+=i.left,n.top+=i.top,n.left+=nt(t,"border-left-width"),n.top+=nt(t,"border-top-width")),n)}function ht(t,e,i){return ot.left=0,ot.top=0,t===e||i&&(t=it(t,!0))===(e=it(e,!0))||(at(t,rt),at(e,st),ot.left=st.left-rt.left,ot.top=st.top-rt.top),ot}var lt={};function ct(t){lt.x=0,lt.y=0;var e=N(t,"transform");if(!e)return lt;var i=e.replace("matrix(","").split(",");return lt.x=parseFloat(i[4])||0,lt.y=parseFloat(i[5])||0,lt}function ut(t,e){return"translateX("+t+"px) translateY("+e+"px)"}var dt=[];function ft(t,e,i){var n="number"==typeof i?i:-1;n<0&&(n=t.length-n+1),t.splice.apply(t,function(t){if(Array.isArray(t)){for(var e=0,i=Array(t.length);e<t.length;e++)i[e]=t[e];return i}return Array.from(t)}(dt.concat(n,0,e))),dt.length=0}var pt=Object.prototype.toString;function _t(t){return"object"===(void 0===t?"undefined":k(t))&&"[object Object]"===pt.call(t)}var mt,vt,gt,yt,bt="classList"in Element.prototype?function(t,e){t.classList.remove(e)}:function(t,e){J(t,"."+e)&&(t.className=(" "+t.className+" ").replace(" "+e+" "," ").trim())},wt=Tt(),St=function(t){function e(t){R(this,e);var i=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));if(!F)throw new Error("[Muuri] required dependency Hammer is not defined.");null===wt&&(wt=Tt());var n=i,r=t._element,s=t.getGrid(),o=s._settings,a=void 0,h="function"==typeof o.dragStartPredicate?o.dragStartPredicate:e.defaultStartPredicate,l=0,c=void 0;return i._item=t,i._gridId=s._id,i._hammer=a=new F.Manager(r),i._isDestroyed=!1,i._isMigrating=!1,i._reset(),i._onScroll=i._onScroll.bind(i),i._prepareMove=i._prepareMove.bind(i),i._applyMove=i._applyMove.bind(i),i._prepareScroll=i._prepareScroll.bind(i),i._applyScroll=i._applyScroll.bind(i),i._checkOverlap=i._checkOverlap.bind(i),i._forceResolveStartPredicate=function(t){this._isDestroyed||1!==l||(l=2,this._onStart(t))},i._checkOverlapDebounce=tt(i._checkOverlap,o.dragSortInterval),a.add(new F.Pan({event:"drag",pointers:1,threshold:0,direction:F.DIRECTION_ALL})),a.add(new F.Press({event:"draginit",pointers:1,threshold:1e3,time:0})),_t(o.dragHammerSettings)&&a.set(o.dragHammerSettings),a.on("draginit dragstart dragmove",(function(t){0===l&&(l=1),1===l?!0===(c=h(n._item,t))?(l=2,n._onStart(t)):!1===c&&(l=3):2===l&&n._isActive&&n._onMove(t)})).on("dragend dragcancel draginitup",(function(t){var e=2===l;h(n._item,t),l=0,e&&n._isActive&&n._onEnd(t)})),r.addEventListener("dragstart",Et,!1),i}return C(e,t),T(e,[{key:"stop",value:function(){var t=this._item,e=t._element,i=this._getGrid();return this._isActive?this._isMigrating?(this._finishMigration(),this):(B(t._id),W(t._id),this._unbindScrollListeners(),this._checkOverlapDebounce("cancel"),e.parentNode!==i._element&&(i._element.appendChild(e),e.style[P]=ut(this._gridX,this._gridY)),bt(e,i._settings.itemDraggingClass),this._reset(),this):this}},{key:"destroy",value:function(){return this._isDestroyed||(this.stop(),this._hammer.destroy(),this._item._element.removeEventListener("dragstart",Et,!1),this._isDestroyed=!0),this}},{key:"_getGrid",value:function(){return D[this._gridId]||null}},{key:"_reset",value:function(){this._isActive=!1,this._container=null,this._containingBlock=null,this._lastEvent=null,this._lastScrollEvent=null,this._scrollers=[],this._left=0,this._top=0,this._gridX=0,this._gridY=0,this._elementClientX=0,this._elementClientY=0,this._containerDiffX=0,this._containerDiffY=0}},{key:"_bindScrollListeners",value:function(){var t=this._getGrid()._element,e=this._container,i=this._scrollers,n=void 0,r=void 0;if(i.length=0,kt(this._item._element,i),e!==t)for(kt(t,n=[]),n.push(t),r=0;r<n.length;r++)i.includes(n[r])||i.push(n[r]);for(r=0;r<i.length;r++)i[r].addEventListener("scroll",this._onScroll)}},{key:"_unbindScrollListeners",value:function(){var t=this._scrollers,e=void 0;for(e=0;e<t.length;e++)t[e].removeEventListener("scroll",this._onScroll);t.length=0}},{key:"_setupStartPredicate",value:function(t){var e=t||this._getGrid()._settings.dragStartPredicate||0;return this._startPredicateData={distance:Math.abs(e.distance)||0,delay:Math.max(e.delay,0)||0,handle:"string"==typeof e.handle&&e.handle}}},{key:"_getStartPredicateHandle",value:function(t){var e=this._startPredicateData,i=this._item._element,n=i;if(!e.handle)return n;for(n=(t.changedPointers[0]||0).target;n&&!J(n,e.handle);)n=n!==i?n.parentElement:null;return n||null}},{key:"_resolveStartPredicate",value:function(t){var e,i,n,r,s,o=this._startPredicateData,a=t.changedPointers[0],h=a&&a.pageX||0,l=a&&a.pageY||0;if(!(t.distance<o.distance||o.delay))return i=(e=o.handleElement.getBoundingClientRect()).left+(window.pageXOffset||0),n=e.top+(window.pageYOffset||0),r=e.width,s=e.height,this._resetStartPredicate(),r&&s&&h>=i&&h<i+r&&l>=n&&l<n+s}},{key:"_finishStartPredicate",value:function(t){var e=this._item._element;this._resetStartPredicate(),function(t){return Math.abs(t.deltaX)<2&&Math.abs(t.deltaY)<2&&t.deltaTime<200}(t)&&function(t){if("a"!==t.tagName.toLowerCase())return;var e=t.getAttribute("href");if(!e)return;var i=t.getAttribute("target");i&&"_self"!==i?window.open(e,i):window.location.href=e}(e)}},{key:"_resetStartPredicate",value:function(){var t=this._startPredicateData;t&&(t.delayTimer&&(t.delayTimer=window.clearTimeout(t.delayTimer)),this._startPredicateData=null)}},{key:"_checkOverlap",value:function(){if(this._isActive){var t,i,n,r,s=this._item,o=this._getGrid()._settings,a=void 0,h=void 0,l=void 0;(a="function"==typeof o.dragSortPredicate?o.dragSortPredicate(s,this._lastEvent):e.defaultSortPredicate(s,o.dragSortPredicate))&&"number"==typeof a.index&&(r=(h=s.getGrid())!==(l=a.grid||h),t=h._items.indexOf(s),i=Z(l._items,a.index,r),n="swap"===a.action?"swap":"move",r?(h._hasListeners("beforeSend")&&h._emit("beforeSend",{item:s,fromGrid:h,fromIndex:t,toGrid:l,toIndex:i}),l._hasListeners("beforeReceive")&&l._emit("beforeReceive",{item:s,fromGrid:h,fromIndex:t,toGrid:l,toIndex:i}),s._gridId=l._id,this._isMigrating=s._gridId!==this._gridId,h._items.splice(t,1),ft(l._items,s,i),s._sortData=null,h._hasListeners("send")&&h._emit("send",{item:s,fromGrid:h,fromIndex:t,toGrid:l,toIndex:i}),l._hasListeners("receive")&&l._emit("receive",{item:s,fromGrid:h,fromIndex:t,toGrid:l,toIndex:i}),h.layout(),l.layout()):t!==i&&(("swap"===n?$:Q)(h._items,t,i),h._hasListeners("move")&&h._emit("move",{item:s,fromIndex:t,toIndex:i,action:n}),h.layout()))}}},{key:"_finishMigration",value:function(){var t=this._item,i=t._release,n=t._element,r=t._isActive,s=t.getGrid(),o=s._element,a=s._settings,h=a.dragContainer||o,l=this._getGrid()._settings,c=n.parentNode,u=void 0,d=void 0;this._isMigrating=!1,this.destroy(),bt(n,l.itemClass),bt(n,l.itemVisibleClass),bt(n,l.itemHiddenClass),K(n,a.itemClass),K(n,r?a.itemVisibleClass:a.itemHiddenClass),h!==c&&(h.appendChild(n),d=ht(c,h,!0),(u=ct(n)).x-=d.left,u.y-=d.top),t._refreshDimensions(),t._refreshSortData(),d=ht(h,o,!0),i._containerDiffX=d.left,i._containerDiffY=d.top,t._drag=a.dragEnabled?new e(t):null,h!==c&&(n.style[P]=ut(u.x,u.y)),t._child.removeAttribute("style"),G(t._child,r?a.visibleStyles:a.hiddenStyles),i.start()}},{key:"_onStart",value:function(t){var e=this._item;if(e._isActive){var i=e._element,n=this._getGrid(),r=n._settings,s=e._release,o=e._migrate,a=n._element,h=r.dragContainer||a,l=it(h,!0),c=ct(i),u=c.x,d=c.y,f=i.getBoundingClientRect(),p=h!==a,_=void 0;p&&(_=ht(l,a)),e.isPositioning()&&e._layout.stop(!0,{transform:ut(u,d)}),o._isActive&&(u-=o._containerDiffX,d-=o._containerDiffY,o.stop(!0,{transform:ut(u,d)})),e.isReleasing()&&s._reset(),this._isActive=!0,this._lastEvent=t,this._container=h,this._containingBlock=l,this._elementClientX=f.left,this._elementClientY=f.top,this._left=this._gridX=u,this._top=this._gridY=d,n._emit("dragInit",e,t),p&&(this._containerDiffX=_.left,this._containerDiffY=_.top,i.parentNode===h?(this._gridX=u-this._containerDiffX,this._gridY=d-this._containerDiffY):(this._left=u+this._containerDiffX,this._top=d+this._containerDiffY,h.appendChild(i),i.style[P]=ut(this._left,this._top))),K(i,r.itemDraggingClass),this._bindScrollListeners(),n._emit("dragStart",e,t)}}},{key:"_onMove",value:function(t){var e=this._item;if(e._isActive){var i,n,r,s=this._getGrid()._settings.dragAxis,o=t.deltaX-this._lastEvent.deltaX,a=t.deltaY-this._lastEvent.deltaY;this._lastEvent=t,"y"!==s&&(this._left+=o,this._gridX+=o,this._elementClientX+=o),"x"!==s&&(this._top+=a,this._gridY+=a,this._elementClientY+=a),i=e._id,n=this._prepareMove,r=this._applyMove,z.add(i+"move",n,r,!0)}else this.stop()}},{key:"_prepareMove",value:function(){this._item._isActive&&this._getGrid()._settings.dragSort&&this._checkOverlapDebounce()}},{key:"_applyMove",value:function(){var t=this._item;t._isActive&&(t._element.style[P]=ut(this._left,this._top),this._getGrid()._emit("dragMove",t,this._lastEvent))}},{key:"_onScroll",value:function(t){var e,i,n,r=this._item;r._isActive?(this._lastScrollEvent=t,e=r._id,i=this._prepareScroll,n=this._applyScroll,z.add(e+"scroll",i,n,!0)):this.stop()}},{key:"_prepareScroll",value:function(){var t=this._item;if(t._isActive){var e=t._element,i=this._getGrid(),n=i._settings,r=n.dragAxis,s=i._element,o=void 0,a=e.getBoundingClientRect(),h=this._elementClientX-a.left,l=this._elementClientY-a.top;this._container!==s&&(o=ht(this._containingBlock,s),this._containerDiffX=o.left,this._containerDiffY=o.top),"y"!==r&&(this._left+=h,this._gridX=this._left-this._containerDiffX),"x"!==r&&(this._top+=l,this._gridY=this._top-this._containerDiffY),n.dragSort&&this._checkOverlapDebounce()}}},{key:"_applyScroll",value:function(){var t=this._item;t._isActive&&(t._element.style[P]=ut(this._left,this._top),this._getGrid()._emit("dragScroll",t,this._lastScrollEvent))}},{key:"_onEnd",value:function(t){var e=this._item,i=e._element,n=this._getGrid(),r=n._settings,s=e._release;e._isActive?(B(e._id),W(e._id),r.dragSort&&this._checkOverlapDebounce("finish"),this._unbindScrollListeners(),s._containerDiffX=this._containerDiffX,s._containerDiffY=this._containerDiffY,this._reset(),bt(i,r.itemDraggingClass),n._emit("dragEnd",e,t),this._isMigrating?this._finishMigration():s.start()):this.stop()}}]),e}(r.Component);function Et(t){t.preventDefault&&t.preventDefault()}function Dt(t,e){return t.left+t.width<=e.left||e.left+e.width<=t.left||t.top+t.height<=e.top||e.top+e.height<=t.top?0:(Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left))*(Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))/(Math.min(t.width,e.width)*Math.min(t.height,e.height))*100}function kt(t,e){var i=e||[],n=t.parentNode;if(wt){if("fixed"===N(t,"position"))return i;for(;n&&n!==document&&n!==document.documentElement;)Rt(n)&&i.push(n),n="fixed"===N(n,"position")?null:n.parentNode;return null!==n&&i.push(window),i}for(;n&&n!==document;)"fixed"!==N(t,"position")||et(n)?(Rt(n)&&i.push(n),t=n,n=n.parentNode):n=n.parentNode;return i[i.length-1]===document.documentElement?i[i.length-1]=window:i.push(window),i}function Rt(t){var e=N(t,"overflow");return"auto"===e||"scroll"===e||("auto"===(e=N(t,"overflow-x"))||"scroll"===e||("auto"===(e=N(t,"overflow-y"))||"scroll"===e))}function Tt(){if(!O)return!0;if(!document.body)return null;var t=[0,1].map((function(t,e){return(t=document.createElement("div")).style.position=e?"fixed":"absolute",t.style.display="block",t.style.visibility="hidden",t.style.left=e?"0px":"1px",t.style[P]="none",t})),e=document.body.appendChild(t[0]),i=e.appendChild(t[1]),n=i.getBoundingClientRect().left;e.style[P]="scale(1)";var r=n===i.getBoundingClientRect().left;return document.body.removeChild(e),r}St.defaultStartPredicate=function(t,e,i){var n=t._drag,r=n._startPredicateData||n._setupStartPredicate(i);if(!e.isFinal)return!(!r.handleElement&&(r.handleElement=n._getStartPredicateHandle(e),!r.handleElement))&&(r.delay&&(r.event=e,r.delayTimer||(r.delayTimer=window.setTimeout((function(){r.delay=0,n._resolveStartPredicate(r.event)&&(n._forceResolveStartPredicate(r.event),n._resetStartPredicate())}),r.delay))),n._resolveStartPredicate(e));n._finishStartPredicate(e)},St.defaultSortPredicate=(mt={},vt={},gt={},yt=[],function(t,e){var i=t._drag,n=i._getGrid(),r=e&&"number"==typeof e.threshold?e.threshold:50,s=e&&"swap"===e.action?"swap":"move";mt.width=t._width,mt.height=t._height,mt.left=i._elementClientX,mt.top=i._elementClientY;var o=function(t,e,i){var n=null,r=e._settings.dragSort,s=-1,o=void 0,a=void 0,h=void 0,l=void 0;if(!0===r?(yt[0]=e,a=yt):a=r.call(e,t),!Array.isArray(a))return n;for(l=0;l<a.length;l++)(h=a[l])._isDestroyed||(h._updateBoundingRect(),vt.width=h._width,vt.height=h._height,vt.left=h._left,vt.top=h._top,(o=Dt(mt,vt))>i&&o>s&&(s=o,n=h));return yt.length=0,n}(t,n,r);if(!o)return!1;var a=0,h=0,l=-1,c=void 0,u=void 0,d=void 0,f=void 0,p=void 0;for(o===n?(mt.left=i._gridX+t._marginLeft,mt.top=i._gridY+t._marginTop):(o._updateBorders(1,0,1,0),a=o._left+o._borderLeft,h=o._top+o._borderTop),p=0;p<o._items.length;p++)(d=o._items[p])._isActive&&d!==t&&(u=!0,vt.width=d._width,vt.height=d._height,vt.left=d._left+d._marginLeft+a,vt.top=d._top+d._marginTop+h,(f=Dt(mt,vt))>l&&(c=p,l=f));return l<r&&t.getGrid()!==o&&(c=u?-1:0,l=1/0),l>=r&&(gt.grid=o,gt.index=c,gt.action=s,gt)});var Ct=function(t){function e(){R(this,e);var t=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t._queue=[],t._isDestroyed=!1,t}return C(e,t),T(e,[{key:"add",value:function(t){return this._isDestroyed||this._queue.push(t),this}},{key:"flush",value:function(t,e){if(this._isDestroyed)return this;var i=this._queue,n=i.length,r=void 0;if(!n)return this;var s=1===n,o=s?i[0]:i.slice(0);if(i.length=0,s)return o(t,e),this;for(r=0;r<n&&(o[r](t,e),!this._isDestroyed);r++);return this}},{key:"destroy",value:function(){return this._isDestroyed||(this._isDestroyed=!0,this._queue.length=0),this}}]),e}(r.Component),It=function(t){function e(t){R(this,e);var i=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return i._item=t,i._isActive=!1,i._isDestroyed=!1,i._isInterrupted=!1,i._currentStyles={},i._targetStyles={},i._currentLeft=0,i._currentTop=0,i._offsetLeft=0,i._offsetTop=0,i._skipNextAnimation=!1,i._animateOptions={onFinish:i._finish.bind(i)},i._queue=new Ct,i._setupAnimation=i._setupAnimation.bind(i),i._startAnimation=i._startAnimation.bind(i),i}return C(e,t),T(e,[{key:"start",value:function(t,e){if(!this._isDestroyed){var i,n,r,s=this._item,o=s._element,a=s._release,h=s.getGrid()._settings,l=this._isActive,c=a._isActive&&!1===a._isPositioningStarted,u=c?h.dragReleaseDuration:h.layoutDuration,d=c?h.dragReleaseEasing:h.layoutEasing,f=!t&&!this._skipNextAnimation&&u>0,p=void 0;return l&&this._queue.flush(!0,s),c&&(a._isPositioningStarted=!0),"function"==typeof e&&this._queue.add(e),f?(this._isActive=!0,this._animateOptions.easing=d,this._animateOptions.duration=u,this._isInterrupted=l,i=s._id,n=this._setupAnimation,r=this._startAnimation,z.add(i+"layout",n,r),this):(this._updateOffsets(),this._updateTargetStyles(),l&&q(s._id),p=s._animate.isAnimating(),this.stop(!1,this._targetStyles),!p&&G(o,this._targetStyles),this._skipNextAnimation=!1,this._finish())}}},{key:"stop",value:function(t,e){if(this._isDestroyed||!this._isActive)return this;var i=this._item;return q(i._id),i._animate.stop(e),bt(i._element,i.getGrid()._settings.itemPositioningClass),this._isActive=!1,t&&this._queue.flush(!0,i),this}},{key:"destroy",value:function(){return this._isDestroyed||(this.stop(!0,{}),this._queue.destroy(),this._item=this._currentStyles=this._targetStyles=this._animateOptions=null,this._isDestroyed=!0),this}},{key:"_updateOffsets",value:function(){if(!this._isDestroyed){var t=this._item,e=t._migrate,i=t._release;this._offsetLeft=i._isActive?i._containerDiffX:e._isActive?e._containerDiffX:0,this._offsetTop=i._isActive?i._containerDiffY:e._isActive?e._containerDiffY:0}}},{key:"_updateTargetStyles",value:function(){if(!this._isDestroyed){var t=this._item;this._targetStyles.transform=ut(t._left+this._offsetLeft,t._top+this._offsetTop)}}},{key:"_finish",value:function(){if(!this._isDestroyed){var t=this._item,e=t._migrate,i=t._release;this._isActive&&(this._isActive=!1,bt(t._element,t.getGrid()._settings.itemPositioningClass)),i._isActive&&i.stop(),e._isActive&&e.stop(),this._queue.flush(!1,t)}}},{key:"_setupAnimation",value:function(){var t=ct(this._item._element);this._currentLeft=t.x,this._currentTop=t.y}},{key:"_startAnimation",value:function(){var t=this._item,e=t._element,i=t.getGrid()._settings;if(this._updateOffsets(),this._updateTargetStyles(),t._left===this._currentLeft-this._offsetLeft&&t._top===this._currentTop-this._offsetTop)return this._isInterrupted&&this.stop(!1,this._targetStyles),this._isActive=!1,void this._finish();!this._isInterrupted&&K(e,i.itemPositioningClass),this._currentStyles.transform=ut(this._currentLeft,this._currentTop),t._animate.start(this._currentStyles,this._targetStyles,this._animateOptions)}}]),e}(r.Component),At={},Ot=function(t){function e(t){R(this,e);var i=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return i._item=t,i._isActive=!1,i._isDestroyed=!1,i._container=!1,i._containerDiffX=0,i._containerDiffY=0,i}return C(e,t),T(e,[{key:"start",value:function(t,e,i){if(this._isDestroyed)return this;var n,r,s=this._item,o=s._element,a=s.isVisible(),h=s.getGrid(),l=h._settings,c=t._settings,u=t._element,d=t._items,f=h._items.indexOf(s),p=i||document.body,_=void 0,m=void 0,v=void 0,g=void 0,y=void 0,b=void 0;if("number"==typeof e)_=Z(d,e,!0);else{if(!(m=t._getItem(e)))return this;_=d.indexOf(m)}return(s.isPositioning()||this._isActive||s.isReleasing())&&(y=(g=ct(o)).x,b=g.y),s.isPositioning()&&s._layout.stop(!0,{transform:ut(y,b)}),this._isActive&&(y-=this._containerDiffX,b-=this._containerDiffY,this.stop(!0,{transform:ut(y,b)})),s.isReleasing()&&(y-=s._release._containerDiffX,b-=s._release._containerDiffY,s._release.stop(!0,{transform:ut(y,b)})),s._visibility._stopAnimation(),s._drag&&s._drag.destroy(),s._visibility._queue.flush(!0,s),h._hasListeners("beforeSend")&&h._emit("beforeSend",{item:s,fromGrid:h,fromIndex:f,toGrid:t,toIndex:_}),t._hasListeners("beforeReceive")&&t._emit("beforeReceive",{item:s,fromGrid:h,fromIndex:f,toGrid:t,toIndex:_}),bt(o,l.itemClass),bt(o,l.itemVisibleClass),bt(o,l.itemHiddenClass),K(o,c.itemClass),K(o,a?c.itemVisibleClass:c.itemHiddenClass),h._items.splice(f,1),ft(d,s,_),s._gridId=t._id,p!==(n=o.parentNode)&&(p.appendChild(o),v=ht(p,n,!0),g||(y=(g=ct(o)).x,b=g.y),o.style[P]=ut(y+v.left,b+v.top)),s._child.removeAttribute("style"),G(s._child,a?c.visibleStyles:c.hiddenStyles),o.style.display=a?"block":"hidden",r=ht(p,u,!0),s._refreshDimensions(),s._refreshSortData(),s._drag=c.dragEnabled?new St(s):null,this._isActive=!0,this._container=p,this._containerDiffX=r.left,this._containerDiffY=r.top,h._hasListeners("send")&&h._emit("send",{item:s,fromGrid:h,fromIndex:f,toGrid:t,toIndex:_}),t._hasListeners("receive")&&t._emit("receive",{item:s,fromGrid:h,fromIndex:f,toGrid:t,toIndex:_}),this}},{key:"stop",value:function(t,e){if(this._isDestroyed||!this._isActive)return this;var i=this._item,n=i._element,r=i.getGrid()._element,s=void 0;return this._container!==r&&(e||(t?(s=ct(n),At.transform=ut(s.x-this._containerDiffX,s.y-this._containerDiffY)):At.transform=ut(i._left,i._top),e=At),r.appendChild(n),G(n,e)),this._isActive=!1,this._container=null,this._containerDiffX=0,this._containerDiffY=0,this}},{key:"destroy",value:function(){return this._isDestroyed||(this.stop(!0),this._item=null,this._isDestroyed=!0),this}}]),e}(r.Component),xt={},Pt=function(t){function e(t){R(this,e);var i=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return i._item=t,i._isActive=!1,i._isDestroyed=!1,i._isPositioningStarted=!1,i._containerDiffX=0,i._containerDiffY=0,i}return C(e,t),T(e,[{key:"start",value:function(){if(this._isDestroyed||this._isActive)return this;var t=this._item,e=t.getGrid();return this._isActive=!0,K(t._element,e._settings.itemReleasingClass),e._emit("dragReleaseStart",t),t._layout.start(!1),this}},{key:"stop",value:function(t,e){if(this._isDestroyed||!this._isActive)return this;var i=this._item,n=i._element,r=i.getGrid(),s=r._element,o=void 0;return this._reset(),n.parentNode!==s&&(e||(t?(o=ct(n),xt.transform=ut(o.x-this._containerDiffX,o.y-this._containerDiffY)):xt.transform=ut(i._left,i._top),e=xt),s.appendChild(n),G(n,e)),t||r._emit("dragReleaseEnd",i),this}},{key:"destroy",value:function(){return this._isDestroyed||(this.stop(!0),this._item=null,this._isDestroyed=!0),this}},{key:"_reset",value:function(){if(!this._isDestroyed){var t=this._item;this._isActive=!1,this._isPositioningStarted=!1,this._containerDiffX=0,this._containerDiffY=0,bt(t._element,t.getGrid()._settings.itemReleasingClass)}}}]),e}(r.Component);var Mt=function(t){function e(t){R(this,e);var i=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t)),n=t._isActive,r=t._element,s=t.getGrid()._settings;return i._item=t,i._isDestroyed=!1,i._isHidden=!n,i._isHiding=!1,i._isShowing=!1,i._queue=new Ct,i._finishShow=i._finishShow.bind(i),i._finishHide=i._finishHide.bind(i),r.style.display=n?"block":"none",K(r,n?s.itemVisibleClass:s.itemHiddenClass),G(t._child,n?s.visibleStyles:s.hiddenStyles),i}return C(e,t),T(e,[{key:"show",value:function(t,e){if(this._isDestroyed)return this;var i=this._item,n=i._element,r=this._queue,s="function"==typeof e?e:null,o=i.getGrid()._settings;return this._isShowing||this._isHidden?this._isShowing&&!t?(s&&r.add(s),this):(this._isShowing||(r.flush(!0,i),bt(n,o.itemHiddenClass),K(n,o.itemVisibleClass),this._isHiding||(n.style.display="block")),s&&r.add(s),i._isActive=this._isShowing=!0,this._isHiding=this._isHidden=!1,this._startAnimation(!0,t,this._finishShow),this):(s&&s(!1,i),this)}},{key:"hide",value:function(t,e){if(this._isDestroyed)return this;var i=this._item,n=i._element,r=this._queue,s="function"==typeof e?e:null,o=i.getGrid()._settings;return!this._isHiding&&this._isHidden?(s&&s(!1,i),this):this._isHiding&&!t?(s&&r.add(s),this):(this._isHiding||(r.flush(!0,i),K(n,o.itemHiddenClass),bt(n,o.itemVisibleClass)),s&&r.add(s),this._isHidden=this._isHiding=!0,i._isActive=this._isShowing=!1,this._startAnimation(!1,t,this._finishHide),this)}},{key:"destroy",value:function(){if(this._isDestroyed)return this;var t=this._item,e=t._element,i=t.getGrid(),n=this._queue,r=i._settings;return this._stopAnimation({}),n.flush(!0,t).destroy(),bt(e,r.itemVisibleClass),bt(e,r.itemHiddenClass),this._item=null,this._isHiding=this._isShowing=!1,this._isDestroyed=this._isHidden=!0,this}},{key:"_startAnimation",value:function(t,e,i){if(!this._isDestroyed){var n=this._item,r=n.getGrid()._settings,s=t?r.visibleStyles:r.hiddenStyles,o=parseInt(t?r.showDuration:r.hideDuration)||0,a=(t?r.showEasing:r.hideEasing)||"ease",h=e||o<=0,l=void 0;if(s){if(j(n._id),h)return n._animateChild.isAnimating()?n._animateChild.stop(s):G(n._child,s),void(i&&i());var c,u,d;c=n._id,u=function(){l=function(t,e){var i={};for(var n in e)i[n]=N(t,H(n));return i}(n._child,s)},d=function(){n._animateChild.start(l,s,{duration:o,easing:a,onFinish:i})},z.add(c+"visibility",u,d)}else i&&i()}}},{key:"_stopAnimation",value:function(t){if(!this._isDestroyed){var e=this._item;j(e._id),e._animateChild.stop(t)}}},{key:"_finishShow",value:function(){this._isHidden||(this._isShowing=!1,this._queue.flush(!1,this._item))}},{key:"_finishHide",value:function(){if(this._isHidden){var t=this._item;this._isHiding=!1,Nt.transform=ut(0,0),t._layout.stop(!0,Nt),t._element.style.display="none",this._queue.flush(!1,t)}}}]),e}(r.Component),Nt={},Lt=0;function Ht(){return++Lt}var Gt,Yt,Ft,Xt,zt=function(){function t(e,i,n){R(this,t);var r=e._settings;this._id=Ht(),this._gridId=e._id,this._isDestroyed=!1,this._left=0,this._top=0,this._element=i,this._child=i.children[0],i.parentNode!==e._element&&e._element.appendChild(i),K(i,r.itemClass),"boolean"!=typeof n&&(n="none"!==N(i,"display")),this._isActive=n,i.style.left="0",i.style.top="0",i.style[P]=ut(0,0),this._animate=new Y(i),this._animateChild=new Y(this._child),this._visibility=new Mt(this),this._layout=new It(this),this._migrate=new Ot(this),this._release=new Pt(this),this._drag=r.dragEnabled?new St(this):null,this._refreshDimensions(),this._refreshSortData()}return T(t,[{key:"getGrid",value:function(){return D[this._gridId]}},{key:"getElement",value:function(){return this._element}},{key:"getWidth",value:function(){return this._width}},{key:"getHeight",value:function(){return this._height}},{key:"getMargin",value:function(){return{left:this._marginLeft,right:this._marginRight,top:this._marginTop,bottom:this._marginBottom}}},{key:"getPosition",value:function(){return{left:this._left,top:this._top}}},{key:"isActive",value:function(){return this._isActive}},{key:"isVisible",value:function(){return!!this._visibility&&!this._visibility._isHidden}},{key:"isShowing",value:function(){return!(!this._visibility||!this._visibility._isShowing)}},{key:"isHiding",value:function(){return!(!this._visibility||!this._visibility._isHiding)}},{key:"isPositioning",value:function(){return!(!this._layout||!this._layout._isActive)}},{key:"isDragging",value:function(){return!(!this._drag||!this._drag._isActive)}},{key:"isReleasing",value:function(){return!(!this._release||!this._release._isActive)}},{key:"isDestroyed",value:function(){return this._isDestroyed}},{key:"_refreshDimensions",value:function(){if(!this._isDestroyed&&!this._visibility._isHidden){var t=this._element,e=t.getBoundingClientRect();this._width=e.width,this._height=e.height,this._marginLeft=Math.max(0,nt(t,"margin-left")),this._marginRight=Math.max(0,nt(t,"margin-right")),this._marginTop=Math.max(0,nt(t,"margin-top")),this._marginBottom=Math.max(0,nt(t,"margin-bottom"))}}},{key:"_refreshSortData",value:function(){if(!this._isDestroyed){var t=this._sortData={},e=this.getGrid()._settings.sortData,i=void 0;for(i in e)t[i]=e[i](this,this._element)}}},{key:"_destroy",value:function(t){if(!this._isDestroyed){var e=this._element,i=this.getGrid(),n=i._settings,r=i._items.indexOf(this);this._release.destroy(),this._migrate.destroy(),this._layout.destroy(),this._visibility.destroy(),this._animate.destroy(),this._animateChild.destroy(),this._drag&&this._drag.destroy(),e.removeAttribute("style"),this._child.removeAttribute("style"),bt(e,n.itemClass),r>-1&&i._items.splice(r,1),t&&e.parentNode.removeChild(e),this._isActive=!1,this._isDestroyed=!0}}}]),t}(),qt=function(t){function e(){R(this,e);var t=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t._slots=[],t._slotSizes=[],t._freeSlots=[],t._newSlots=[],t._rectItem={},t._rectStore=[],t._rectId=0,t._layout={slots:null,setWidth:!1,setHeight:!1,width:!1,height:!1},t._sortRectsLeftTop=t._sortRectsLeftTop.bind(t),t._sortRectsTopLeft=t._sortRectsTopLeft.bind(t),t}return C(e,t),T(e,[{key:"getLayout",value:function(t,e,i,n,r){var s=this._layout,o=!(!r||!r.fillGaps),a=!(!r||!r.horizontal),h=!(!r||!r.alignRight),l=!(!r||!r.alignBottom),c=!(!r||!r.rounding),u=this._slotSizes,d=void 0;if(s.slots=n||this._slots,s.width=a?0:c?Math.round(e):e,s.height=a?c?Math.round(i):i:0,s.setWidth=a,s.setHeight=!a,s.slots.length=0,u.length=0,!t.length)return s;for(d=0;d<t.length;d++)this._addSlot(t[d],a,o,c,h||l);if(h)for(d=0;d<s.slots.length;d+=2)s.slots[d]=s.width-(s.slots[d]+u[d]);if(l)for(d=1;d<s.slots.length;d+=2)s.slots[d]=s.height-(s.slots[d]+u[d]);return u.length=0,this._freeSlots.length=0,this._newSlots.length=0,this._rectId=0,s}},{key:"_addRect",value:function(t,e,i,n){var r=++this._rectId,s=this._rectStore;return s[r]=t||0,s[++this._rectId]=e||0,s[++this._rectId]=i||0,s[++this._rectId]=n||0,r}},{key:"_getRect",value:function(t,e){var i=e||this._rectItem,n=this._rectStore;return i.left=n[t]||0,i.top=n[++t]||0,i.width=n[++t]||0,i.height=n[++t]||0,i}},{key:"_doRectsOverlap",value:function(t,e){return!(t.left+t.width<=e.left||e.left+e.width<=t.left||t.top+t.height<=e.top||e.top+e.height<=t.top)}},{key:"_isRectWithinRect",value:function(t,e){return t.left>=e.left&&t.top>=e.top&&t.left+t.width<=e.left+e.width&&t.top+t.height<=e.top+e.height}}]),e}(r.Component);qt.prototype._addSlot=(Gt={},function(t,e,i,n,r){var s=this._layout,o=this._freeSlots,a=this._newSlots,h=void 0,l=void 0,c=void 0,u=void 0,d=void 0,f=void 0;for(a.length=0,Gt.left=null,Gt.top=null,Gt.width=t._width+t._marginLeft+t._marginRight,Gt.height=t._height+t._marginTop+t._marginBottom,n&&(Gt.width=Math.round(Gt.width),Gt.height=Math.round(Gt.height)),d=0;d<o.length;d++)if((l=o[d])&&(h=this._getRect(l),Gt.width<=h.width+.001&&Gt.height<=h.height+.001)){Gt.left=h.left,Gt.top=h.top;break}for(null===Gt.left&&(Gt.left=e?s.width:0,Gt.top=e?0:s.height,i||(u=!0)),!e&&Gt.top+Gt.height>s.height&&(Gt.left>0&&a.push(this._addRect(0,s.height,Gt.left,1/0)),Gt.left+Gt.width<s.width&&a.push(this._addRect(Gt.left+Gt.width,s.height,s.width-Gt.left-Gt.width,1/0)),s.height=Gt.top+Gt.height),e&&Gt.left+Gt.width>s.width&&(Gt.top>0&&a.push(this._addRect(s.width,0,1/0,Gt.top)),Gt.top+Gt.height<s.height&&a.push(this._addRect(s.width,Gt.top+Gt.height,1/0,s.height-Gt.top-Gt.height)),s.width=Gt.left+Gt.width),d=i?0:u?o.length:d;d<o.length;d++)if(l=o[d])for(h=this._getRect(l),c=this._splitRect(h,Gt),f=0;f<c.length;f++)l=c[f],(h=this._getRect(l)).width>.49&&h.height>.49&&(!e&&h.top<s.height||e&&h.left<s.width)&&a.push(l);a.length&&this._purgeRects(a).sort(e?this._sortRectsLeftTop:this._sortRectsTopLeft),e?s.width=Math.max(s.width,Gt.left+Gt.width):s.height=Math.max(s.height,Gt.top+Gt.height),s.slots.push(Gt.left,Gt.top),r&&this._slotSizes.push(Gt.width,Gt.height),this._freeSlots=a,this._newSlots=o}),qt.prototype._splitRect=(Yt=[],function(t,e){return Yt.length=0,this._doRectsOverlap(t,e)?(t.left<e.left&&Yt.push(this._addRect(t.left,t.top,e.left-t.left,t.height)),t.left+t.width>e.left+e.width&&Yt.push(this._addRect(e.left+e.width,t.top,t.left+t.width-(e.left+e.width),t.height)),t.top<e.top&&Yt.push(this._addRect(t.left,t.top,t.width,e.top-t.top)),t.top+t.height>e.top+e.height&&Yt.push(this._addRect(t.left,e.top+e.height,t.width,t.top+t.height-(e.top+e.height))),Yt):(Yt.push(this._addRect(t.left,t.top,t.width,t.height)),Yt)}),qt.prototype._purgeRects=(Ft={},Xt={},function(t){for(var e=t.length,i=void 0;e--;)if(i=t.length,t[e])for(this._getRect(t[e],Ft);i--;)if(t[i]&&e!==i&&this._isRectWithinRect(Ft,this._getRect(t[i],Xt))){t[e]=0;break}return t}),qt.prototype._sortRectsTopLeft=function(){var t={},e={};return function(i,n){return this._getRect(i,t),this._getRect(n,e),t.top<e.top?-1:t.top>e.top?1:t.left<e.left?-1:t.left>e.left?1:0}}(),qt.prototype._sortRectsLeftTop=function(){var t={},e={};return function(i,n){return this._getRect(i,t),this._getRect(n,e),t.left<e.left?-1:t.left>e.left?1:t.top<e.top?-1:t.top>e.top?1:0}}();function jt(t){var e=Object.prototype.toString.call(t);return"[object HTMLCollection]"===e||"[object NodeList]"===e}function Bt(t){return jt(t)?Array.prototype.slice.call(t):Array.prototype.concat(t)}var Wt=new qt;function Vt(){}var Ut=function(t){function e(t,i){R(this,e);var n,r=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,i)),s=r,o=void 0,a=void 0;if(t=r._element="string"==typeof t?document.querySelector(t):t,!document.body.contains(t))throw new Error("Container element must be an existing DOM element");return"function"!=typeof(o=r._settings=function(t,e){var i=Jt({},t);e&&(i=Jt(i,e));return i.visibleStyles=(e||0).visibleStyles||(t||0).visibleStyles,i.hiddenStyles=(e||0).hiddenStyles||(t||0).hiddenStyles,i}(e.defaultOptions,i)).dragSort&&(o.dragSort=!!o.dragSort),r._id=Ht(),D[r._id]=s,r._isDestroyed=!1,r._layout={id:0,items:[],slots:[],setWidth:!1,setHeight:!1,width:0,height:0},r._emitter=new A,K(t,o.containerClass),r._items=[],"string"==typeof(n=o.items)?Bt(t.children).forEach((function(t){("*"===n||J(t,n))&&s._items.push(new zt(s,t))})):(Array.isArray(n)||jt(n))&&(r._items=Bt(n).map((function(t){return new zt(s,t)}))),"number"!=typeof(a=o.layoutOnResize)&&(a=!0===a?0:-1),a>=0&&window.addEventListener("resize",s._resizeHandler=tt((function(){s.refreshItems().layout()}),a)),o.layoutOnInit&&r.layout(!0),r}return C(e,t),T(e,[{key:"on",value:function(t,e){return this._emitter.on(t,e),this}},{key:"once",value:function(t,e){return this._emitter.once(t,e),this}},{key:"off",value:function(t,e){return this._emitter.off(t,e),this}},{key:"getElement",value:function(){return this._element}},{key:"getItems",value:function(t){if(this._isDestroyed||!t&&0!==t)return this._items.slice(0);var e=[],i=Bt(t),n=void 0,r=void 0;for(r=0;r<i.length;r++)(n=this._getItem(i[r]))&&e.push(n);return e}},{key:"refreshItems",value:function(t){if(this._isDestroyed)return this;var e=this.getItems(t),i=void 0;for(i=0;i<e.length;i++)e[i]._refreshDimensions();return this}},{key:"refreshSortData",value:function(t){if(this._isDestroyed)return this;var e=this.getItems(t),i=void 0;for(i=0;i<e.length;i++)e[i]._refreshSortData();return this}},{key:"synchronize",value:function(){if(this._isDestroyed)return this;var t=this._element,e=this._items,i=void 0,n=void 0,r=void 0;if(e.length){for(r=0;r<e.length;r++)(n=e[r]._element).parentNode===t&&(i=i||document.createDocumentFragment()).appendChild(n);i&&t.appendChild(i)}return this._emit("synchronize"),this}},{key:"layout",value:function(t,e){if(this._isDestroyed)return this;var i=this,n=this._element,r=this._updateLayout(),s=r.id,o=r.items.length,a=o,h="function"==typeof t?t:e,l="function"==typeof h,c=l?r.items.slice(0):null,u=void 0,d=void 0,f=void 0;function p(){if(!(--a>0)){var t=i._layout.id!==s;l&&h(t,c),!t&&i._hasListeners("layoutEnd")&&i._emit("layoutEnd",r.items.slice(0))}}if((r.setHeight&&"number"==typeof r.height||r.setWidth&&"number"==typeof r.width)&&(u="border-box"===N(n,"box-sizing")),r.setHeight&&("number"==typeof r.height?n.style.height=(u?r.height+this._borderTop+this._borderBottom:r.height)+"px":n.style.height=r.height),r.setWidth&&("number"==typeof r.width?n.style.width=(u?r.width+this._borderLeft+this._borderRight:r.width)+"px":n.style.width=r.width),this._hasListeners("layoutStart")&&this._emit("layoutStart",r.items.slice(0)),!o)return p(),this;for(f=0;f<o;f++)(d=r.items[f])&&(d._left=r.slots[2*f],d._top=r.slots[2*f+1],d.isDragging()?p():d._layout.start(!0===t,p));return this}},{key:"add",value:function(t,e){if(this._isDestroyed||!t)return[];var i=Bt(t);if(!i.length)return i;var n=e||0,r=n.layout?n.layout:void 0===n.layout,s=this._items,o=!1,a=void 0,h=void 0;for(h=0;h<i.length;h++)a=new zt(this,i[h],n.isActive),i[h]=a,a._isActive&&(o=!0,a._layout._skipNextAnimation=!0);return ft(s,i,n.index),this._hasListeners("add")&&this._emit("add",i.slice(0)),o&&r&&this.layout("instant"===r,"function"==typeof r?r:void 0),i}},{key:"remove",value:function(t,e){if(this._isDestroyed)return this;var i=e||0,n=i.layout?i.layout:void 0===i.layout,r=!1,s=this.getItems(),o=this.getItems(t),a=[],h=void 0,l=void 0;for(l=0;l<o.length;l++)h=o[l],a.push(s.indexOf(h)),h._isActive&&(r=!0),h._destroy(i.removeElements);return this._hasListeners("remove")&&this._emit("remove",o.slice(0),a),r&&n&&this.layout("instant"===n,"function"==typeof n?n:void 0),o}},{key:"show",value:function(t,e){return this._isDestroyed||this._setItemsVisibility(t,!0,e),this}},{key:"hide",value:function(t,e){return this._isDestroyed||this._setItemsVisibility(t,!1,e),this}},{key:"filter",value:function(t,e){if(this._isDestroyed||!this._items.length)return this;var i=[],n=[],r="string"==typeof t,s="function"==typeof t,o=e||0,a=!0===o.instant,h=o.layout?o.layout:void 0===o.layout,l="function"==typeof o.onFinish?o.onFinish:null,c=-1,u=Vt,d=void 0,f=void 0;if(l&&(u=function(){++c&&l(i.slice(0),n.slice(0))}),s||r)for(f=0;f<this._items.length;f++)d=this._items[f],(s?t(d):J(d._element,t))?i.push(d):n.push(d);return i.length?this.show(i,{instant:a,onFinish:u,layout:!1}):u(),n.length?this.hide(n,{instant:a,onFinish:u,layout:!1}):u(),(i.length||n.length)&&(this._hasListeners("filter")&&this._emit("filter",i.slice(0),n.slice(0)),h&&this.layout("instant"===h,"function"==typeof h?h:void 0)),this}},{key:"move",value:function(t,e,i){if(this._isDestroyed||this._items.length<2)return this;var n=this._items,r=i||0,s=r.layout?r.layout:void 0===r.layout,o="swap"===r.action,a=o?"swap":"move",h=this._getItem(t),l=this._getItem(e),c=void 0,u=void 0;return h&&l&&h!==l&&(c=n.indexOf(h),u=n.indexOf(l),o?$(n,c,u):Q(n,c,u),this._hasListeners("move")&&this._emit("move",{item:h,fromIndex:c,toIndex:u,action:a}),s&&this.layout("instant"===s,"function"==typeof s?s:void 0)),this}},{key:"send",value:function(t,e,i,n){if(this._isDestroyed||e._isDestroyed||this===e)return this;if(!(t=this._getItem(t)))return this;var r=n||0,s=r.appendTo||document.body,o=r.layoutSender?r.layoutSender:void 0===r.layoutSender,a=r.layoutReceiver?r.layoutReceiver:void 0===r.layoutReceiver;return t._migrate.start(e,i,s),t._migrate._isActive&&t._isActive&&(o&&this.layout("instant"===o,"function"==typeof o?o:void 0),a&&e.layout("instant"===a,"function"==typeof a?a:void 0)),this}},{key:"destroy",value:function(t){if(this._isDestroyed)return this;var e=this._element,i=this._items.slice(0),n=void 0;for(this._resizeHandler&&window.removeEventListener("resize",this._resizeHandler),n=0;n<i.length;n++)i[n]._destroy(t);return bt(e,this._settings.containerClass),e.style.height="",e.style.width="",this._emit("destroy"),this._emitter.destroy(),D[this._id]=void 0,this._isDestroyed=!0,this}},{key:"_getItem",value:function(t){if(this._isDestroyed||!t&&0!==t)return null;if("number"==typeof t)return this._items[t>-1?t:this._items.length+t]||null;if(t instanceof zt)return t._gridId===this._id?t:null;for(var e=0;e<this._items.length;e++)if(this._items[e]._element===t)return this._items[e];return null}},{key:"_updateLayout",value:function(){var t,e,i=this._layout,n=this._settings.layout,r=void 0,s=void 0;for(++i.id,i.items.length=0,s=0;s<this._items.length;s++)this._items[s]._isActive&&i.items.push(this._items[s]);return this._refreshDimensions(),t=this._width-this._borderLeft-this._borderRight,e=this._height-this._borderTop-this._borderBottom,r="function"==typeof n?n(i.items,t,e):Wt.getLayout(i.items,t,e,i.slots,n),i.slots=r.slots,i.setWidth=Boolean(r.setWidth),i.setHeight=Boolean(r.setHeight),i.width=r.width,i.height=r.height,i}},{key:"_emit",value:function(){var t;this._isDestroyed||(t=this._emitter).emit.apply(t,arguments)}},{key:"_hasListeners",value:function(t){var e=this._emitter._events[t];return!(!e||!e.length)}},{key:"_updateBoundingRect",value:function(){var t=this._element.getBoundingClientRect();this._width=t.width,this._height=t.height,this._left=t.left,this._top=t.top}},{key:"_updateBorders",value:function(t,e,i,n){var r=this._element;t&&(this._borderLeft=nt(r,"border-left-width")),e&&(this._borderRight=nt(r,"border-right-width")),i&&(this._borderTop=nt(r,"border-top-width")),n&&(this._borderBottom=nt(r,"border-bottom-width"))}},{key:"_refreshDimensions",value:function(){this._updateBoundingRect(),this._updateBorders(1,1,1,1)}},{key:"_setItemsVisibility",value:function(t,e,i){var n=this,r=this.getItems(t),s=i||0,o=!0===s.instant,a=s.onFinish,h=s.layout?s.layout:void 0===s.layout,l=r.length,c=e?"showStart":"hideStart",u=e?"showEnd":"hideEnd",d=e?"show":"hide",f=!1,p=[],_=[],m=void 0,v=void 0;if(l){for(this._hasListeners(c)&&this._emit(c,r.slice(0)),v=0;v<r.length;v++)m=r[v],(e&&!m._isActive||!e&&m._isActive)&&(f=!0),e&&!m._isActive&&(m._layout._skipNextAnimation=!0),e&&m._visibility._isHidden&&_.push(m),m._visibility[d](o,(function(t,e){t||p.push(e),--l<1&&("function"==typeof a&&a(p.slice(0)),n._hasListeners(u)&&n._emit(u,p.slice(0)))}));_.length&&this.refreshItems(_),f&&h&&this.layout("instant"===h,"function"==typeof h?h:void 0)}else"function"==typeof a&&a(r)}}]),e}(r.Component);function Jt(t,e){var i=Object.keys(e),n=i.length,r=void 0,s=void 0,o=void 0;for(o=0;o<n;o++)r=_t(e[s=i[o]]),_t(t[s])&&r?t[s]=Jt(Jt({},t[s]),e[s]):r?t[s]=Jt({},e[s]):Array.isArray(e[s])?t[s]=e[s].slice(0):t[s]=e[s];return t}Ut.Item=zt,Ut.ItemLayout=It,Ut.ItemVisibility=Mt,Ut.ItemRelease=Pt,Ut.ItemMigrate=Ot,Ut.ItemAnimate=Y,Ut.ItemDrag=St,Ut.Emitter=A,Ut.defaultOptions={items:"*",showDuration:300,showEasing:"ease",hideDuration:300,hideEasing:"ease",visibleStyles:{opacity:"1",transform:"scale(1)"},hiddenStyles:{opacity:"0",transform:"scale(0.5)"},layout:{fillGaps:!1,horizontal:!1,alignRight:!1,alignBottom:!1,rounding:!0},layoutOnResize:100,layoutOnInit:!0,layoutDuration:300,layoutEasing:"ease",sortData:null,dragEnabled:!1,dragContainer:null,dragStartPredicate:{distance:0,delay:0,handle:!1},dragAxis:null,dragSort:!0,dragSortInterval:100,dragSortPredicate:{threshold:50,action:"move"},dragReleaseDuration:300,dragReleaseEasing:"ease",dragHammerSettings:{touchAction:"none"},containerClass:"muuri",itemClass:"muuri-item",itemVisibleClass:"muuri-item-shown",itemHiddenClass:"muuri-item-hidden",itemPositioningClass:"muuri-item-positioning",itemDraggingClass:"muuri-item-dragging",itemReleasingClass:"muuri-item-releasing"},Ut.prototype.sort=function(){var t=void 0,e=void 0,i=void 0,n=void 0;function r(t){for(var e={},i=0;i<t.length;i++)e[t[i]._id]=i;return e}function s(t,i){var r=n[t._id],s=n[i._id];return e?s-r:r-s}function o(o,a){for(var h=0,l=void 0,c=void 0,u=void 0,d=void 0,f=0;f<t.length;f++)if(l=t[f][0],c=t[f][1],u=(o._sortData?o:o._refreshSortData())._sortData[l],d=(a._sortData?a:a._refreshSortData())._sortData[l],h="desc"===c||!c&&e?d<u?-1:d>u?1:0:u<d?-1:u>d?1:0)return h;return h||(n||(n=r(i)),h=s(o,a)),h}function a(o,a){var h=t(o,a);return e&&h&&(h=-h),h||(n||(n=r(i)),s(o,a))}return function(r,s){if(this._isDestroyed||this._items.length<2)return this;var h=this._items,l=s||0,c=l.layout?l.layout:void 0===l.layout,u=void 0;if(t=r,e=!!l.descending,i=h.slice(0),n=null,"function"==typeof t)h.sort(a);else if("string"==typeof t)t=r.trim().split(" ").map((function(t){return t.split(":")})),h.sort(o);else{if(!Array.isArray(t))return this;if(t.length!==h.length)throw new Error("[Muuri] sort reference items do not match with grid items.");for(u=0;u<h.length;u++){if(!t.includes(h[u]))throw new Error("[Muuri] sort reference items do not match with grid items.");h[u]=t[u]}e&&h.reverse()}return this._hasListeners("sort")&&this._emit("sort",h.slice(0),i),c&&this.layout("instant"===c,"function"==typeof c?c:void 0),this}}();var Kt=function(t){function e(t){R(this,e);var i=I(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return i.grid=new Ut(t.node,t.defaultOptions),i.getMethod=i.getMethod.bind(i),i.getEvent=i.getEvent.bind(i),i.getItemMethod=i.getItemMethod.bind(i),i}return C(e,t),T(e,[{key:"getMethod",value:function(t,e,i,n,r){try{var s=void 0;switch(t){case"getElement":s=this.grid.getElement();break;case"getItems":s=this.grid.getItems(e);break;case"refreshItems":s=this.grid.refreshItems(e);break;case"refreshSortData":s=this.grid.refreshSortData(e);break;case"synchronize":s=this.grid.synchronize();break;case"layout":s=this.grid.layout(e,i);break;case"add":s=this.grid.add(e,i);break;case"remove":s=this.grid.remove(e,i);break;case"show":s=this.grid.show(e,i);break;case"hide":s=this.grid.hide(e,i);break;case"filter":s=this.grid.filter(e,i);break;case"sort":s=this.grid.sort(e,i);break;case"move":s=this.grid.move(e,i,n);break;case"send":s=this.grid.send(e,i,n,r);break;case"on":s=this.grid.on(e,i);break;case"once":s=this.grid.once(e,i);break;case"off":s=this.grid.off(e,i);break;case"destroy":s=this.grid.destroy(e);break;default:s=null,console.error("Invalid 'Method' provided: "+t),console.error("Check the Muuri documentation for a list of valid methods.")}return s}catch(t){console.error("The following error occured in 'getMethod()': "+t)}}},{key:"getEvent",value:function(t,e,i,n){var r=this;if(null==t||-1===["synchronize","layoutStart","layoutEnd","add","remove","showStart","showEnd","hideStart","hideEnd","filter","sort","move","send","beforeSend","receive","beforeReceive","dragInit","dragStart","dragMove","dragScroll","dragEnd","dragReleaseStart","dragReleaseEnd","destroy"].indexOf(t))console.error("Invalid event provided to 'getEvent()': "+t);else try{this.grid.on(t,(function(t,e){n&&n(t,e),r.grid.synchronize()}))}catch(t){console.error("The following error occured in 'getEvent()': "+t)}}},{key:"getItemMethod",value:function(t,e){try{var i=void 0;switch(t){case"getGrid":i=e.getGrid();break;case"getElement":i=e.getElement();break;case"getWidth":i=e.getWidth();break;case"getHeight":i=e.getHeight();break;case"getMargin":i=e.getMargin();break;case"getPosition":i=e.getPosition();break;case"isActive":i=e.isActive();break;case"isVisible":i=e.isVisible();break;case"isShowing":i=e.isShowing();break;case"isHiding":i=e.isHiding();break;case"isPositioning":i=e.isPositioning();break;case"isDragging":i=e.isDragging();break;case"isReleasing":i=e.isReleasing();break;case"isDestroyed":i=e.isDestroyed();break;default:i=null,console.error("Invalid 'Item Event' provided: "+t),console.error("Check the Muuri documentation for a list of valid item events.")}return i}catch(t){console.error("The following error occured in 'getItemMethod()': "+t)}}}]),e}(r.Component);Kt.propTypes={node:E.a.node.isRequired,defaultOptions:E.a.object};var Zt=Kt,Qt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),$t=function(t){function e(e){var i=t.call(this,e)||this;return i.addToGrid=i.addToGrid.bind(i),i.removeFromGrid=i.removeFromGrid.bind(i),i.onResize=i.onResize.bind(i),i.cancelNew=i.cancelNew.bind(i),i.addRecipe=i.addRecipe.bind(i),i.selectRecipe=i.selectRecipe.bind(i),i.state={addingRecipe:!1,queryMode:!1,selectedItems:{}},f.refreshRecipeGrid=i.refreshGrid.bind(i),f.setQueryMode=i.setQueryMode.bind(i),f.setSelectCB=function(t){return i.setState({selectCB:t})},i}return Qt(e,t),e.prototype.componentDidMount=function(){this.grid=new Zt({node:this.gridElement,defaultOptions:{dragEnabled:!0,dragStartPredicate:function(t,e,i){return"cardTitle"===e.target.className&&function(t,e,i){var n=t._drag,r=n._startPredicateData||n._setupStartPredicate(i);if(!e.isFinal)return!(!r.handleElement&&(r.handleElement=n._getStartPredicateHandle(e),!r.handleElement))&&(r.delay&&(r.event=e,r.delayTimer||(r.delayTimer=window.setTimeout((function(){r.delay=0,n._resolveStartPredicate(r.event)&&(n._forceResolveStartPredicate(r.event),n._resetStartPredicate())}),r.delay))),n._resolveStartPredicate(e));n._finishStartPredicate(e)}(t,e,i)}}})},e.prototype.componentWillUnmount=function(){this.grid.getMethod("destroy")},e.prototype.render=function(){var t=this;return s.a.createElement("div",null,s.a.createElement("h1",null,"Your Recipes"),s.a.createElement("div",{ref:function(e){return t.gridElement=e}},this.props.recipes.map((function(e){return t.renderCard(e)})),this.state.addingRecipe&&this.renderNewCard()),this.state.addingRecipe||this.state.queryMode||s.a.createElement("button",{onClick:function(e){return t.setState({addingRecipe:!0})}},"Add Recipe"))},e.prototype.renderCard=function(t){return s.a.createElement(w,{key:t.name,recipeData:t,onMount:this.addToGrid,onUnMount:this.removeFromGrid,editRecipe:this.props.editRecipe,onResize:this.onResize,queryMode:this.state.queryMode,newRecipe:!1,selected:this.state.selectedItems[t.name],selectRecipe:this.selectRecipe,onDelete:this.props.deleteRecipeFromSvr})},e.prototype.renderNewCard=function(){return s.a.createElement(w,{key:"THE_NEW_RECIPE",recipeData:{name:"",text:""},onMount:this.addToGrid,onUnMount:this.removeFromGrid,editRecipe:this.props.editRecipe,addRecipe:this.addRecipe,queryMode:!1,onResize:this.onResize,newRecipe:!0,selected:!1,cancelNew:this.cancelNew,onDelete:this.props.deleteRecipeFromSvr})},e.prototype.cancelNew=function(){this.setState({addingRecipe:!1})},e.prototype.addRecipe=function(t){this.setState({addingRecipe:!1}),this.props.addRecipe(t)},e.prototype.selectRecipe=function(t){var e=this.state.selectedItems;e[t]=!0,this.setState({selectedItems:e}),this.state.selectCB&&this.state.selectCB(t)},e.prototype.addToGrid=function(t){this.grid.getMethod("add",[t],{isActive:!0})},e.prototype.removeFromGrid=function(t){this.grid.getMethod("remove",[t],{removeElements:!1})},e.prototype.onResize=function(t){this.grid.getMethod("refreshItems",[t]),this.grid.getMethod("layout")},e.prototype.refreshGrid=function(){this.grid.getMethod("refreshItems"),this.grid.getMethod("layout"),this.props.fetchRecipes()},e.prototype.setQueryMode=function(t){this.setState({queryMode:t,selectedItems:{}})},e}(r.Component),te=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),ee=function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var n=Array(t),r=0;for(e=0;e<i;e++)for(var s=arguments[e],o=0,a=s.length;o<a;o++,r++)n[r]=s[o];return n},ie=function(t){function e(e){var i=t.call(this,e)||this;return i.updateRecipes=i.updateRecipes.bind(i),i.reportError=i.reportError.bind(i),i.deleteRecipe=i.deleteRecipe.bind(i),i.editRecipe=i.editRecipe.bind(i),i.addRecipe=i.addRecipe.bind(i),i.fetchRecipes=i.fetchRecipes.bind(i),i.service=c?new l:new _,i.state={recipes:[],error:""},i}return te(e,t),e.prototype.componentDidMount=function(){this.fetchRecipes()},e.prototype.render=function(){var t;return t=s.a.createElement($t,{recipes:this.state.recipes,deleteRecipeFromSvr:this.deleteRecipe,editRecipe:this.editRecipe,addRecipe:this.addRecipe,fetchRecipes:this.fetchRecipes}),s.a.createElement("div",null,t,s.a.createElement("div",null,this.state.error))},e.prototype.updateRecipes=function(t){this.setState({recipes:t,error:""})},e.prototype.reportError=function(t){this.setState({error:t.message})},e.prototype.deleteRecipe=function(t){var e=this.state.recipes.filter((function(e){return e.name!==t}));e.length!==this.state.recipes.length&&(this.service.deleteRecipe(t).then(this.updateRecipes).catch(this.reportError),this.setState({recipes:e}))},e.prototype.editRecipe=function(t){for(var e=ee(this.state.recipes),i=0;i<e.length;i++)if(e[i].name===t.name){e[i]=t;break}this.service.editRecipe(t.name,t).then(this.updateRecipes).catch(this.reportError),this.setState({recipes:e})},e.prototype.addRecipe=function(t){var e=ee(this.state.recipes);e.push(t),this.service.addRecipe(t.name,t).then(this.updateRecipes).catch(this.reportError),this.setState({recipes:e})},e.prototype.fetchRecipes=function(){this.service.getRecipes().then(this.updateRecipes).catch(this.reportError)},e}(r.Component);Object(o.render)(s.a.createElement(ie,null),document.getElementById("recipeRoot"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,